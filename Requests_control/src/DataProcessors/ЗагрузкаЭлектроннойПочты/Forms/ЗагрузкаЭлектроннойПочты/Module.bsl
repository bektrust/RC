#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Предпросмотр = "<HTML> <style type=""text/css""> body { overflow: auto;} </style> <BODY></BODY></HTML>";
	Элементы.ГруппаВложения.Видимость = Ложь;
	
	ЗаполнитьКэш();
	
	НастроитьПараметрыЗагрузки();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
		КэшИзвлекатьТекстыФайловНаКлиенте = Ложь;
	#КонецЕсли
	
	Если ЗначениеЗаполнено(ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль) Тогда
		ПодключитьОбработчикОжидания("ВыполнитьОбновитьСписокСообщений", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбновитьСписокСообщений()
	
	ВидПочтовогоКлиента = ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль.ВидПочтовогоКлиента;
	Если ВидПочтовогоКлиента = ПредопределенноеЗначение("Перечисление.ВидыПочтовыхКлиентов.MSOutlook") Тогда
		
		Путь = "";
		Данные = ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль.Данные;
		Если Данные.Свойство("Путь") Тогда
			Путь = Данные.Путь;
		КонецЕсли;
		
		ПутьOutlook = Путь;
		
		Если Не ЗначениеЗаполнено(Путь) Тогда
			
			#Если НЕ ВебКлиент Тогда			
				
			Обработчик = Новый ОписаниеОповещения("ПослеВыбораПапкиOutlook", 
				ЭтотОбъект);
				
			ОткрытьФорму(
				"Обработка.НастройкаПочты.Форма.ЗагрузкаMSOutlook",
				,
				УникальныйИдентификатор,,,,
				Обработчик,
				РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			#Иначе
				ПоказатьПредупреждение(, НСтр("ru = 'В веб клиенте загрузка из Microsoft Outlook не поддерживается.'"));
			#КонецЕсли
			
			Возврат;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ОбновитьСписокСообщений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораПапкиOutlook(КодВозврата, ПараметрыВыполнения) Экспорт
	
	Если ТипЗнч(КодВозврата) = Тип("Структура") Тогда
		
		Путь = КодВозврата.Данные.Путь;
		
		ПрофилиДляЗагрузкиХранилище = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
			"РаботаСПочтой", "ПрофилиДляЗагрузки");	
		ПрофильЗагрузки = ПрофилиДляЗагрузкиХранилище.Получить(0);
		
		ПрофильЗагрузки.Значение.Данные.Вставить("Путь", Путь);
		ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль.Данные.Вставить("Путь", Путь);
		
		МассивСтруктур = Новый Массив;
		ДобавитьСтруктуруНастройки(МассивСтруктур, "РаботаСПочтой", "ПрофилиДляЗагрузки", ПрофилиДляЗагрузкиХранилище);
		ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранитьМассив(МассивСтруктур);
		
		ОбновитьСписокСообщений();
		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтруктуруНастройки(МассивСтруктур, Объект, Настройка, Значение)
	МассивСтруктур.Добавить(Новый Структура ("Объект, Настройка, Значение", Объект, Настройка, Значение));
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Обращение_ЗаписьИзПочты" Тогда
		
		Идентификатор = Параметр.Идентификатор;
		Ссылка = Параметр.Ссылка;
		
		Отбор = Новый Структура("Идентификатор", Идентификатор);
		Строки = ВходящиеСообщения.НайтиСтроки(Отбор);
		Если Строки.Количество() = 1 Тогда
			Сообщение = Строки[0];
			ОбработатьПисьмоПослеЗагрузки(Сообщение, Сообщение.ПолучитьИдентификатор(), Ссылка);
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПрофильНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещенияОВыборе = Новый ОписаниеОповещения(
		"ПрофильПродолжениеВыбораИзСписка",
		ЭтотОбъект);
	
	ПоказатьВыборИзСписка(ОписаниеОповещенияОВыборе, Элементы.Профиль.СписокВыбора);

КонецПроцедуры

&НаКлиенте
Процедура ПрофильПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Профиль) Тогда
		Для Каждого СтруктураПрофиля Из ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.ДоступныеПрофили Цикл
			Если СтруктураПрофиля.Профиль = Профиль Тогда
				ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль = СтруктураПрофиля;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль = Неопределено;
	КонецЕсли;
	
	УдалитьВременныеФайлы();
	ВходящиеСообщенияОчиститьСервер();
	ПрофильПриИзмененииСервер();
	
	ОбновитьСписокСообщений();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПриИзменении(Элемент)
	
	ПараметрыЗагрузкиПочтовыхСообщений.Вставить("НепрочитанныеСообщения", Истина);
	ПараметрыЗагрузкиПочтовыхСообщений.Вставить("ПериодЗагрузки", НастройкаПериодЗагрузки);
	НастройкаПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВходящиеСообщения

&НаКлиенте
Процедура ВходящиеСообщенияПриАктивизацииСтроки(Элемент)
	
	Если ЗначениеЗаполнено(Элемент.ТекущаяСтрока) Тогда
		КоличествоВложений = Элемент.ТекущиеДанные.Вложения.Количество();
	Иначе
		КоличествоВложений = 0;
	КонецЕсли;
	УстановитьДоступностьКоманд();
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		
		Отправитель = ТекущиеДанные.Отправитель;
		Тема = ТекущиеДанные.Тема;
		ДатаОтправки = ТекущиеДанные.ДатаОтправки;
		Текст = ТекущиеДанные.Текст;
		ТекстHTML = ТекущиеДанные.ТекстHTML;
		
		Предпросмотр = СформироватьHTML(Отправитель,
			Тема,  ДатаОтправки, Текст, ТекстHTML, ТекущиеДанные.Картинки,
			УникальныйИдентификатор);
		
	Иначе
		Предпросмотр = "<HTML> <style type=""text/css""> body { overflow: auto;} </style> <BODY></BODY></HTML>";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеСообщенияПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеСообщенияПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	УдалитьСообщения(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВходящиеСообщенияВложения

&НаКлиенте
Процедура ВходящиеСообщенияВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.ВходящиеСообщенияВложения.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Вложение = Элементы.ВходящиеСообщенияВложения.ТекущиеДанные;
	
	Если Вложение.ЗагрузкаЗапрещена Тогда
		Текст = НСтр("ru = 'Вложение имеет запрещенное расширение.
			|Просмотр файла запрещен.'");
		ПоказатьПредупреждение(, Текст);
		Возврат;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Вложение.ПолноеИмяФайла) Тогда
		РаботаСОбращениямиКлиент.ОткрытьФайлНаДиске(Вложение.ПолноеИмяФайла, Вложение.Имя);
	ИначеЕсли ЭтоАдресВременногоХранилища(Вложение.Адрес) Тогда
		#Если ВебКлиент Тогда
			ПолучитьФайл(Вложение.Адрес, Вложение.Имя + "." + Вложение.Расширение, Истина);
		#Иначе
			РаботаСОбращениямиКлиент.ОткрытьФайлИзВременногоХранилища(
				Вложение.Адрес, Вложение.Имя + "." + Вложение.Расширение);
		#КонецЕсли
	Иначе
		ВызватьИсключение "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеСообщенияВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеСообщенияВложенияПередУдалением(Элемент, Отказ)
	Если Элементы.ВходящиеСообщенияВложения.ТекущаяСтрока = Неопределено Тогда
		ВызватьИсключение "";
	КонецЕсли;
	ТекДанные = Элементы.ВходящиеСообщенияВложения.ТекущиеДанные;
	Если ЭтоАдресВременногоХранилища(ТекДанные.Адрес) Тогда
		УдалитьИзВременногоХранилища(ТекДанные.Адрес);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеСообщенияВложенияПослеУдаления(Элемент)
	Если Элементы.ВходящиеСообщения.ТекущаяСтрока = Неопределено Тогда
		ВызватьИсключение "";
	КонецЕсли;
	Сообщение = Элементы.ВходящиеСообщения.ТекущиеДанные;
	Сообщение.Вложение = (Сообщение.Вложения.Количество() > 0);
	Сообщение.Размер = ПолучитьРазмерСообщения(Сообщение);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьДокумент(Команда)
	
	СоздатьДокументИзСообщения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокСообщений(Команда = Неопределено)
	
	Если Не ЗначениеЗаполнено(ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран почтовый профиль!'"));
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Идет загрузка почты. Пожалуйста, подождите...'"));
	
	Если ВидПочтовогоКлиентаMSOutlook() Тогда
		ЭтаФорма.Заголовок 
			= СтрШаблон(НСтр("ru = 'Загрузка обращений из Microsoft Outlook (папка: ""%1"")'"), 
				ПутьOutlook);
	Иначе	
		ЭтаФорма.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Загрузка обращений из почты %1'"),
			Профиль);
	КонецЕсли;	
		
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбновитьСписокСообщенийПродолжение",
		ЭтотОбъект);
	ЛегкаяПочтаКлиент.Получить(ПараметрыЗагрузкиПочтовыхСообщений, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСообщения(Команда)
	
	КоличествоВыделенныхСтрок = Элементы.ВходящиеСообщения.ВыделенныеСтроки.Количество();
	Если КоличествоВыделенныхСтрок = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано ни одного письма!'"));
		Возврат;
	ИначеЕсли КоличествоВыделенныхСтрок = 1 Тогда
		ТекстВопроса = НСтр("ru = 'Письмо будет удалено. Продолжить?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Письма будут удалены. Продолжить?'");
	КонецЕсли;
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения("УдалитьСообщенияЗавершение", ЭтотОбъект);
		
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 20);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ЕстьИмпортированныеФайлы(Сообщение, ИмяФайла)
	
	МассивВыделенныеСтроки = ПолучитьВыделенныеСтроки();
	Для Каждого ИдВложения Из МассивВыделенныеСтроки Цикл
	
		Вложение = Сообщение.Вложения.НайтиПоИдентификатору(ИдВложения);
		
		Если Вложение <> Неопределено Тогда
			
			Если Вложение.Импортирован Тогда
				ИмяФайла = Вложение.Имя;
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции	

&НаКлиенте
Функция ПолучитьВыделенныеСтроки()
	
	ВыделенныеСтроки = Новый Массив;
	
	Для Каждого ИдВложения Из Элементы.ВходящиеСообщенияВложения.ВыделенныеСтроки Цикл
		ВыделенныеСтроки.Добавить(ИдВложения);
	КонецЦикла;	
	
	Если ВыделенныеСтроки.Количество() = 0 
		И Элементы.ВходящиеСообщения.ТекущиеДанные.Вложения.Количество() = 1 Тогда
		
		Идентификатор = Элементы.ВходящиеСообщения.ТекущиеДанные.Вложения[0].ПолучитьИдентификатор();
		ВыделенныеСтроки.Добавить(Идентификатор);
		
	КонецЕсли;	
		
	Возврат ВыделенныеСтроки;
	
КонецФункции	

&НаКлиенте
Процедура СоздатьДокументИзСообщения()
	
	ТекущаяСтрока = Элементы.ВходящиеСообщения.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано письмо.'"));
		Возврат;
	КонецЕсли;
	
	Сообщение = Элементы.ВходящиеСообщения.ТекущиеДанные;
	
	Если Сообщение.Импортирован Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Письмо уже загружено ранее.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("Сообщение", Сообщение);
	
	СоздатьДокументИзСообщенияПослеПроверкиПовторногоИмпортаДокумента("СоздатьНовый", ПараметрыСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументИзСообщенияПослеПроверкиПовторногоИмпортаДокумента(
	Ответ, Параметры) Экспорт
	
	Сообщение = Параметры.Сообщение;
	
	Вложения = Новый Массив;
	МассивВыделенныеСтроки = ПолучитьВыделенныеСтроки();
	
	Для Каждого Вложение Из Сообщение.Вложения Цикл
	
		//Вложение = Сообщение.Вложения.НайтиПоИдентификатору(ИдВложения);
		
		Если Вложение <> Неопределено Тогда
			ВложениеИнфо = Новый Структура;
			ВложениеИнфо.Вставить("Имя", Вложение.Имя);
			ВложениеИнфо.Вставить("ПолноеИмяФайла", Вложение.ПолноеИмяФайла);
			ВложениеИнфо.Вставить("Расширение", Вложение.Расширение);
			ВложениеИнфо.Вставить("Размер", Вложение.Размер);
			
			ВложениеИнфо.Вставить("Адрес", Вложение.Адрес);
			Если Не ЭтоАдресВременногоХранилища(Вложение.Адрес)
				И ЗначениеЗаполнено(Вложение.ПолноеИмяФайла) Тогда
				
				Файл = Новый Файл(Вложение.ПолноеИмяФайла);
				Если Файл.Существует() Тогда
					ВложениеИнфо.Адрес = ПоместитьВоВременноеХранилище(
						Новый ДвоичныеДанные(Вложение.ПолноеИмяФайла), УникальныйИдентификатор);
				КонецЕсли;		
				
			КонецЕсли;	
			
			ВложениеИнфо.Вставить("ИндексКартинки", Вложение.ИндексКартинки);
			ВложениеИнфо.Вставить("Идентификатор", Вложение.Идентификатор);
			Вложения.Добавить(ВложениеИнфо);
			
			Если Вложение.Импортирован Тогда
				
				ИмяФайла = Вложение.Имя;
				ИмяФайла = СтрЗаменить(ИмяФайла, НСтр("ru=' (загружен)'"), "");
				
				ПоказатьПредупреждение(, 
					СтрШаблон(НСтр("ru = 'Файл ""%1"" уже загружен ранее.'"), ИмяФайла));
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Контрагент = Неопределено;
		
	ПредставлениеАдреса = РаботаСоСтроками.РазложитьПредставлениеАдресаЭлектроннойПочты(Сообщение.Отправитель);
	
	Если ЗначениеЗаполнено(ПредставлениеАдреса.Адрес) Тогда
		Контрагенты = НайтиКонтрагентаПоEmail(ПредставлениеАдреса.Адрес);
		Если Контрагенты.Количество() = 1 Тогда
			Контрагент = Контрагенты[0];
		КонецЕсли;	
	КонецЕсли;	
	
	// Открытие формы заполнения реквизитов документа
	ПараметрыОткрытия = Новый Структура;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ПараметрыОткрытия.Вставить("Заявитель", Контрагент);
		ПараметрыОткрытия.Вставить("АдресЭлектроннойПочты", ПредставлениеАдреса.Адрес);
	Иначе	
		ПараметрыОткрытия.Вставить("Заявитель", ПредставлениеАдреса.ОтображаемоеИмя);
		ПараметрыОткрытия.Вставить("АдресЭлектроннойПочты", ПредставлениеАдреса.Адрес);
	КонецЕсли;	
	
	ПараметрыОткрытия.Вставить("Вложения", Вложения);
	ПараметрыОткрытия.Вставить("ЗагруженИзПочты", Истина);
	ПараметрыОткрытия.Вставить("Идентификатор", Сообщение.Идентификатор);
	ПараметрыОткрытия.Вставить("АдресОтправителя", ПредставлениеАдреса.Адрес);
	ПараметрыОткрытия.Вставить("ДатаОтправки", Сообщение.ДатаОтправки);
	ПараметрыОткрытия.Вставить("Тема", Сообщение.Тема);
	ПараметрыОткрытия.Вставить("Текст", Сообщение.Текст);
	
	
	ОткрытьФорму(
		"Справочник.Обращения.Форма.ФормаНового",
		ПараметрыОткрытия,,,,,
		,  //ОписаниеОповещения,
		РежимОткрытияОкнаФормы.Независимый);
		
	Возврат;	
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораДокументаДляОбновления(Документ, Параметры) Экспорт
	
	//Если ТипЗнч(Документ) <> Тип("СправочникСсылка.ДоговорныеДокументы") Тогда
		Возврат;
	//КонецЕсли;	
	
	// обновляем файлы в документе
	
	Вложения = Новый Массив;
	МассивВыделенныеСтроки = ПолучитьВыделенныеСтроки();
	
	Для Каждого ИдВложения Из МассивВыделенныеСтроки Цикл
	
		Вложение = Параметры.Сообщение.Вложения.НайтиПоИдентификатору(ИдВложения);
		
		Если Вложение <> Неопределено Тогда
			ВложениеИнфо = Новый Структура;
			ВложениеИнфо.Вставить("Имя", Вложение.Имя);
			ВложениеИнфо.Вставить("ПолноеИмяФайла", Вложение.ПолноеИмяФайла);
			ВложениеИнфо.Вставить("Расширение", Вложение.Расширение);
			ВложениеИнфо.Вставить("Размер", Вложение.Размер);
			ВложениеИнфо.Вставить("Адрес", Вложение.Адрес);
			ВложениеИнфо.Вставить("ИндексКартинки", Вложение.ИндексКартинки);
			ВложениеИнфо.Вставить("Идентификатор", Вложение.Идентификатор);
			Вложения.Добавить(ВложениеИнфо);
		КонецЕсли;
		
	КонецЦикла;
	
	ИдентификаторыФайлов = Новый Массив;
	ОбновитьФайлыВДокументе(Документ, Вложения, Параметры.Сообщение.Идентификатор, ИдентификаторыФайлов);
	
	Отбор = Новый Структура("Идентификатор", Параметры.Сообщение.Идентификатор);
	Строки = ВходящиеСообщения.НайтиСтроки(Отбор);
	Если Строки.Количество() = 1 Тогда
		Сообщение = Строки[0];
		ОбработатьПисьмоПослеЗагрузки(Сообщение, Сообщение.ПолучитьИдентификатор(), Документ);
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Файлы успешно обновлены.'"), 
		ПолучитьНавигационнуюСсылку(Документ), Строка(Документ));
	
КонецПроцедуры	

&НаСервере
Процедура ЗарегистрироватьФайлы(ИдентификаторыФайлов)
	
	Для Каждого ФайлСтрока Из ИдентификаторыФайлов Цикл
	
		РегистрыСведений.ВнешниеИсточникиДокументов.ЗарегистрироватьВнешнийИсточникДокумента(
			ФайлСтрока.Ссылка,
			ФайлСтрока.Идентификатор);
			
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Процедура ЗарегистрироватьДокумент(Ссылка, Идентификатор)
	
	РегистрыСведений.ВнешниеИсточникиДокументов.ЗарегистрироватьВнешнийИсточникДокумента(
		Ссылка,
		Идентификатор);
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбработатьПисьмоПослеЗагрузки(Сообщение, ТекущаяСтрокаСообщения, СсылкаНаДоговор)
	
	ВходящиеСообщенияСтрока = ВходящиеСообщения.НайтиПоИдентификатору(ТекущаяСтрокаСообщения);
	Если ВходящиеСообщенияСтрока <> Неопределено Тогда
		
		ВходящиеСообщенияСтрока.Импортирован = Истина;
		ЗарегистрироватьДокумент(СсылкаНаДоговор, ВходящиеСообщенияСтрока.Идентификатор);
		
	КонецЕсли;	
	
	Если ВидПочтовогоКлиентаИнтернетПочта() Тогда
		СерверныеИдентификаторыСообщений = Новый Массив;
		СерверныеИдентификаторыСообщений.Добавить(Сообщение.Идентификатор);
		
		Элементы.ВходящиеСообщения.Обновить();
		
	ИначеЕсли ВидПочтовогоКлиентаMSOutlook() Или ВидПочтовогоКлиентаПочта() Тогда
		// Помечаем письмо как прочтенное.
		СерверныеИдентификаторыСообщений = Новый Массив;
		СерверныеИдентификаторыСообщений.Добавить(Сообщение.Идентификатор);
		Если Не ЛегкаяПочтаКлиент.ПометитьКакПрочтенные(
			ПараметрыЗагрузкиПочтовыхСообщений,
			СерверныеИдентификаторыСообщений) Тогда
			ВызватьИсключение НСтр("ru = 'Не удалось пометить письмо как прочтенное.'");
		КонецЕсли;
		
		Элементы.ВходящиеСообщения.Обновить();
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Некорректный вид почтового клиента'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокСообщенийПродолжение(Сообщения, Параметры) Экспорт
	
	Если ТипЗнч(Сообщения) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	УдалитьВременныеФайлы();
	ОбновитьСписокСообщенийСервер(Сообщения);
	
	Состояние(НСтр("ru = 'Загрузка почты завершена.'"));	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокСообщенийСервер(Сообщения)
	
	ВходящиеСообщенияОчиститьСервер();
	
	ЗагруженоСоотв = ПолучитьИнформациюОЗагруженныхСообщениях(Сообщения);
	
	Для Каждого Сообщение Из Сообщения Цикл
		
		ВходящиеСообщенияСтрока = ВходящиеСообщения.Добавить();
		ВходящиеСообщенияСтрока.Идентификатор = Сообщение.Идентификатор;
		ВходящиеСообщенияСтрока.Отправитель = Сообщение.Отправитель;
		ВходящиеСообщенияСтрока.Кому = Сообщение.Кому;
		ВходящиеСообщенияСтрока.Копия = Сообщение.Копия;
		ВходящиеСообщенияСтрока.СкрытаяКопия = Сообщение.СкрытаяКопия;
		ВходящиеСообщенияСтрока.Тема = Сообщение.Тема;
		ВходящиеСообщенияСтрока.ТипТекста = Сообщение.ТипТекста;
		ВходящиеСообщенияСтрока.Текст = Сообщение.Текст;
		ВходящиеСообщенияСтрока.ТекстHTML = Сообщение.ТекстHTML;
		ВходящиеСообщенияСтрока.ДатаОтправки = Сообщение.ДатаОтправки;
		ВходящиеСообщенияСтрока.ДатаПолучения = Сообщение.ДатаПолучения;
		ВходящиеСообщенияСтрока.Импортирован = (ЗагруженоСоотв.Получить(Сообщение.Идентификатор) = Истина);
		Если Сообщение.Важность = Перечисления.ВажностьПисем.Высокая Тогда
			ВходящиеСообщенияСтрока.Важность = 2;
		ИначеЕсли Сообщение.Важность = Перечисления.ВажностьПисем.Низкая Тогда
			ВходящиеСообщенияСтрока.Важность = 0;
		Иначе
			ВходящиеСообщенияСтрока.Важность = 1;
		КонецЕсли;
		
		ИндексВложения = 0;
		Для Каждого Вложение Из Сообщение.Вложения Цикл
			ИмяФайлаИнфо = РаботаСоСтроками.РазложитьИмяФайла(Вложение.ИмяФайла);
			ИмяФайла = ИмяФайлаИнфо.Имя;
			РасширениеФайла = ИмяФайлаИнфо.Расширение;
			ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(РасширениеФайла);
			
			ВложенияСтрока = ВходящиеСообщенияСтрока.Вложения.Добавить();
			ВложенияСтрока.Имя = ИмяФайла;
			ВложенияСтрока.Расширение = РасширениеФайла;
			ВложенияСтрока.ПолноеИмяФайла = Вложение.ПолноеИмяФайла;
			ВложенияСтрока.Адрес = Вложение.Адрес;
			ВложенияСтрока.Размер = Вложение.Размер;
			ВложенияСтрока.РазмерСтр = РаботаСоСтроками.ПолучитьРазмерСтрокой(Вложение.Размер);
			ВложенияСтрока.ИндексКартинки = ИндексКартинки;
			
			ВложенияСтрока.Идентификатор = ВходящиеСообщенияСтрока.Идентификатор + "_" + Строка(ИндексВложения);
			ВложенияСтрока.Импортирован = (ЗагруженоСоотв.Получить(ВложенияСтрока.Идентификатор) = Истина);
			Если ВложенияСтрока.Импортирован Тогда
				ВложенияСтрока.Имя = ВложенияСтрока.Имя + " " + НСтр("ru ='(загружен)'");
			КонецЕсли;	
			
			ВложенияСтрока.ЗагрузкаЗапрещена =
				Не ФайловыеФункцииКлиентСервер.РасширениеФайлаРазрешеноДляЗагрузки(
					КэшЗапретЗагрузкиФайловПоРасширению,
					КэшСписокЗапрещенныхРасширений,
					РасширениеФайла);
					
			ИндексВложения = ИндексВложения + 1;		
					
		КонецЦикла;
		
		Для Каждого Картинка Из Сообщение.Картинки Цикл
			КартинкаСтрока = ВходящиеСообщенияСтрока.Картинки.Добавить();
			ЗаполнитьЗначенияСвойств(КартинкаСтрока, Картинка);
		КонецЦикла;
		
		ВходящиеСообщенияСтрока.Размер = ПолучитьРазмерСообщения(ВходящиеСообщенияСтрока);
		ВходящиеСообщенияСтрока.РазмерСтр = РаботаСоСтроками.ПолучитьРазмерСтрокой(ВходящиеСообщенияСтрока.Размер);
		ВходящиеСообщенияСтрока.Вложение = (Сообщение.Вложения.Количество() > 0);
		
	КонецЦикла;
	
	ВходящиеСообщения.Сортировать("ДатаОтправки Убыв");
	
КонецПроцедуры


&НаКлиенте
Процедура УдалитьСообщенияЗавершение(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Идет удаление отмеченных писем. Пожалуйста, подождите...'"));
	
	ИдентификаторыСтрок = Новый Массив();
	СерверныеИдентификаторыСообщений = Новый Массив;
	Для Каждого Строка Из Элементы.ВходящиеСообщения.ВыделенныеСтроки Цикл
		ИдентификаторыСтрок.Добавить(Строка);
		Сообщение = ВходящиеСообщения.НайтиПоИдентификатору(Строка);
		Идентификатор = Сообщение.Идентификатор;
		Если Не ПустаяСтрока(Идентификатор) Тогда
			СерверныеИдентификаторыСообщений.Добавить(Идентификатор);
		КонецЕсли;
		УдалитьВременныеФайлыСообщения(Сообщение);
	КонецЦикла;
	
	УдалитьСообщенияСервер(ИдентификаторыСтрок);
	
	Если Не ЛегкаяПочтаКлиент.УдалитьСообщения(ПараметрыЗагрузкиПочтовыхСообщений, СерверныеИдентификаторыСообщений) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось удалить письма.'"));
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Удаление отмеченных писем завершено.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВременныеФайлыСообщения(Сообщение)
	
	Для Каждого Вложение Из Сообщение.Вложения Цикл
		Если Не ПустаяСтрока(Вложение.ПолноеИмяФайла) Тогда
			Файл = Новый Файл(Вложение.ПолноеИмяФайла);
			Если Файл.Существует() Тогда
				УдалитьФайлы(Вложение.ПолноеИмяФайла);
			КонецЕсли;
			Вложение.ПолноеИмяФайла = "";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСообщенияСервер(ИдентификаторыСтрок)
	
	Для Каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		ВходящиеСообщенияСтрока = ВходящиеСообщения.НайтиПоИдентификатору(ИдентификаторСтроки);
		Для Каждого ВложенияСтрока Из ВходящиеСообщенияСтрока.Вложения Цикл
			Если ТипЗнч(ВложенияСтрока.Адрес) = Тип("Строка") Тогда
				Если ЭтоАдресВременногоХранилища(ВложенияСтрока.Адрес) Тогда
					УдалитьИзВременногоХранилища(ВложенияСтрока.Адрес);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ВходящиеСообщения.Удалить(ВходящиеСообщенияСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьHTML(Отправитель, Тема,  Дата, Текст, ТекстHTML, 
	Знач Картинки, УникальныйИдентификатор)
	
	Если Не ЗначениеЗаполнено(ТекстHTML) Тогда
		ТекстHTML = РаботаС_HTML.ПолучитьHTMLИзТекста(Текст);
	Иначе
		
		РаботаС_HTML.ДобавитьНеобходимыеТэгиHTML(ТекстHTML);
		
		РаботаС_HTML.ВставитьКартинкиВТекстHTML(
			ТекстHTML,
			Картинки,
			УникальныйИдентификатор);
		
	КонецЕсли;	
	
	ТекстШапки = "";
	
	НРегТекстHTML = НРег(ТекстHTML);
	
	// Нахождение места для вставки текста шапки
	ВставитьПеред = 1;
	ПозицияHTML = Найти(НРегТекстHTML, "<html");
	ПозицияBody = 0;
	Если ПозицияHTML > 0 Тогда
		ПозицияBody = РаботаСоСтроками.НайтиПосле(НРегТекстHTML, "<body", ПозицияHTML);
		Если ПозицияBody > 0 Тогда
			ПозицияЗакрывающейсяСкобки = РаботаСоСтроками.НайтиПосле(НРегТекстHTML, ">", ПозицияBody);
			Если ПозицияЗакрывающейсяСкобки > 0 Тогда
				ВставитьПеред = ПозицияЗакрывающейсяСкобки + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Формирование текста шапки письма
	ШапкаHTML =
		"<table><tr><td>
		|<div style='font-size=14px;font-family=Arial;line-height:150%'>
		|<b>[Тема]</b>
		|</div>
		|</td></tr>
		|<tr><td width=100%>
		|<div style='font-size=14px;font-family=Arial;line-height:150%'>
		|[От]
		|</div>
		|<div style='font-size=11px;font-family=Arial;top-margin:10px'>
		|<b>[НадписьДата]:</b> [Дата]<br>
		|</div>
		|</td>
		|</tr></table>
		|<hr>";
		
	Если ПустаяСтрока(Дата) Тогда
		ШапкаHTML = СтрЗаменить(ШапкаHTML, Символы.ПС + "<b>[НадписьДата]:</b> [Дата]<br>", "");
	КонецЕсли;
	
	ШапкаHTML = СтрЗаменить(ШапкаHTML, "[НадписьДата]", НСтр("ru = 'Дата'"));
	ШапкаHTML = СтрЗаменить(ШапкаHTML, "[От]", РаботаС_HTML.ЗаменитьСпецСимволыHTML(Отправитель));
	ШапкаHTML = СтрЗаменить(ШапкаHTML, "[Дата]", РаботаС_HTML.ЗаменитьСпецСимволыHTML(Дата));
	
	ТекстHTMLДляТемы = РаботаС_HTML.ЗаменитьСпецСимволыHTML(Тема);
	ШапкаHTML = СтрЗаменить(ШапкаHTML, "[Тема]", ТекстHTMLДляТемы);
	
	ТекстHTML = Лев(ТекстHTML, ВставитьПеред - 1) + ШапкаHTML + Сред(ТекстHTML, ВставитьПеред);
	
	// Нахождение места для вставки style (только если его нет)
	НРегТекстHTML = НРег(ТекстHTML);
	Если СтрНайти(НРегТекстHTML, "overflow: auto") = 0 И СтрНайти(НРегТекстHTML, "<style") = 0 Тогда
		
		ПозицияТэгаHTML = Найти(НРегТекстHTML, "<html");
		
		Если ПозицияТэгаHTML <> 0 Тогда
			
			ПозицияОкончанияТэгаHTML = РаботаСоСтроками.НайтиПосле(НРегТекстHTML, ">", ПозицияТэгаHTML);
			Голова = Лев(ТекстHTML, ПозицияОкончанияТэгаHTML);
			Середина = Сред(ТекстHTML, ПозицияОкончанияТэгаHTML + 1);
			ТекстHTML = 
				Голова 
				+	"<style type=""text/css""> body { overflow: auto;} </style> "
				+ Середина;
				
		КонецЕсли;	
	
	КонецЕсли;
	
	Возврат ТекстHTML;

КонецФункции	

&НаСервере
Процедура ЗаполнитьКэш()
	КэшЗапретЗагрузкиФайловПоРасширению = ФайловыеФункции.ПолучитьЗапретЗагрузкиФайловПоРасширению();
	КэшСписокЗапрещенныхРасширений = ФайловыеФункции.ПолучитьСписокЗапрещенныхРасширений();
	КэшВидПочтовогоКлиентаПочта = Перечисления.ВидыПочтовыхКлиентов.Почта;
	КэшВидПочтовогоКлиентаMSOutlook = Перечисления.ВидыПочтовыхКлиентов.MSOutlook;
	КэшВидПочтовогоКлиентаИнтернетПочта = Перечисления.ВидыПочтовыхКлиентов.ИнтернетПочта;
	КэшИзвлекатьТекстыФайловНаКлиенте = Не Константы.ИзвлекатьТекстыФайловНаСервере.Получить();
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьНастроекПрофиля()
	
	Если ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль = Неопределено Тогда
		ВидПочтовогоКлиента = Неопределено;
	Иначе
		ВидПочтовогоКлиента = ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль.ВидПочтовогоКлиента;
	КонецЕсли;
	
	Элементы.НастройкаПериодЗагрузки.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВременныеФайлы()
	Если ВходящиеСообщения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Состояние(НСтр("ru = 'Удаление временных файлов...'"));
	Для Каждого Сообщение Из ВходящиеСообщения Цикл
		УдалитьВременныеФайлыСообщения(Сообщение);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьИнформациюОЗагруженныхСообщениях(Сообщения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Соответствие;
	
	Идентификаторы = Новый Массив;
	Для Каждого Сообщение Из Сообщения Цикл
		
		Идентификаторы.Добавить(Сообщение.Идентификатор);
		
		ИндексВложения = 0;
		Для Каждого Вложение Из Сообщение.Вложения Цикл
			ИдентификаторВложения = Сообщение.Идентификатор + "_" + Строка(ИндексВложения);
			ИндексВложения = ИндексВложения + 1;		
			Идентификаторы.Добавить(ИдентификаторВложения);
		КонецЦикла;
		
	КонецЦикла;
	
	Если Идентификаторы.Количество() > 0 Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ВнешниеИсточникиДокументов.Идентификатор КАК Идентификатор
			|ИЗ
			|	РегистрСведений.ВнешниеИсточникиДокументов КАК ВнешниеИсточникиДокументов
			|ГДЕ
			|	ВнешниеИсточникиДокументов.Идентификатор В(&Идентификаторы)
			|	И ВнешниеИсточникиДокументов.Документ.ПометкаУдаления = ЛОЖЬ");
		Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Результат.Вставить(Выборка.Идентификатор, Истина);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ВходящиеСообщенияОчиститьСервер()
	
	ИдентификаторыСтрок = Новый Массив();
	Для Каждого ВходящиеСообщенияСтрока Из ВходящиеСообщения Цикл
		ИдентификаторыСтрок.Добавить(ВходящиеСообщенияСтрока.ПолучитьИдентификатор());
	КонецЦикла;
	УдалитьСообщенияСервер(ИдентификаторыСтрок);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьРазмерСообщения(Сообщение)
	Результат = СтрДлина(Сообщение.Текст);
	Для Каждого Вложение Из Сообщение.Вложения Цикл
		Результат = Результат + Вложение.Размер;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ВидПочтовогоКлиентаПочта()
	
	ПрофильДляЗагрузки = ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль;
	
	Возврат ЗначениеЗаполнено(ПрофильДляЗагрузки)
		И ПрофильДляЗагрузки.ВидПочтовогоКлиента = КэшВидПочтовогоКлиентаПочта;
	
КонецФункции

&НаКлиенте
Функция ВидПочтовогоКлиентаMSOutlook()
	
	ПрофильДляЗагрузки = ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль;
	
	Возврат ЗначениеЗаполнено(ПрофильДляЗагрузки)
		И ПрофильДляЗагрузки.ВидПочтовогоКлиента = КэшВидПочтовогоКлиентаMSOutlook;
	
КонецФункции

&НаКлиенте
Функция ВидПочтовогоКлиентаИнтернетПочта()
	
	ПрофильДляЗагрузки = ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль;
	
	Возврат ЗначениеЗаполнено(ПрофильДляЗагрузки)
		И ПрофильДляЗагрузки.ВидПочтовогоКлиента = КэшВидПочтовогоКлиентаИнтернетПочта;
	
КонецФункции

// Возвращает структуру
// - СтратегияРаспознавания (Перечисление.СтратегииРаспознаванияТекста)
// - ЯзыкРаспознавания (Строка)
// - РаспознатьПослеДобавления (Булево)
//
&НаСервере
Функция ПолучитьПараметрыРаспознавания()
	
	ЯзыкРаспознавания = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"Распознавание", 
		"ЯзыкРаспознавания");
	Если Не ЗначениеЗаполнено(ЯзыкРаспознавания) Тогда
		ЯзыкРаспознавания = РаботаСФайламиВызовСервера.ПолучитьЯзыкРаспознавания();
	КонецЕсли;
	
	РаспознатьПослеДобавления = Не (РаботаСФайламиВызовСервера.ПолучитьИспользоватьРаспознавание() = Ложь);
	
	ПараметрыРаспознавания = Новый Структура;
	ПараметрыРаспознавания.Вставить("СтратегияРаспознавания", Перечисления.СтратегииРаспознаванияТекста.ПоместитьТолькоВТекстовыйОбраз);
	ПараметрыРаспознавания.Вставить("ЯзыкРаспознавания", ЯзыкРаспознавания);
	ПараметрыРаспознавания.Вставить("РаспознатьПослеДобавления", РаспознатьПослеДобавления);
	
	Возврат ПараметрыРаспознавания;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьКоманд()
	
	ВидПочтовогоКлиентаПочта = ВидПочтовогоКлиентаПочта();
	Элементы.КонтекстноеМенюВходящиеСообщенияУдалитьСообщения.Доступность = Не ВидПочтовогоКлиентаПочта;
	Элементы.УдалитьСообщения.Доступность = Не ВидПочтовогоКлиентаПочта;
	
	Если Элементы.ВходящиеСообщения.ТекущиеДанные <> Неопределено Тогда
		
		ЕстьФайлы = (Элементы.ВходящиеСообщения.ТекущиеДанные.Вложения.Количество() <> 0);
		
		Элементы.ГруппаВложения.Видимость = ЕстьФайлы;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПрофильПриИзмененииСервер()
	
	УстановитьВидимостьНастроекПрофиля();
	
КонецПроцедуры

&НаСервере
Процедура НастройкаПриИзмененииНаСервере()
	
	ПараметрыЗагрузкиПочтовыхСообщений.Вставить("НепрочитанныеСообщения", Истина);
	ПараметрыЗагрузкиПочтовыхСообщений.Вставить("ПериодЗагрузки", НастройкаПериодЗагрузки);
	ХранилищеСистемныхНастроек.Сохранить(ИмяФормы, "ПериодЗагрузки", НастройкаПериодЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрофильПродолжениеВыбораИзСписка(ВыбранноеЗначение, Параметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		Профиль = ВыбранноеЗначение.Значение; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Находит контрагентов по email
Функция НайтиКонтрагентаПоEmail(Текст)
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 20
		|	Заявители.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Заявители КАК Заявители
		|ГДЕ
		|	Заявители.ПометкаУдаления = ЛОЖЬ
		|	И Заявители.АдресЭлектроннойПочты ПОДОБНО &Текст";
		
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Результат.Добавить(Выборка.Ссылка);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//&НаСервереБезКонтекста
//Функция НайтиРанееЗагруженныеДокументы(Отправитель)
//	
//	Контрагент = Неопределено;
//		
//	ПредставлениеАдреса = РаботаСоСтроками.РазложитьПредставлениеАдресаЭлектроннойПочты(Отправитель);
//	
//	Если ЗначениеЗаполнено(ПредставлениеАдреса.Адрес) Тогда
//		Контрагенты = НайтиКонтрагентаПоEmail(ПредставлениеАдреса.Адрес);
//		Если Контрагенты.Количество() = 1 Тогда
//			Контрагент = Контрагенты[0];
//		КонецЕсли;	
//	КонецЕсли;	
//	
//	Если Не ЗначениеЗаполнено(Контрагент) Тогда
//		МассивДокументов = Новый Массив;
//		Возврат МассивДокументов;
//	КонецЕсли;		
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст
//		= "ВЫБРАТЬ РАЗРЕШЕННЫЕ
//		  |	ДоговорныеДокументы.Ссылка КАК Ссылка
//		  |ИЗ
//		  |	Справочник.ДоговорныеДокументы КАК ДоговорныеДокументы
//		  |ГДЕ
//		  |	ДоговорныеДокументы.ПометкаУдаления = ЛОЖЬ
//		  |	И ДоговорныеДокументы.Контрагент = &Контрагент";
//		  
//	Запрос.УстановитьПараметр("Контрагент", Контрагент);
//		  
//	МассивДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");	  
//	Возврат МассивДокументов;
//	
//КонецФункции	

&НаСервере
Функция ЕстьФайлСТакимЖеИменем(Имя, Расширение, МассивДанныхФайла, НайденныйФайл)
	
	Для Каждого ДанныеФайла Из МассивДанныхФайла Цикл
		
		Если ДанныеФайла.ПолноеНаименованиеВерсии = Имя И 
			ДанныеФайла.Расширение = Расширение Тогда
			
			НайденныйФайл = ДанныеФайла.Ссылка;
			Возврат Истина;
			
		КонецЕсли;	
		
	КонецЦикла;	
		
	Возврат Ложь;

КонецФункции	

&НаСервере
Процедура ОбновитьФайлыВДокументе(ПрежнийДокумент, Вложения, Идентификатор, ИдентификаторыФайлов)
	
	МассивФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(
		ПрежнийДокумент, Ложь);
		
	МассивДанныхФайла = Новый Массив;	
	РаботаСФайламиВызовСервера.ПолучитьДанныеДляМассиваФайлов(МассивФайлов, МассивДанныхФайла);	
	
	Для Каждого Вложение Из Вложения Цикл
		
		НайденныйФайл = Неопределено;
		Если ЕстьФайлСТакимЖеИменем(Вложение.Имя, Вложение.Расширение, МассивДанныхФайла, НайденныйФайл) Тогда
			// обновим
			
			ОбновитьФайл(НайденныйФайл, Вложение);
			
			ОписаниеФайла = Новый Структура("Идентификатор, Ссылка", 
				Вложение.Идентификатор, НайденныйФайл);
			ИдентификаторыФайлов.Добавить(ОписаниеФайла);
			
		Иначе
			// добавим новый
			
			ТекДата = ТекущаяУниверсальнаяДата();
			ТекПользователь = Пользователи.ТекущийПользователь();
			
			ПараметрыРаспознавания = ПолучитьПараметрыРаспознавания();
			
			СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
			СведенияОФайле.АдресВременногоХранилищаФайла = Вложение.Адрес;
			СведенияОФайле.ИмяБезРасширения = Вложение.Имя;
			СведенияОФайле.РасширениеБезТочки = Вложение.Расширение;
			СведенияОФайле.Размер = Вложение.Размер;
			СведенияОФайле.ВремяИзменения = ТекДата;
			СведенияОФайле.ВремяИзмененияУниверсальное = ТекДата;
			СведенияОФайле.ПараметрыРаспознавания = ПараметрыРаспознавания;
			СведенияОФайле.ХранитьВерсии = Истина;
			СведенияОФайле.ЗаписатьВИсторию = Ложь;
			
			НовыйФайл = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(ПрежнийДокумент, СведенияОФайле);
			
			ОписаниеФайла = Новый Структура("Идентификатор, Ссылка", 
				Вложение.Идентификатор, НовыйФайл);
			ИдентификаторыФайлов.Добавить(ОписаниеФайла);
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьФайл(ФайлСсылка, Вложение)
	
	ТекДата = ТекущаяУниверсальнаяДата();
	ТекПользователь = Пользователи.ТекущийПользователь();
	
	ПараметрыРаспознавания = ПолучитьПараметрыРаспознавания();
	
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
	СведенияОФайле.АдресВременногоХранилищаФайла = Вложение.Адрес;
	СведенияОФайле.ИмяБезРасширения = Вложение.Имя;
	СведенияОФайле.РасширениеБезТочки = Вложение.Расширение;
	СведенияОФайле.Размер = Вложение.Размер;
	СведенияОФайле.ВремяИзменения = ТекДата;
	СведенияОФайле.ВремяИзмененияУниверсальное = ТекДата;
	СведенияОФайле.ПараметрыРаспознавания = ПараметрыРаспознавания;
	СведенияОФайле.ХранитьВерсии = Истина;
	СведенияОФайле.ЗаписатьВИсторию = Ложь;
	
	РаботаСФайламиВызовСервера.ОбновитьФайл(ФайлСсылка, СведенияОФайле, УникальныйИдентификатор);
	
КонецПроцедуры	

&НаСервере
Процедура НастроитьПараметрыЗагрузки()
	
	ПараметрыЗагрузкиПочтовыхСообщений = ЛегкаяПочтаСервер.ПолучитьПараметрыЗагрузкиПочтовыхСообщений();
	ПараметрыЗагрузкиПочтовыхСообщений.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	Если ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль <> Неопределено Тогда
		Профиль = ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль.Профиль;
		Если Параметры.Свойство("ВебКлиент") И Параметры.ВебКлиент = Истина И ТипЗнч(Профиль) = Тип("Строка") Тогда
			Профиль = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ПериодЗагрузкиНастройка = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("РаботаСПочтой", "ПериодЗагрузки");
	Если ТипЗнч(ПериодЗагрузкиНастройка) = Тип("Строка") И Не ПустаяСтрока(ПериодЗагрузкиНастройка) Тогда
		НастройкаПериодЗагрузки = ПериодЗагрузкиНастройка;
	Иначе
		НастройкаПериодЗагрузки = ЛегкаяПочтаКлиентСервер.ПолучитьПериодЗагрузкиПоУмолчанию();
	КонецЕсли;
	Элементы.НастройкаПериодЗагрузки.СписокВыбора.ЗагрузитьЗначения(ЛегкаяПочтаКлиентСервер.ПолучитьВариантыВыбораПериодаЗагрузки());
	
	УстановитьВидимостьНастроекПрофиля();
	
	НастройкаПериодЗагрузки = ХранилищеСистемныхНастроек.Загрузить(ИмяФормы, "ПериодЗагрузки");
	Если ПустаяСтрока(НастройкаПериодЗагрузки) Тогда
		НастройкаПериодЗагрузки = ЛегкаяПочтаКлиентСервер.ПолучитьПериодЗагрузкиПоУмолчанию();
	КонецЕсли;
	
	ПараметрыЗагрузкиПочтовыхСообщений.Вставить("НепрочитанныеСообщения", Истина);
	ПараметрыЗагрузкиПочтовыхСообщений.Вставить("ПериодЗагрузки", НастройкаПериодЗагрузки);
	
КонецПроцедуры 

&НаКлиенте
Процедура НастройкаПочты(Команда)

	Обработчик = Новый ОписаниеОповещения("ПослеВопросаОВыбореИнтернетПочты", 
		ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимНастройкиДляОбычногоПользователя", Истина);
	ПараметрыФормы.Вставить("ЭтоНастройкаДляЗагрузки", Истина);
	
	ВидПочтовогоКлиента = ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль.ВидПочтовогоКлиента;
	ПараметрыФормы.Вставить("ВидПочтовогоКлиента", ВидПочтовогоКлиента);
	
	ПараметрыФормы.Вставить("Профиль", ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль.Профиль);
	ПараметрыФормы.Вставить("Данные", ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль.Данные);
	
	ОткрытьФорму("Справочник.УчетныеЗаписиЭлектроннойПочты.Форма.НастройкаОтправкиСообщений", 
		ПараметрыФормы,,,,,Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОВыбореИнтернетПочты(КодВозврата, ПараметрыВыполнения) Экспорт
	
	Если ЛегкаяПочтаКлиент.СохранитьНастройкиПочты(КодВозврата) Тогда
		
		НастроитьПараметрыЗагрузки();
		ОбновитьСписокСообщений();
		
	КонецЕсли;	
	
КонецПроцедуры	

#КонецОбласти
