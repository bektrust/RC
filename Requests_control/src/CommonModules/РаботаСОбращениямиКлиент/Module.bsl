
// Обновляет данные одного файла в строке списка в карточке документа
//
// Параметры
//    Файлы - ДанныеФормыКоллекция - таблица файлов
//    Файл - СправочникСсылка.Файлы - ссылка на файл
//
Процедура ОбновитьСтрокуФайла(Файлы, Файл) Экспорт 
	
	Для Каждого Строка Из Файлы Цикл
		Если Строка.Ссылка = Файл Тогда 
			СтруктураДанных = РаботаСОбращениями.ПолучитьДанныеФайлаДляСписка(Файл);
			ЗаполнитьЗначенияСвойств(Строка, СтруктураДанных);
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

// Обработчик команды "ПометитьНаУдаление" таблицы Файлы в карточке документа
//
// Параметры
//   Форма                - УправляемаяФорма - форма документа, в котором файлы помечаются на удаление
//   ОбработчикОповещения - ОписаниеОповещения - обработчик, в который необходимо
//     передать массив обрабатываемых файлов.
//
Процедура ПометитьФайлыДокументаНаУдаление(Форма, ОписаниеОповещения) Экспорт
	
	ПометкаУдаления = Ложь; НаименованиеФайла = "";
	МассивФайлов = Новый Массив;
	ИмяСписка = "Файлы";
	
	Для Каждого ВыбраннаяСтрока Из Форма.Элементы[ИмяСписка].ВыделенныеСтроки Цикл
		ДанныеСтроки = Форма.Элементы[ИмяСписка].ДанныеСтроки(ВыбраннаяСтрока);
		МассивФайлов.Добавить(ДанныеСтроки.Ссылка);
		НаименованиеФайла = ДанныеСтроки.Наименование;
		
		Если Не ПометкаУдаления Тогда 
			ПометкаУдаления = ДанныеСтроки.ПометкаУдаления;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоФайлов = МассивФайлов.Количество();
	
	Если КоличествоФайлов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если КоличествоФайлов > 1 Тогда 
		Если Не ПометкаУдаления Тогда 
			ТекстВопроса = НСтр("ru = 'Пометить выделенные файлы на удаление?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Снять с выделенных файлов пометку на удаление?'");
		КонецЕсли;
	Иначе 
		Если Не ПометкаУдаления Тогда 
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Пометить ""%1"" на удаление?'"),
				НаименованиеФайла);
		Иначе
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Снять с ""%1"" пометку на удаление?'"),
				НаименованиеФайла);
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеОповещения.ДополнительныеПараметры.Вставить("МассивФайлов", МассивФайлов);
	ОписаниеОповещения.ДополнительныеПараметры.Вставить("ПометкаУдаления", ПометкаУдаления);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	
КонецПроцедуры


Процедура ДобавитьЗанятыеФайлыСамойКарточки(Форма, МассивЗахваченныхФайлов) Экспорт
	
	Для Каждого ФайлыСтрока Из Форма.Файлы Цикл
		
		Если ФайлыСтрока.РедактируетТекущийПользователь Тогда
			
			ДанныеФайла = Новый Структура("Ссылка, ПолноеИмяФайлаВРабочемКаталоге, РедактируетТекущийПользователь, ДатаМодификацииУниверсальнаяВБазе, Размер");
			ЗаполнитьЗначенияСвойств(ДанныеФайла, ФайлыСтрока);
			
			МассивЗахваченныхФайлов.Добавить(ДанныеФайла);
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры	

// Возвращает массив имен файлов  ("Приказ.doc" - т.е. без полного пути)
Функция ПолучитьЗанятыеВнешнимиПрограммамиФайлы(Ссылка, УникальныйИдентификатор, 
		МассивЗахваченныхФайлов) Экспорт
		
	МассивФайловВозврата = Новый Массив;	
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат МассивФайловВозврата;
	КонецЕсли;	
	
	РасширениеПодключено = ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено();
	Если Не РасширениеПодключено Тогда
		Возврат МассивФайловВозврата;
	КонецЕсли;	
	
	ЗанятыеФайлы = Новый Массив;
	ЗанятыеНеИзмененныеФайлы = Новый Массив;
	
	Для Каждого ФайлыСтрока Из МассивЗахваченныхФайлов Цикл
		
		Если ФайлыСтрока.РедактируетТекущийПользователь Тогда
			
			ФайлИзменен = Ложь;
			
			Если ЗначениеЗаполнено(ФайлыСтрока.ПолноеИмяФайлаВРабочемКаталоге) Тогда
				
				Файл = Новый Файл(ФайлыСтрока.ПолноеИмяФайлаВРабочемКаталоге);
				Если Файл.Существует() Тогда
					
					ИмяРасширение = Файл.Имя;
					Файл = Неопределено;
					
					ПутьКИсходномуФайлу	= ФайлыСтрока.ПолноеИмяФайлаВРабочемКаталоге;
					
					Если РаботаСФайламиКлиент.ФайлОткрытВнешнейПрограммойДляРедактирования(ПутьКИсходномуФайлу) Тогда
						
						МассивФайловВозврата.Добавить(ИмяРасширение);
						
					КонецЕсли;	
						
				КонецЕсли;	
					
				
			КонецЕсли;		
			
		КонецЕсли;	
			
	КонецЦикла;		
	
	Возврат МассивФайловВозврата;

КонецФункции
	
Процедура ПоместитьИзмененияФайлов(Ссылка, УникальныйИдентификатор, 
		МассивЗахваченныхФайлов, НеОсвобождатьЗанятыеWordФайлы = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;	
	
	РасширениеПодключено = ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено();
	Если Не РасширениеПодключено Тогда
		Возврат;
	КонецЕсли;	
		
	ЗанятыеФайлы = Новый Массив;
	ЗанятыеНеИзмененныеФайлы = Новый Массив;
	
	Для Каждого ФайлыСтрока Из МассивЗахваченныхФайлов Цикл
		
		Если ФайлыСтрока.РедактируетТекущийПользователь Тогда
			
			ФайлИзменен = Ложь;
			
			Если ЗначениеЗаполнено(ФайлыСтрока.ПолноеИмяФайлаВРабочемКаталоге) Тогда
				
				Файл = Новый Файл(ФайлыСтрока.ПолноеИмяФайлаВРабочемКаталоге);
				Если Файл.Существует() Тогда
					
					УниверсальноеВремяИзмененияНаДиске = Файл.ПолучитьУниверсальноеВремяИзменения();
					РазмерНаДиске = Файл.Размер();
					Файл = Неопределено;
					
					ПутьКИсходномуФайлу	= ФайлыСтрока.ПолноеИмяФайлаВРабочемКаталоге;
					Если РаботаСФайламиКлиент.ФайлОткрытВнешнейПрограммойДляРедактирования(ПутьКИсходномуФайлу) Тогда
						Продолжить;
					КонецЕсли;	
					
					Если УниверсальноеВремяИзмененияНаДиске > ФайлыСтрока.ДатаМодификацииУниверсальнаяВБазе
						Или РазмерНаДиске <> ФайлыСтрока.Размер Тогда
						
						ФайлИзменен = Истина;
						
						ПараметрыВыполнения = Новый Структура;
						ПараметрыВыполнения.Вставить("ОбработчикРезультата", Неопределено);
						ПараметрыВыполнения.Вставить("ПараметрКоманды", ФайлыСтрока.Ссылка);
						
						Обработчик = Новый ОписаниеОповещения("ПоместитьИзмененияВложенийЗавершение", 
							ЭтотОбъект, ПараметрыВыполнения);
						ПараметрыОбработчика = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(
							Обработчик, ФайлыСтрока.Ссылка, УникальныйИдентификатор);
						ПараметрыОбработчика.Вставить("СоздатьНовуюВерсию", Истина);
						ПараметрыОбработчика.Вставить("ХранитьВерсии", Истина);
						ПараметрыОбработчика.Вставить("ПоказыватьОповещение", Ложь);
						
						ПутьКИсходномуФайлу	= ФайлыСтрока.ПолноеИмяФайлаВРабочемКаталоге;
						
						РаботаСФайламиКлиент.ЗакончитьРедактирование(ПараметрыОбработчика);
							
					КонецЕсли;		
					
				КонецЕсли;	
					
				
			КонецЕсли;		
			
			Если Не ФайлИзменен Тогда
				ЗанятыеНеИзмененныеФайлы.Добавить(ФайлыСтрока.Ссылка);
			КонецЕсли;	
			
		КонецЕсли;	
			
	КонецЦикла;		
	
	Если ЗанятыеНеИзмененныеФайлы.Количество() <> 0 Тогда
		
		РаботаСФайламиКлиент.ОсвободитьФайлыПоСсылкам(
			,
			ЗанятыеНеИзмененныеФайлы);
			
	КонецЕсли;		
	
КонецПроцедуры	

Процедура ПоместитьИзмененияВложенийЗавершение(Результат = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	
	Оповестить("ФайлыПомещены");
	
КонецПроцедуры	


// Открыть файл на диске
Процедура ОткрытьФайлНаДиске(ПолноеИмяФайла, ИмяФайла) Экспорт
	
	Попытка
		РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(ПолноеИмяФайла);
	Исключение
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось открыть файл %1
				|%2'"),
			ИмяФайла,
			ОписаниеОшибки()));
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

// Копирует файл из временного хранилища на клиента и открывает его для просмотра
//
Процедура ОткрытьФайлИзВременногоХранилища(АдресВоВременномХранилище, ИмяФайла) Экспорт
	
	Если Не РасширениеРаботыСФайламиПодключено() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось подключить расширение работы с файлами.'"));
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	Если ДвоичныеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось получить файл. Возможно он был удален.'"));
		Возврат;
	КонецЕсли;
	
	ПолноеИмяВременногоФайла = ПолучитьПолноеИмяВременногоФайла(ИмяФайла);
	Если ПустаяСтрока(ПолноеИмяВременногоФайла) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось создать временный файл.'"));
		Возврат;
	КонецЕсли;
	
	Попытка
		ДвоичныеДанные.Записать(ПолноеИмяВременногоФайла);
	Исключение
		СообщениеОбОшибке = ОписаниеОшибки();
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось записать временный файл.
			|%1'"),
			СообщениеОбОшибке));
		Возврат;
	КонецПопытки;	
	
	ОткрытьФайлНаДиске(ПолноеИмяВременногоФайла, ИмяФайла);
	
КонецПроцедуры

Функция РасширениеРаботыСФайламиПодключено()
	
	Если Не ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не подключено расширение работы с файлами!'"));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;;
	
КонецФункции

Функция ПолучитьПолноеИмяВременногоФайла(ИмяФайла) Экспорт
	
	#Если ВебКлиент Тогда
		Возврат "";
	#Иначе
		Возврат ПолучитьИмяВременногоКаталога() + "\" + ИмяФайла;
	#КонецЕсли
	
КонецФункции


#Если Не ВебКлиент Тогда
Функция ПолучитьИмяВременногоКаталога()
		
	ИмяВременногоКаталога = ПолучитьИмяВременногоФайла("");
	СоздатьКаталог(ИмяВременногоКаталога);
	Возврат ИмяВременногоКаталога;
	
КонецФункции
#КонецЕсли

// Удаляет строки переданной таблицы формы, в которых проверяемый реквизит не заполнен.
//
// Параметры:
//  ТаблицаФормы 			- Таблица формы - в которой осуществляется удаление не заполненных строк.
//  ИмяРеквизитаПроверки    - Строка - имя реквизита, заполненность которого проверяется.
//
Процедура УдалитьПустыеСтрокиТаблицы(ТаблицаФормы, ИмяРеквизитаПроверки) Экспорт
	
	КоличествоСтрок = ТаблицаФормы.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Строка = ТаблицаФормы[КоличествоСтрок - Инд];
		
		Если Не ЗначениеЗаполнено(Строка[ИмяРеквизитаПроверки]) Тогда 
			ТаблицаФормы.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Обновляет отобры списков при вводе кода вопроса вручную
Процедура ОбновитьСписки(Форма) Экспорт 
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.Тематики,
		"Раздел",
		Форма.Раздел,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.Темы,
		"Тематика",
		Форма.Тематика,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.Вопросы,
		"Тема",
		Форма.Тема,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
КонецПроцедуры
