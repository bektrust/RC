////////////////////////////////////////////////////////////////////////////////
// Общего назначения документооборот клиент сервер:
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает текстовое представление единицы измерения в правильном склонении и числе
//
// Параметры
//  Число - Число - любое целое число.
//	ПараметрыПредметаИсчисления - Строка - варианты написания единицы измерения в родительном
//										   падеже для одной, для двух и для пяти единиц, разделитель
//										   - запятая. Пример: "минуту,минуты,минут".
//
// Возвращаемое значение
//  Строка - текстовое представление единицы измерения.
//
Функция ПредметИсчисленияПрописью(Знач Число, Знач ПараметрыПредметаИсчисления) Экспорт

	Результат = "";
	
	МассивПредставлений = Новый Массив;
	
	Позиция = Найти(ПараметрыПредметаИсчисления, ",");
	Пока Позиция > 0 Цикл
		Значение = СокрЛП(Лев(ПараметрыПредметаИсчисления, Позиция-1));
		ПараметрыПредметаИсчисления = Сред(ПараметрыПредметаИсчисления, Позиция + 1);
		МассивПредставлений.Добавить(Значение);
		Позиция = Найти(ПараметрыПредметаИсчисления, ",");
	КонецЦикла;
	
	Если СтрДлина(ПараметрыПредметаИсчисления) > 0 Тогда
		Значение = СокрЛП(ПараметрыПредметаИсчисления);
		МассивПредставлений.Добавить(Значение);
	КонецЕсли;	
	
	Если Число >= 100 Тогда
		Число = Число - Цел(Число / 100)*100;
	КонецЕсли;
	
	Если Число > 20 Тогда
		Число = Число - Цел(Число/10)*10;
	КонецЕсли;
	
	Если Число = 1 Тогда
		Результат = МассивПредставлений[0];
	ИначеЕсли Число > 1 И Число < 5 Тогда
		Результат = МассивПредставлений[1];
	Иначе
		Результат = МассивПредставлений[2];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает случайное число из указанного диапазона
// Параметры:
//  Минимум - Число - начало диапазона
//  Максимум - Число - конец диапазона
//  СчетчикГСЧ - Число - числовая переменная, которая сохраняет свое значение
//   между вызовами функции в случае, если интервал между вызовами небольшой (0-1 мс)
//  ВспомогательныйВызов - Булево - служебный параметр, заполнять не нужно
//  
Функция СлучайноеЧислоБезИспользованияГенератора(
		Минимум, Максимум, СчетчикГСЧ = 0, ВспомогательныйВызов = Ложь) Экспорт
	
	Результат = Минимум;
	
	Если Минимум < Максимум Тогда
		
		Делитель = 1;
		Если Не ВспомогательныйВызов Тогда
			Делители = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("2,3,5,7,11");
			Делитель = Делители[СлучайноеЧислоБезИспользованияГенератора(0, 4, СчетчикГСЧ, Истина)];
		КонецЕсли;
		
		Результат = Цел((ТекущаяУниверсальнаяДатаВМиллисекундах() + СчетчикГСЧ) / Делитель) % Максимум;
		
		Если Результат < Минимум Тогда
			Шаг = (Максимум - Минимум + 1);
			Результат = Результат + Шаг * Цел((Максимум - Результат) / Шаг);
		КонецЕсли;
		
	КонецЕсли;
	
	СчетчикГСЧ = СчетчикГСЧ + 13;
	
	Возврат Результат;
	
КонецФункции

// Показывает/скрывает кнопку очистки, если значение отбора заполнено/не заполнено.
//
// Параметры:
//   Поле     - ПолеФормы - элемент формы, в котором будет включена/выключена кнопка очистки.
//   Значение - ЛюбаяСсылка - значение отбора.
//   ЗначениеПоУмолчанию - ЛюбаяСсылка - значение по умолчанию, на которое не нужно накладывать оформление.
//
Процедура ПоказатьСкрытьКнопкуОчисткиОтбора(Поле, Значение, ЗначениеПоУмолчанию = "") Экспорт
	
	Если ТипЗнч(Поле) <> Тип("ПолеФормы") Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Значение) Тогда 
		Если Не ЗначениеЗаполнено(ЗначениеПоУмолчанию)
			Или (ЗначениеЗаполнено(ЗначениеПоУмолчанию) И Значение <> ЗначениеПоУмолчанию) Тогда 
			Поле.КнопкаОчистки = Истина;
			#Если Клиент Тогда
				Поле.ЦветФона = ОбщегоНазначенияКлиент.ЦветСтиля("ФонУправляющегоПоля");
			#Иначе
				Поле.ЦветФона = ЦветаСтиля["ФонУправляющегоПоля"];
			#КонецЕсли
		Иначе 
			Поле.КнопкаОчистки = Ложь;
			Поле.ЦветФона = Новый Цвет();
		КонецЕсли;
	Иначе 
		Поле.КнопкаОчистки = Ложь;
		Поле.ЦветФона = Новый Цвет();
	КонецЕсли;
	
КонецПроцедуры

// Выделяет из имени файла его имя (набор символов до последней точки).
//
// Параметры:
//  ИмяФайла - Строка - имя файла с именем каталога или без.
//
// Возвращаемое значение:
//   Строка - имя файла.
//
Функция ПолучитьТолькоИмяИмениФайла(Знач ИмяФайла) Экспорт
	
	ТолькоИмя = "";
	
	ПозицияСимвола = СтрДлина(ИмяФайла);
	Пока ПозицияСимвола >= 1 Цикл
		
		Если Сред(ИмяФайла, ПозицияСимвола, 1) = "." Тогда
			
			ТолькоИмя = Лев(ИмяФайла, ПозицияСимвола - 1);
			Прервать;
		КонецЕсли;
		
		ПозицияСимвола = ПозицияСимвола - 1;
	КонецЦикла;

	Возврат ТолькоИмя;
	
КонецФункции

// Определяет, есть ли какие-то отличия в таблицах, выполняя поэлементное сравнение.
// 
// Параметры:
//  Таблица1 - Коллекция.
//  Таблица2 - Коллекция.
//  ПоляДляСравнения - Строка - список полей, разделенных запятыми.
// 
// Возвращаемое значение:
//  Булево - признак того, что коллекции отличаются.
//
Функция ЕстьОтличияВТаблицах(Таблица1, Таблица2, ПоляДляСравнения) Экспорт
	
	КоличествоЗаписей = Таблица1.Количество();
	ЕстьОтличия = КоличествоЗаписей <> Таблица2.Количество();
	
	Если Не ЕстьОтличия Тогда
		
		ПоляДляСравнения = СтрРазделить(ПоляДляСравнения, ",");
		Для Сч = 0 По КоличествоЗаписей - 1 Цикл
			Для Каждого Эл Из ПоляДляСравнения Цикл
				ИмяПоля = СокрЛП(Эл);
				Если Таблица1[Сч][ИмяПоля] <> Таблица2[Сч][ИмяПоля] Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ЕстьОтличия;
 	
КонецФункции

#КонецОбласти