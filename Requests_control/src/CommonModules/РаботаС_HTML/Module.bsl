////////////////////////////////////////////////////////////////////////////////
// Работа с HTML.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает ДокументHTML.
//
// Параметры:
// - ТекстHTML (Строка) - в формате HTML
// - Кодировка (Строка) - необязательный
//
Функция ПолучитьДокументHTMLИзТекстаHTML(Знач ТекстHTML, Знач Кодировка = Неопределено) Экспорт
	
	Если ПустаяСтрока(ТекстHTML) Тогда
		Возврат Новый ДокументHTML;
	КонецЕсли;
	
	ЧтениеHTML = Новый ЧтениеHTML;
	Если ЗначениеЗаполнено(Кодировка) Тогда
		Попытка
			ЧтениеHTML.УстановитьСтроку(ТекстHTML, Кодировка);
		Исключение	
			ЧтениеHTML.УстановитьСтроку(ТекстHTML); // кодировка могла быть некорректная - ставим без кодировки
		КонецПопытки;	
	Иначе
		ЧтениеHTML.УстановитьСтроку(ТекстHTML);
	КонецЕсли;
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументHTML = ПостроительDOM.Прочитать(ЧтениеHTML);
	
	Возврат ДокументHTML;
	
КонецФункции

// Возвращает ДокументHTML.
//
// Параметры:
// - Текст (Строка)
//
Функция ПолучитьДокументHTMLИзПростогоТекста(Знач Текст, Знач Кодировка = Неопределено) Экспорт
	
	ДокументHTML = Новый ДокументHTML;
	ЭлементHead = ДокументHTML.СоздатьЭлемент("head");
	ЭлементMeta = ДокументHTML.СоздатьЭлемент("meta");
	
	Атрибут = ДокументHTML.СоздатьАтрибут("content");
	Атрибут.ТекстовоеСодержимое = ?(ЗначениеЗаполнено(Кодировка), "text/html; charset=" + Кодировка, "text/html");
	ЭлементMeta.Атрибуты.УстановитьИменованныйЭлемент(Атрибут);
	
	Атрибут = ДокументHTML.СоздатьАтрибут("http-equiv");
	Атрибут.ТекстовоеСодержимое = "Content-Type";
	ЭлементMeta.Атрибуты.УстановитьИменованныйЭлемент(Атрибут);
	
	ЭлементHead.ДобавитьДочерний(ЭлементMeta);
	ДокументHTML.ЭлементДокумента.ДобавитьДочерний(ЭлементHead);
	
	ЭлементТело = ДокументHTML.СоздатьЭлемент("body");
	ДокументHTML.Тело = ЭлементТело;
	ЭлементБлок = РаботаС_HTML.ДобавитьЭлементСАтрибутами(
		ЭлементТело,
		"div",
		Новый Структура("style", "font-family:Arial;font-size:12px;"));
	
	Текст = СтрЗаменить(Текст, Символы.ВК + Символы.ПС, Символы.ПС);
	Текст = СтрЗаменить(Текст, Символ(7), Символы.ПС);
	Текст = СтрЗаменить(Текст, Символ(8), Символы.ПС);
	Текст = СтрЗаменить(Текст, Символы.ВТаб, Символы.ПС);
	Текст = СтрЗаменить(Текст, Символ(12), Символы.ПС);
	Текст = СтрЗаменить(Текст, Символы.ВК, Символы.ПС);
	Текст = СтрЗаменить(Текст, Символ(14), Символы.ПС);
	Текст = СтрЗаменить(Текст, Символ(28), " ");
	Текст = СтрЗаменить(Текст, Символ(29), " ");
	Текст = СтрЗаменить(Текст, Символ(30), " ");
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Текст);
	Для К = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
		Строка = ТекстовыйДокумент.ПолучитьСтроку(К);
		Строка = СтрЗаменить(Строка, Символы.ВТаб, "    ");
		Строка = СтрЗаменить(Строка, Символы.Таб, "    ");
		Строка = СтрЗаменить(Строка, "  ", Символы.НПП + " ");
		Строка = СтрЗаменить(Строка, Символы.НПП + " " + Символы.НПП, Символы.НПП + Символы.НПП + Символы.НПП);
		Строка = СтрЗаменить(Строка, Символы.НПП + " " + Символы.НПП, Символы.НПП + Символы.НПП + Символы.НПП);
		Строка = СтрЗаменить(Строка, Символы.НПП + " " + Символы.НПП, Символы.НПП + Символы.НПП + Символы.НПП);
		Строка = СтрЗаменить(Строка, Символы.НПП + " " + Символы.НПП, Символы.НПП + Символы.НПП + Символы.НПП);
		Строка = СтрЗаменить(Строка, Символы.НПП + " " + Символы.НПП, Символы.НПП + Символы.НПП + Символы.НПП);
		Строка = СтрЗаменить(Строка, Символы.НПП + " " + Символы.НПП, Символы.НПП + Символы.НПП + Символы.НПП);
		Абзац = РаботаС_HTML.СоздатьЭлементСАтрибутами(
			ДокументHTML,
			"p",
			Новый Структура("style", "margin-top:2px;margin-bottom:2px;"));
		Абзац.ДобавитьДочерний(ДокументHTML.СоздатьТекстовыйУзел(Строка));
		ЭлементБлок.ДобавитьДочерний(Абзац);
	КонецЦикла;
	
	Возврат ДокументHTML;
	
КонецФункции

// Возвращает текст HTML.
//
Функция ПолучитьHTMLИзТекста(Знач Текст, Знач Кодировка = Неопределено) Экспорт
	
	ЗаменитьУправляющиеСимволы(Текст);
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Текст);
	
	ТекстДляВставки = "";
	
	Для К = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
		
		Строка = ТекстовыйДокумент.ПолучитьСтроку(К);
		Если ПустаяСтрока(Строка) Тогда
			ТекстДляВставки = ТекстДляВставки + ?(К = 1, "", Символы.ПС) + "<br>";
			Продолжить;
		КонецЕсли;
		
		ЗаменитьТабуляцииИПробелы(Строка);
		ЗаменитьСпецСимволыHTML(Строка);
		ТекстДляВставки = ТекстДляВставки + ?(К = 1, "", Символы.ПС) + Строка + "<br>";
		
	КонецЦикла;
	
	ТекстHTML =
		"<html>
		|<head>
		|<meta content=""text/html; charset=[charset]"" http-equiv=""Content-Type"">
		|</head>
		|<style type=""text/css"">
		|	body { overflow: auto;}
		|</style>
		|<body>
		|<div style=""font-family:Arial;font-size:12px;"">
		|[ТекстДляВставки]
		|</div>
		|</body>
		|</html>";
	
	Если ЗначениеЗаполнено(Кодировка) Тогда
		ТекстHTML = СтрЗаменить(ТекстHTML, "[charset]", Кодировка);
	Иначе
		ТекстHTML = СтрЗаменить(ТекстHTML, "; charset=[charset]", "");
	КонецЕсли;
	
	ТекстHTML = СтрЗаменить(ТекстHTML, "[ТекстДляВставки]", ТекстДляВставки);
	
	Возврат ТекстHTML;
	
КонецФункции

// Заменяет спец. символы на соответствующие им ссылки.
// Модифицирует параметр. Возвращает строку.
//
Функция ЗаменитьСпецСимволыHTML(Строка) Экспорт
	
	ЗаменитьСпецСимволHTML(Строка, 38, "amp");
	
	ЗаменитьСпецСимволHTML(Строка, 193, "Aacute");
	ЗаменитьСпецСимволHTML(Строка, 225, "aacute");
	ЗаменитьСпецСимволHTML(Строка, 226, "acirc");
	ЗаменитьСпецСимволHTML(Строка, 194, "Acirc");
	ЗаменитьСпецСимволHTML(Строка, 180, "acute");
	ЗаменитьСпецСимволHTML(Строка, 230, "aelig");
	ЗаменитьСпецСимволHTML(Строка, 198, "AElig");
	ЗаменитьСпецСимволHTML(Строка, 192, "Agrave");
	ЗаменитьСпецСимволHTML(Строка, 224, "agrave");
	ЗаменитьСпецСимволHTML(Строка, 8501, "alefsym");
	ЗаменитьСпецСимволHTML(Строка, 913, "Alpha");
	ЗаменитьСпецСимволHTML(Строка, 945, "alpha");
	ЗаменитьСпецСимволHTML(Строка, 8743, "and");
	ЗаменитьСпецСимволHTML(Строка, 8736, "ang");
	ЗаменитьСпецСимволHTML(Строка, 229, "aring");
	ЗаменитьСпецСимволHTML(Строка, 197, "Aring");
	ЗаменитьСпецСимволHTML(Строка, 8776, "asymp");
	ЗаменитьСпецСимволHTML(Строка, 195, "Atilde");
	ЗаменитьСпецСимволHTML(Строка, 227, "atilde");
	ЗаменитьСпецСимволHTML(Строка, 196, "Auml");
	ЗаменитьСпецСимволHTML(Строка, 228, "auml");
	ЗаменитьСпецСимволHTML(Строка, 8222, "bdquo");
	ЗаменитьСпецСимволHTML(Строка, 914, "Beta");
	ЗаменитьСпецСимволHTML(Строка, 946, "beta");
	ЗаменитьСпецСимволHTML(Строка, 166, "brvbar");
	ЗаменитьСпецСимволHTML(Строка, 8226, "bull");
	ЗаменитьСпецСимволHTML(Строка, 8745, "cap");
	ЗаменитьСпецСимволHTML(Строка, 199, "Ccedil");
	ЗаменитьСпецСимволHTML(Строка, 231, "ccedil");
	ЗаменитьСпецСимволHTML(Строка, 184, "cedil");
	ЗаменитьСпецСимволHTML(Строка, 162, "cent");
	ЗаменитьСпецСимволHTML(Строка, 967, "chi");
	ЗаменитьСпецСимволHTML(Строка, 935, "Chi");
	ЗаменитьСпецСимволHTML(Строка, 710, "circ");
	ЗаменитьСпецСимволHTML(Строка, 9827, "clubs");
	ЗаменитьСпецСимволHTML(Строка, 8773, "cong");
	ЗаменитьСпецСимволHTML(Строка, 169, "copy");
	ЗаменитьСпецСимволHTML(Строка, 8629, "crarr");
	ЗаменитьСпецСимволHTML(Строка, 8746, "cup");
	ЗаменитьСпецСимволHTML(Строка, 164, "curren");
	ЗаменитьСпецСимволHTML(Строка, 8224, "dagger");
	ЗаменитьСпецСимволHTML(Строка, 8225, "Dagger");
	ЗаменитьСпецСимволHTML(Строка, 8659, "dArr");
	ЗаменитьСпецСимволHTML(Строка, 8595, "darr");
	ЗаменитьСпецСимволHTML(Строка, 176, "deg");
	ЗаменитьСпецСимволHTML(Строка, 916, "Delta");
	ЗаменитьСпецСимволHTML(Строка, 948, "delta");
	ЗаменитьСпецСимволHTML(Строка, 9830, "diams");
	ЗаменитьСпецСимволHTML(Строка, 247, "divide");
	ЗаменитьСпецСимволHTML(Строка, 233, "eacute");
	ЗаменитьСпецСимволHTML(Строка, 201, "Eacute");
	ЗаменитьСпецСимволHTML(Строка, 202, "Ecirc");
	ЗаменитьСпецСимволHTML(Строка, 234, "ecirc");
	ЗаменитьСпецСимволHTML(Строка, 232, "egrave");
	ЗаменитьСпецСимволHTML(Строка, 200, "Egrave");
	ЗаменитьСпецСимволHTML(Строка, 8709, "empty");
	ЗаменитьСпецСимволHTML(Строка, 8195, "emsp");
	ЗаменитьСпецСимволHTML(Строка, 8194, "ensp");
	ЗаменитьСпецСимволHTML(Строка, 949, "epsilon");
	ЗаменитьСпецСимволHTML(Строка, 917, "Epsilon");
	ЗаменитьСпецСимволHTML(Строка, 8801, "equiv");
	ЗаменитьСпецСимволHTML(Строка, 919, "Eta");
	ЗаменитьСпецСимволHTML(Строка, 951, "eta");
	ЗаменитьСпецСимволHTML(Строка, 240, "eth");
	ЗаменитьСпецСимволHTML(Строка, 208, "ETH");
	ЗаменитьСпецСимволHTML(Строка, 235, "euml");
	ЗаменитьСпецСимволHTML(Строка, 203, "Euml");
	ЗаменитьСпецСимволHTML(Строка, 8364, "euro");
	ЗаменитьСпецСимволHTML(Строка, 8707, "exist");
	ЗаменитьСпецСимволHTML(Строка, 402, "fnof");
	ЗаменитьСпецСимволHTML(Строка, 8704, "forall");
	ЗаменитьСпецСимволHTML(Строка, 189, "frac12");
	ЗаменитьСпецСимволHTML(Строка, 188, "frac14");
	ЗаменитьСпецСимволHTML(Строка, 190, "frac34");
	ЗаменитьСпецСимволHTML(Строка, 8260, "frasl");
	ЗаменитьСпецСимволHTML(Строка, 915, "Gamma");
	ЗаменитьСпецСимволHTML(Строка, 947, "gamma");
	ЗаменитьСпецСимволHTML(Строка, 8805, "ge");
	ЗаменитьСпецСимволHTML(Строка, 62, "gt");
	ЗаменитьСпецСимволHTML(Строка, 8660, "hArr");
	ЗаменитьСпецСимволHTML(Строка, 8596, "harr");
	ЗаменитьСпецСимволHTML(Строка, 9829, "hearts");
	ЗаменитьСпецСимволHTML(Строка, 8230, "hellip");
	ЗаменитьСпецСимволHTML(Строка, 237, "iacute");
	ЗаменитьСпецСимволHTML(Строка, 205, "Iacute");
	ЗаменитьСпецСимволHTML(Строка, 238, "icirc");
	ЗаменитьСпецСимволHTML(Строка, 206, "Icirc");
	ЗаменитьСпецСимволHTML(Строка, 161, "iexcl");
	ЗаменитьСпецСимволHTML(Строка, 204, "Igrave");
	ЗаменитьСпецСимволHTML(Строка, 236, "igrave");
	ЗаменитьСпецСимволHTML(Строка, 8465, "image");
	ЗаменитьСпецСимволHTML(Строка, 8734, "infin");
	ЗаменитьСпецСимволHTML(Строка, 8747, "int");
	ЗаменитьСпецСимволHTML(Строка, 921, "Iota");
	ЗаменитьСпецСимволHTML(Строка, 953, "iota");
	ЗаменитьСпецСимволHTML(Строка, 191, "iquest");
	ЗаменитьСпецСимволHTML(Строка, 8712, "isin");
	ЗаменитьСпецСимволHTML(Строка, 207, "Iuml");
	ЗаменитьСпецСимволHTML(Строка, 239, "iuml");
	ЗаменитьСпецСимволHTML(Строка, 922, "Kappa");
	ЗаменитьСпецСимволHTML(Строка, 954, "kappa");
	ЗаменитьСпецСимволHTML(Строка, 955, "lambda");
	ЗаменитьСпецСимволHTML(Строка, 923, "Lambda");
	ЗаменитьСпецСимволHTML(Строка, 9001, "lang");
	ЗаменитьСпецСимволHTML(Строка, 171, "laquo");
	ЗаменитьСпецСимволHTML(Строка, 8592, "larr");
	ЗаменитьСпецСимволHTML(Строка, 8656, "lArr");
	ЗаменитьСпецСимволHTML(Строка, 8968, "lceil");
	ЗаменитьСпецСимволHTML(Строка, 8220, "ldquo");
	ЗаменитьСпецСимволHTML(Строка, 8804, "le");
	ЗаменитьСпецСимволHTML(Строка, 8970, "lfloor");
	ЗаменитьСпецСимволHTML(Строка, 8727, "lowast");
	ЗаменитьСпецСимволHTML(Строка, 9674, "loz");
	ЗаменитьСпецСимволHTML(Строка, 8206, "lrm");
	ЗаменитьСпецСимволHTML(Строка, 8249, "lsaquo");
	ЗаменитьСпецСимволHTML(Строка, 8216, "lsquo");
	ЗаменитьСпецСимволHTML(Строка, 60, "lt");
	ЗаменитьСпецСимволHTML(Строка, 175, "macr");
	ЗаменитьСпецСимволHTML(Строка, 8212, "mdash");
	ЗаменитьСпецСимволHTML(Строка, 181, "micro");
	ЗаменитьСпецСимволHTML(Строка, 183, "middot");
	ЗаменитьСпецСимволHTML(Строка, 8722, "minus");
	ЗаменитьСпецСимволHTML(Строка, 924, "Mu");
	ЗаменитьСпецСимволHTML(Строка, 956, "mu");
	ЗаменитьСпецСимволHTML(Строка, 8711, "nabla");
	ЗаменитьСпецСимволHTML(Строка, 160, "nbsp");
	ЗаменитьСпецСимволHTML(Строка, 8211, "ndash");
	ЗаменитьСпецСимволHTML(Строка, 8800, "ne");
	ЗаменитьСпецСимволHTML(Строка, 8715, "ni");
	ЗаменитьСпецСимволHTML(Строка, 172, "not");
	ЗаменитьСпецСимволHTML(Строка, 8713, "notin");
	ЗаменитьСпецСимволHTML(Строка, 8836, "nsub");
	ЗаменитьСпецСимволHTML(Строка, 241, "ntilde");
	ЗаменитьСпецСимволHTML(Строка, 209, "Ntilde");
	ЗаменитьСпецСимволHTML(Строка, 925, "Nu");
	ЗаменитьСпецСимволHTML(Строка, 957, "nu");
	ЗаменитьСпецСимволHTML(Строка, 243, "oacute");
	ЗаменитьСпецСимволHTML(Строка, 211, "Oacute");
	ЗаменитьСпецСимволHTML(Строка, 212, "Ocirc");
	ЗаменитьСпецСимволHTML(Строка, 244, "ocirc");
	ЗаменитьСпецСимволHTML(Строка, 338, "OElig");
	ЗаменитьСпецСимволHTML(Строка, 339, "oelig");
	ЗаменитьСпецСимволHTML(Строка, 242, "ograve");
	ЗаменитьСпецСимволHTML(Строка, 210, "Ograve");
	ЗаменитьСпецСимволHTML(Строка, 8254, "oline");
	ЗаменитьСпецСимволHTML(Строка, 969, "omega");
	ЗаменитьСпецСимволHTML(Строка, 937, "Omega");
	ЗаменитьСпецСимволHTML(Строка, 927, "Omicron");
	ЗаменитьСпецСимволHTML(Строка, 959, "omicron");
	ЗаменитьСпецСимволHTML(Строка, 8853, "oplus");
	ЗаменитьСпецСимволHTML(Строка, 8744, "or");
	ЗаменитьСпецСимволHTML(Строка, 170, "ordf");
	ЗаменитьСпецСимволHTML(Строка, 186, "ordm");
	ЗаменитьСпецСимволHTML(Строка, 216, "Oslash");
	ЗаменитьСпецСимволHTML(Строка, 248, "oslash");
	ЗаменитьСпецСимволHTML(Строка, 213, "Otilde");
	ЗаменитьСпецСимволHTML(Строка, 245, "otilde");
	ЗаменитьСпецСимволHTML(Строка, 8855, "otimes");
	ЗаменитьСпецСимволHTML(Строка, 214, "Ouml");
	ЗаменитьСпецСимволHTML(Строка, 246, "ouml");
	ЗаменитьСпецСимволHTML(Строка, 182, "para");
	ЗаменитьСпецСимволHTML(Строка, 8706, "part");
	ЗаменитьСпецСимволHTML(Строка, 8240, "permil");
	ЗаменитьСпецСимволHTML(Строка, 8869, "perp");
	ЗаменитьСпецСимволHTML(Строка, 966, "phi");
	ЗаменитьСпецСимволHTML(Строка, 934, "Phi");
	ЗаменитьСпецСимволHTML(Строка, 928, "Pi");
	ЗаменитьСпецСимволHTML(Строка, 960, "pi");
	ЗаменитьСпецСимволHTML(Строка, 982, "piv");
	ЗаменитьСпецСимволHTML(Строка, 177, "plusmn");
	ЗаменитьСпецСимволHTML(Строка, 163, "pound");
	ЗаменитьСпецСимволHTML(Строка, 8243, "Prime");
	ЗаменитьСпецСимволHTML(Строка, 8242, "prime");
	ЗаменитьСпецСимволHTML(Строка, 8719, "prod");
	ЗаменитьСпецСимволHTML(Строка, 8733, "prop");
	ЗаменитьСпецСимволHTML(Строка, 968, "psi");
	ЗаменитьСпецСимволHTML(Строка, 936, "Psi");
	ЗаменитьСпецСимволHTML(Строка, 34, "quot");
	ЗаменитьСпецСимволHTML(Строка, 8730, "radic");
	ЗаменитьСпецСимволHTML(Строка, 9002, "rang");
	ЗаменитьСпецСимволHTML(Строка, 187, "raquo");
	ЗаменитьСпецСимволHTML(Строка, 8658, "rArr");
	ЗаменитьСпецСимволHTML(Строка, 8594, "rarr");
	ЗаменитьСпецСимволHTML(Строка, 8969, "rceil");
	ЗаменитьСпецСимволHTML(Строка, 8221, "rdquo");
	ЗаменитьСпецСимволHTML(Строка, 8476, "real");
	ЗаменитьСпецСимволHTML(Строка, 174, "reg");
	ЗаменитьСпецСимволHTML(Строка, 8971, "rfloor");
	ЗаменитьСпецСимволHTML(Строка, 929, "Rho");
	ЗаменитьСпецСимволHTML(Строка, 961, "rho");
	ЗаменитьСпецСимволHTML(Строка, 8207, "rlm");
	ЗаменитьСпецСимволHTML(Строка, 8250, "rsaquo");
	ЗаменитьСпецСимволHTML(Строка, 8217, "rsquo");
	ЗаменитьСпецСимволHTML(Строка, 8218, "sbquo");
	ЗаменитьСпецСимволHTML(Строка, 352, "Scaron");
	ЗаменитьСпецСимволHTML(Строка, 353, "scaron");
	ЗаменитьСпецСимволHTML(Строка, 8901, "sdot");
	ЗаменитьСпецСимволHTML(Строка, 167, "sect");
	ЗаменитьСпецСимволHTML(Строка, 173, "shy");
	ЗаменитьСпецСимволHTML(Строка, 931, "Sigma");
	ЗаменитьСпецСимволHTML(Строка, 963, "sigma");
	ЗаменитьСпецСимволHTML(Строка, 962, "sigmaf");
	ЗаменитьСпецСимволHTML(Строка, 8764, "sim");
	ЗаменитьСпецСимволHTML(Строка, 9824, "spades");
	ЗаменитьСпецСимволHTML(Строка, 8834, "sub");
	ЗаменитьСпецСимволHTML(Строка, 8838, "sube");
	ЗаменитьСпецСимволHTML(Строка, 8721, "sum");
	ЗаменитьСпецСимволHTML(Строка, 8835, "sup");
	ЗаменитьСпецСимволHTML(Строка, 185, "sup1");
	ЗаменитьСпецСимволHTML(Строка, 178, "sup2");
	ЗаменитьСпецСимволHTML(Строка, 179, "sup3");
	ЗаменитьСпецСимволHTML(Строка, 8839, "supe");
	ЗаменитьСпецСимволHTML(Строка, 223, "szlig");
	ЗаменитьСпецСимволHTML(Строка, 932, "Tau");
	ЗаменитьСпецСимволHTML(Строка, 964, "tau");
	ЗаменитьСпецСимволHTML(Строка, 8756, "there4");
	ЗаменитьСпецСимволHTML(Строка, 920, "Theta");
	ЗаменитьСпецСимволHTML(Строка, 952, "theta");
	ЗаменитьСпецСимволHTML(Строка, 977, "thetasym");
	ЗаменитьСпецСимволHTML(Строка, 8201, "thinsp");
	ЗаменитьСпецСимволHTML(Строка, 222, "THORN");
	ЗаменитьСпецСимволHTML(Строка, 254, "thorn");
	ЗаменитьСпецСимволHTML(Строка, 732, "tilde");
	ЗаменитьСпецСимволHTML(Строка, 215, "times");
	ЗаменитьСпецСимволHTML(Строка, 8482, "trade");
	ЗаменитьСпецСимволHTML(Строка, 250, "uacute");
	ЗаменитьСпецСимволHTML(Строка, 218, "Uacute");
	ЗаменитьСпецСимволHTML(Строка, 8657, "uArr");
	ЗаменитьСпецСимволHTML(Строка, 8593, "uarr");
	ЗаменитьСпецСимволHTML(Строка, 251, "ucirc");
	ЗаменитьСпецСимволHTML(Строка, 219, "Ucirc");
	ЗаменитьСпецСимволHTML(Строка, 217, "Ugrave");
	ЗаменитьСпецСимволHTML(Строка, 249, "ugrave");
	ЗаменитьСпецСимволHTML(Строка, 168, "uml");
	ЗаменитьСпецСимволHTML(Строка, 978, "upsih");
	ЗаменитьСпецСимволHTML(Строка, 965, "upsilon");
	ЗаменитьСпецСимволHTML(Строка, 933, "Upsilon");
	ЗаменитьСпецСимволHTML(Строка, 252, "uuml");
	ЗаменитьСпецСимволHTML(Строка, 220, "Uuml");
	ЗаменитьСпецСимволHTML(Строка, 8472, "weierp");
	ЗаменитьСпецСимволHTML(Строка, 958, "xi");
	ЗаменитьСпецСимволHTML(Строка, 926, "Xi");
	ЗаменитьСпецСимволHTML(Строка, 253, "yacute");
	ЗаменитьСпецСимволHTML(Строка, 221, "Yacute");
	ЗаменитьСпецСимволHTML(Строка, 165, "yen");
	ЗаменитьСпецСимволHTML(Строка, 255, "yuml");
	ЗаменитьСпецСимволHTML(Строка, 376, "Yuml");
	ЗаменитьСпецСимволHTML(Строка, 918, "Zeta");
	ЗаменитьСпецСимволHTML(Строка, 950, "zeta");
	ЗаменитьСпецСимволHTML(Строка, 8205, "zwj");
	ЗаменитьСпецСимволHTML(Строка, 8204, "zwnj");
	
	Возврат Строка;
	
КонецФункции

// Добавляет текстовый узел к ДокументуHTML.
//
Процедура ДобавитьТекстовыйУзел(
	ЭлементРодитель,
	Текст,
	ВыделятьЖирным = Ложь,
	ДобавлятьПереносСтроки = Ложь) Экспорт
	
	ДокументВладелец = ЭлементРодитель.ДокументВладелец;
	ТекстовыйУзел = ДокументВладелец.СоздатьТекстовыйУзел(Текст);
	
	Если ВыделятьЖирным Тогда
		ЭлементЖирный = ДокументВладелец.СоздатьЭлемент("b");
		ЭлементЖирный.ДобавитьДочерний(ТекстовыйУзел);
		ЭлементРодитель.ДобавитьДочерний(ЭлементЖирный);
	Иначе
		ЭлементРодитель.ДобавитьДочерний(ТекстовыйУзел);
	КонецЕсли;
	
	Если ДобавлятьПереносСтроки Тогда
		ЭлементРодитель.ДобавитьДочерний(ДокументВладелец.СоздатьЭлемент("br"));
	КонецЕсли;
	
КонецПроцедуры 

// Получает текстовое содержимое из ДокументаHTML.
//
Функция ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML) Экспорт
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьHTML = Новый ЗаписьHTML;
	ЗаписьHTML.УстановитьСтроку();
	ЗаписьDOM.Записать(ДокументHTML, ЗаписьHTML);
	Возврат ЗаписьHTML.Закрыть();
	
КонецФункции

// Добавляет элемент в ДокументHTML.
//
Функция СоздатьЭлементСАтрибутами(ДокументHTML, Имя, Атрибуты) Экспорт
	
	ЭлементHTML = ДокументHTML.СоздатьЭлемент(Имя);
	Для каждого Атрибут Из Атрибуты Цикл
		УстановитьАтрибутЭлементаHTML(ЭлементHTML, Атрибут.Ключ, Атрибут.Значение);
	КонецЦикла;
	
	Возврат ЭлементHTML;
	
КонецФункции

// Добавляет элемент в ДокументHTML.
//
Функция ДобавитьЭлементСАтрибутами(ЭлементРодитель, Имя, Атрибуты) Экспорт
	
	ЭлементHTML = СоздатьЭлементСАтрибутами(ЭлементРодитель.ДокументВладелец, Имя, Атрибуты);
	ЭлементРодитель.ДобавитьДочерний(ЭлементHTML);
	
	Возврат ЭлементHTML;
	
КонецФункции

// Устанавливает атрибуты элементу ДокументаHTML.
//
Процедура УстановитьАтрибутЭлементаHTML(ЭлементHTML, Имя, ТекстовоеСодержимое) Экспорт
	
	АтрибутHTML = ЭлементHTML.ДокументВладелец.СоздатьАтрибут(Имя);
	АтрибутHTML.ТекстовоеСодержимое = ТекстовоеСодержимое;
	ЭлементHTML.Атрибуты.УстановитьИменованныйЭлемент(АтрибутHTML);
	
КонецПроцедуры

// Вставляет ЭлементHTML на первое место в массив дочерних элементов ДокументаHTML.
//
Процедура ВставитьЭлементHTMLПервымДочернимЭлементом(
	ЭлементРодитель,
	ВставляемыйЭлемент) Экспорт
	
	Если ЭлементРодитель.ДочерниеУзлы.Количество() > 0 Тогда
		ЭлементРодитель.ВставитьПеред(ВставляемыйЭлемент, ЭлементРодитель.ДочерниеУзлы[0]);
	Иначе
		ЭлементРодитель.ДобавитьДочерний(ВставляемыйЭлемент);
	КонецЕсли;
	
КонецПроцедуры

// Получает текстовое содержимое ДокументаHTML.
//
Функция ПолучитьПростойТекстИзHTML(Знач ТекстHTML, Знач Кодировка = Неопределено) Экспорт
	
	ТекстHTML = СтрЗаменить(ТекстHTML, "</o:p>", "</o:p>" + Символы.ПС);
	ТекстHTML = СтрЗаменить(ТекстHTML, "</o:p>" + Символы.ПС + Символы.ПС, "</o:p>" + Символы.ПС);
	ТекстHTML = СтрЗаменить(ТекстHTML, "</p>", "</p>" + Символы.ПС);
	ТекстHTML = СтрЗаменить(ТекстHTML, "</p>" + Символы.ПС + Символы.ПС, "</p>" + Символы.ПС);
	ТекстHTML = СтрЗаменить(ТекстHTML, "</div>", "</div>" + Символы.ПС);
	ТекстHTML = СтрЗаменить(ТекстHTML, "</div>" + Символы.ПС + Символы.ПС, "</div>" + Символы.ПС);
	ТекстHTML = СтрЗаменить(ТекстHTML, "<br>", Символы.ПС + Символы.ПС);
	
	Построитель = Новый ПостроительDOM;
	ЧтениеHTML = Новый ЧтениеHTML;
	Если ЗначениеЗаполнено(Кодировка) Тогда
		Попытка
			ЧтениеHTML.УстановитьСтроку(ТекстHTML, Кодировка);
		Исключение	
			ЧтениеHTML.УстановитьСтроку(ТекстHTML); // кодировка могла быть некорректная - ставим без кодировки
		КонецПопытки;	
	Иначе
		ЧтениеHTML.УстановитьСтроку(ТекстHTML);
	КонецЕсли;
	
	ДокументHTML = Построитель.Прочитать(ЧтениеHTML);
	
	Если ДокументHTML.Тело = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ДокументHTML.Тело.ТекстовоеСодержимое;
	
КонецФункции

// Добавляет теги ко всем ссылкам, находящимся в строке.
// Обрабатываются следующие схемы обращения к ресурсу:
// http://, https://, ftp://, mailto:, file://, file:, e1c://, e1cib/
// Кроме того обрабатываются с использованием схемы http:// ссылки начинающиеся с www. без схемы.
// Строки размером 250000 больше  не обрабатываются.
Процедура ДобавитьТегиКСсылкам(ТекстHTML, ПараметрыВыделенияСсылок = Неопределено) Экспорт
	
	Если СтрДлина(ТекстHTML) > 250000 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыВыделенияСсылок = Неопределено Тогда
		ПараметрыВыделенияСсылок = ПараметрыВыделенияСсылок();
	КонецЕсли;
	
	// Ссылки со схемой
	ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, ПараметрыВыделенияСсылок, "http://");
	ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, ПараметрыВыделенияСсылок, "https://");
	ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, ПараметрыВыделенияСсылок, "ftp://");
	
	// Ссылки без схемы
	ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, ПараметрыВыделенияСсылок, "www.", "http://www.");
	
	// Навигационные ссылки
	ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, ПараметрыВыделенияСсылок, "e1c://");
	Если ЗначениеЗаполнено(ПараметрыВыделенияСсылок.НавигационнаяСсылкаИнформационнойБазы) Тогда
		НоваяСхемаE1cib = ПараметрыВыделенияСсылок.НавигационнаяСсылкаИнформационнойБазы + "#e1cib/";
	Иначе
		НоваяСхемаE1cib = "v8doc:e1cib/";
	КонецЕсли;
	ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, ПараметрыВыделенияСсылок, "e1cib/", НоваяСхемаE1cib);
	
	ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, ПараметрыВыделенияСсылок, "file://");
	ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, ПараметрыВыделенияСсылок, "\\", "file://\\");
	СписокТомовДисков = РаботаС_HTMLПовтИсп.СписокТомовДисков();
	Для Каждого ЭлементТомДиска Из СписокТомовДисков Цикл
		ТомДиска = ЭлементТомДиска.Значение;
		ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, ПараметрыВыделенияСсылок, ТомДиска + ":\", "file://" + ТомДиска + ":\");
		ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, ПараметрыВыделенияСсылок, ТомДиска + ":/", "file://" + ТомДиска + ":\");
	КонецЦикла;
	
	ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, ПараметрыВыделенияСсылок, "mailto:");
	
	Если ПараметрыВыделенияСсылок.ЗаполнятьСвойствоTitle Тогда
		ЗаполнитьСвойствоTitleУСсылок(ТекстHTML);
	КонецЕсли;
	
КонецПроцедуры

// В случае отсутствия у текста HTML тэгов <html></html>,  <body></body> добавляет их.
// Модифицирует параметр ТекстHTML
//
Процедура ДобавитьНеобходимыеТэгиHTML(ТекстHTML) Экспорт
	
	НРегТекстHTML = НРег(ТекстHTML);
	ПозицияТэгаHTML = Найти(НРегТекстHTML, "<html");
	ПозицияТэгаBODY = Найти(НРегТекстHTML, "<body");
	Если ПозицияТэгаHTML = 0 И ПозицияТэгаBODY = 0 Тогда
		ТекстHTML = "<html><body style=""margin-top:1px; padding-top:1px"">" + ТекстHTML + "</body></html>";
	ИначеЕсли ПозицияТэгаHTML = 0 И ПозицияТэгаBODY > 0 Тогда
		ТекстHTML = "<html>" + ТекстHTML + "</html>";
	ИначеЕсли ПозицияТэгаHTML > 0 И ПозицияТэгаBODY = 0 Тогда
		ПозицияОкончанияТэгаHTML = РаботаСоСтроками.НайтиПосле(НРегТекстHTML, ">", ПозицияТэгаHTML);
		Голова = Лев(ТекстHTML, ПозицияОкончанияТэгаHTML);
		ПозицияЗакрывающегосяТэгаHTML = Найти(НРегТекстHTML, "</html>");
		Хвост = Сред(ТекстHTML, ПозицияЗакрывающегосяТэгаHTML);
		Середина = Сред(ТекстHTML, ПозицияОкончанияТэгаHTML + 1, ПозицияЗакрывающегосяТэгаHTML - ПозицияОкончанияТэгаHTML - 1);
		ТекстHTML = Голова + "<body style=""margin-top:1px; padding-top:1px"">" + Середина + "</body>" + Хвост;
	КонецЕсли;
	
КонецПроцедуры

// При работе с веб сервером вставляет картинки письма в тело HTML,
// иначе помещает их во временное хранилище и заменяет ссылки на временное хранилище.
//
// Параметры
//  ТекстHTML - html текст - тела письма - входной и выходной параметр (туда же и пишутся изменения)
//  Письмо - ссылка на письмо (вх или исх)
//  УникальныйИдентификаторФормы - идентификатор формы
//  ИдентификаторыКартинокИсходящегоПисьма - список значений, в нем структуры "ИсточникФайла, НавигационнаяСсылка"
//      ИсточникФайла - это "id" в теге <img src=id....
//		НавигационнаяСсылка - навигационная ссылка на картинку у нас во временном хранилище
//
Процедура ВставитьКартинкиВТекстHTML(
	ТекстHTML,
	Картинки,
	УникальныйИдентификаторФормы) Экспорт
	
	Для Каждого ФайлПисьма Из Картинки Цикл 
		
		ИсточникФайла = ФайлПисьма.Идентификатор;
		
		Если СтрЧислоВхождений(ТекстHTML, ИсточникФайла) > 0 Тогда
			
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ФайлПисьма.Адрес);
			
			Расширение = ФайлПисьма.Расширение;
			
			Если ПустаяСтрока(Расширение) Тогда
				Картинка = Новый Картинка(ДвоичныеДанныеФайла);
				Расширение = Строка(Картинка.Формат());
			КонецЕсли;
			
			СтрокаИсточника = "data:image/" + Расширение + ";base64," + Base64Строка(ДвоичныеДанныеФайла);
			ТекстHTML = СтрЗаменить(ТекстHTML, "cid:" + ИсточникФайла, СтрокаИсточника);
			ТекстHTML = СтрЗаменить(ТекстHTML, "CID:" + ИсточникФайла, СтрокаИсточника);
			Если СтрДлина(ИсточникФайла) > 18 Тогда
				ТекстHTML = СтрЗаменить(ТекстHTML, ИсточникФайла, СтрокаИсточника);
			КонецЕсли;	
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру, содержащую информацию из ссылки mailto
Функция РазобратьСсылкуMailto(Знач СсылкаMailto) Экспорт
	
	СтруктураMailto = Новый Структура;
	СтрокаПоискаВСсылке = НРег(СсылкаMailto);
	
	Если СтрНайти(СтрокаПоискаВСсылке, "mailto:") = 1 Тогда
		
		СсылкаMailto = Сред(СсылкаMailto, СтрДлина("mailto:") + 1);
		АнализПараметров = Ложь;
		
		Пока Не ПустаяСтрока(СсылкаMailto) Цикл
			
			ВыделенныйПараметр = ВыделитьПараметр(СсылкаMailto, АнализПараметров);
			ВнестиПараметрВСтруктуру(СтруктураMailto, ВыделенныйПараметр.НаименованиеПараметра, ВыделенныйПараметр.ЗначениеПараметра);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтруктураMailto;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаменитьСпецСимволHTML(Строка, КодСимвола, ИмяСимвола)
	
	Строка = СтрЗаменить(Строка, Символ(КодСимвола), "&" + ИмяСимвола + ";");
	
КонецПроцедуры

Процедура ЗаменитьТабуляцииИПробелы(Строка)
	
	Строка = СтрЗаменить(Строка, Символы.ВТаб, "    ");
	Строка = СтрЗаменить(Строка, Символы.Таб, "    ");
	Строка = СтрЗаменить(Строка, "  ", Символы.НПП + " ");
	Строка = СтрЗаменить(Строка, Символы.НПП + " " + Символы.НПП, Символы.НПП + Символы.НПП + Символы.НПП);
	Строка = СтрЗаменить(Строка, Символы.НПП + " " + Символы.НПП, Символы.НПП + Символы.НПП + Символы.НПП);
	Строка = СтрЗаменить(Строка, Символы.НПП + " " + Символы.НПП, Символы.НПП + Символы.НПП + Символы.НПП);
	Строка = СтрЗаменить(Строка, Символы.НПП + " " + Символы.НПП, Символы.НПП + Символы.НПП + Символы.НПП);
	Строка = СтрЗаменить(Строка, Символы.НПП + " " + Символы.НПП, Символы.НПП + Символы.НПП + Символы.НПП);
	Строка = СтрЗаменить(Строка, Символы.НПП + " " + Символы.НПП, Символы.НПП + Символы.НПП + Символы.НПП);
	
КонецПроцедуры

Процедура ЗаменитьУправляющиеСимволы(Строка)
	
	Текст = СтрЗаменить(Текст, Символы.ВК + Символы.ПС, Символы.ПС);
	Текст = СтрЗаменить(Текст, Символ(7), Символы.ПС);
	Текст = СтрЗаменить(Текст, Символ(8), Символы.ПС);
	Текст = СтрЗаменить(Текст, Символы.ВТаб, Символы.ПС);
	Текст = СтрЗаменить(Текст, Символ(12), Символы.ПС);
	Текст = СтрЗаменить(Текст, Символы.ВК, Символы.ПС);
	Текст = СтрЗаменить(Текст, Символ(14), Символы.ПС);
	Текст = СтрЗаменить(Текст, Символ(28), " ");
	Текст = СтрЗаменить(Текст, Символ(29), " ");
	Текст = СтрЗаменить(Текст, Символ(30), " ");
	
КонецПроцедуры

// Добавляет теги ко всем ссылкам, находящимся в строке.
//
Процедура ДобавитьТегиКСсылкамСоСхемой(
	ТекстHTML,
	ПараметрыВыделенияСсылок,
	Схема,
	НовоеЗначениеСхемы = "")
	
	СхемаПоиска = НРег(Схема);
	ТекстHTMLПоиска = НРег(ТекстHTML);
	Длина = СтрДлина(ТекстHTML);
	
	НоваяСтрока = "";
	НазваниеЭлементаСсылки = "a";
	Смещение = 0;
	
	ЯвляетсяТегомЯкоря = Ложь;
	КонецТега = ">";
	ДлинаКонцаТега = СтрДлина(КонецТега);
	
	ЗакрывающийТегЯкоря = "</a>";
	ДлинаЗакрывающегоТегаЯкоря = СтрДлина(ЗакрывающийТегЯкоря);
	
	НачалоСсылки = РаботаСоСтроками.НайтиПосле(ТекстHTMLПоиска, СхемаПоиска);
	СписокОграничителейURI = РаботаС_HTMLПовтИсп.СписокОграничителейURI();
	
	Пока НачалоСсылки <> 0 Цикл
		
		// Проверять что позиция не в параметрах какого-либо тега
		Если ПозицияНаходитсяВПараметреТега(ТекстHTMLПоиска, НачалоСсылки, НазваниеЭлементаСсылки, ЯвляетсяТегомЯкоря) Тогда
			
			ПозицияОкончанияОткрывающегоТега = 0;
			
			Если ЯвляетсяТегомЯкоря Тогда
				
				// Если тег является якорем - ищем 
				ПозицияОкончанияОткрывающегоТега = РаботаСоСтроками.НайтиПосле(ТекстHTMLПоиска, ЗакрывающийТегЯкоря, НачалоСсылки);
				ПозицияОкончанияОткрывающегоТега = ПозицияОкончанияОткрывающегоТега + ДлинаЗакрывающегоТегаЯкоря;
				ДлинаСмещения = ДлинаЗакрывающегоТегаЯкоря;
				
			КонецЕсли;
			
			Если ПозицияОкончанияОткрывающегоТега = 0 Тогда
				
				ПозицияОкончанияОткрывающегоТега = РаботаСоСтроками.НайтиПосле(ТекстHTMLПоиска, КонецТега, НачалоСсылки);
				
				Если ПозицияОкончанияОткрывающегоТега = 0 Тогда
					
					// Если нет окончания тега - не выделяем больше ссылок
					Прервать;
					
				КонецЕсли;
				
				ПозицияОкончанияОткрывающегоТега = ПозицияОкончанияОткрывающегоТега + ДлинаКонцаТега;
				ДлинаСмещения = ДлинаКонцаТега;
				
			КонецЕсли;
			
			// Если есть окончание тега - выделяем ссылки после тега
			Смещение = Смещение + (ПозицияОкончанияОткрывающегоТега - 1);
			ТекстHTMLПоиска = Сред(ТекстHTMLПоиска, ПозицияОкончанияОткрывающегоТега);
			НачалоСсылки = СтрНайти(ТекстHTMLПоиска, СхемаПоиска);
			
			Продолжить;
			
		КонецЕсли;
		
		Если ПозицияНаходитсяВТеге(ТекстHTMLПоиска, НазваниеЭлементаСсылки, НачалоСсылки) Тогда
			
			ПозицияЗакрывающегоТегаЯкоря = РаботаСоСтроками.НайтиПосле(ТекстHTMLПоиска, ЗакрывающийТегЯкоря, НачалоСсылки);
			Если ПозицияЗакрывающегоТегаЯкоря = 0 Тогда
				
				// Если нет закрывающего "якорь" тега - не выделяем больше ссылок
				Прервать;
				
			КонецЕсли;
			
			ПозицияЗакрывающегоТегаЯкоря = ПозицияЗакрывающегоТегаЯкоря + ДлинаЗакрывающегоТегаЯкоря;
			// Если есть закрывающий "якорь" тег - выделяем ссылки после закрывающего тега
			Смещение = Смещение + (ПозицияЗакрывающегоТегаЯкоря - 1);
			ТекстHTMLПоиска = Сред(ТекстHTMLПоиска, ПозицияЗакрывающегоТегаЯкоря);
			НачалоСсылки = СтрНайти(ТекстHTMLПоиска, СхемаПоиска);
			
			Продолжить;
			
		КонецЕсли;
		
		Если НачалоСсылки = 1 Тогда
			
			СимволПередСсылкой = "";
			
		Иначе
			
			СимволПередСсылкой = Сред(ТекстHTMLПоиска, НачалоСсылки - 1, 1);
			
			Если СимволПередСсылкой = ";" Тогда
				ЗакодированныеКавычки = "&quot;";
				ДлинаКавычек = СтрДлина(ЗакодированныеКавычки);
				Если НачалоСсылки - ДлинаКавычек > 0 Тогда
					ВозможныеКавычки = Сред(ТекстHTMLПоиска, НачалоСсылки - ДлинаКавычек, ДлинаКавычек);
					Если ВозможныеКавычки = ЗакодированныеКавычки Тогда
						СимволПередСсылкой = ЗакодированныеКавычки;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если СписокОграничителейURI.НайтиПоЗначению(СимволПередСсылкой) <> Неопределено Тогда
				
				СимволПередСсылкой = "";
				
			ИначеЕсли СимволПередСсылкой = ">" Тогда
				
				// Тег перед ссылкой
				СимволПередСсылкой = "";
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПустаяСтрока(СимволПередСсылкой) Тогда
			
			КонецСсылки = НайтиКонецСсылки(ТекстHTMLПоиска, НачалоСсылки + СтрДлина(СхемаПоиска), СписокОграничителейURI);
			
			// Добавляем теги к оригинальному тексту, т.к. текст поиска в нижнем регистре
			ДобавитьТегСсылки(
				ТекстHTML,
				ПараметрыВыделенияСсылок,
				НачалоСсылки,
				КонецСсылки,
				Схема,
				НовоеЗначениеСхемы,
				Смещение);
			
			ТекстHTMLПоиска = Сред(ТекстHTMLПоиска, КонецСсылки + 1);
			НачалоСсылки = СтрНайти(ТекстHTMLПоиска, СхемаПоиска);
			
			Продолжить;
			
		ИначеЕсли СимволПередСсылкой = """" ИЛИ СимволПередСсылкой = "&quot;" Тогда
			
			СимволКонцаСсылки = """";
			КонецСсылки = НайтиКонецСсылки(ТекстHTMLПоиска, НачалоСсылки + СтрДлина(СхемаПоиска), СписокОграничителейURI, Истина, СимволКонцаСсылки);
			
			// Добавляем теги к оригинальному тексту, т.к. текст поиска в нижнем регистре
			ДобавитьТегСсылки(
				ТекстHTML,
				ПараметрыВыделенияСсылок,
				НачалоСсылки - СтрДлина(СимволПередСсылкой), // Включаем открывающие кавычки в ссылку
				КонецСсылки,
				Схема,
				НовоеЗначениеСхемы,
				Смещение,
				Истина,
				СимволПередСсылкой,
				СимволКонцаСсылки);
			
			ТекстHTMLПоиска = Сред(ТекстHTMLПоиска, КонецСсылки + 1);
			НачалоСсылки = СтрНайти(ТекстHTMLПоиска, СхемаПоиска);
			
			Продолжить;
			
		КонецЕсли;
		
		Смещение = Смещение + НачалоСсылки;
		ТекстHTMLПоиска = Сред(ТекстHTMLПоиска, НачалоСсылки + 1);
		НачалоСсылки = СтрНайти(ТекстHTMLПоиска, СхемаПоиска);
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет тег в конкретную позицию. Меняет значение Строка и Смещение.
Процедура ДобавитьТегСсылки(
	Строка,
	ПараметрыВыделенияСсылок,
	НачальнаяПозиция,
	КонечнаяПозиция,
	Схема,
	НовоеЗначениеСхемы,
	Смещение,
	ОбрезатьГраничныеСимволыСсылки = Ложь,
	СимволПередСсылкой = "",
	СимволКонцаСсылки = "")
	
	НачалоСтроки = Лев(Строка, Смещение + НачальнаяПозиция - 1);
	
	// Обрезание граничных символов
	Если ОбрезатьГраничныеСимволыСсылки Тогда
		Ссылка = Сред(Строка,
			Смещение + НачальнаяПозиция + СтрДлина(СимволПередСсылкой),
			КонечнаяПозиция - НачальнаяПозиция - СтрДлина(СимволПередСсылкой) - СтрДлина(СимволКонцаСсылки));
	Иначе
		Ссылка = Сред(Строка, Смещение + НачальнаяПозиция, КонечнаяПозиция - НачальнаяПозиция);
	КонецЕсли;
	
	КонецСтроки = Прав(Строка, СтрДлина(Строка) - (Смещение + КонечнаяПозиция - 1));
	
	СсылкаСТегом = СформироватьСсылкуСТегом(ПараметрыВыделенияСсылок, Ссылка, Схема, НовоеЗначениеСхемы);
	
	Строка = НачалоСтроки + СсылкаСТегом + КонецСтроки;
	Смещение = СтрДлина(НачалоСтроки + СсылкаСТегом) + 1;
	
КонецПроцедуры

// Возвращает позицию конца ссылки в строке - первый незначащий символ
Функция НайтиКонецСсылки(ТекстHTML, НачальнаяПозиция, СписокНезначащихСимволов,
	РазрешитьПробелВСсылке = Ложь, СимволКонцаСсылки = Неопределено)
	
	ДопустимыеВURIСпецСимволы = РаботаС_HTMLПовтИсп.ДопустимыеВURIСпецСимволы();
	ЗначимыеВURIСпецСимволы = РаботаС_HTMLПовтИсп.ЗначимыеВURIСпецСимволы();
	ОбратноеСоответствиеСпецСимволов = РаботаС_HTMLПовтИсп.ПолучитьОбратноеСоответствиеСпецСимволов();
	СписокДопустимыхВСсылкеТегов = РаботаС_HTMLПовтИсп.СписокДопустимыхВСсылкеТегов();
	СписокОткрывающихСкобок = РаботаС_HTMLПовтИсп.СписокОткрывающихСкобок();
	СписокЗакрывающихСкобок = РаботаС_HTMLПовтИсп.СписокЗакрывающихСкобок();
	СоответствиеОткрывающихСкобок = РаботаС_HTMLПовтИсп.СоответствиеОткрывающихСкобок();
	
	ОткрытыеСкобки = Новый Соответствие;
	Для Каждого ОткрывающаяСкобка Из СписокОткрывающихСкобок Цикл
		ОткрытыеСкобки[ОткрывающаяСкобка.Значение] = 0;
	КонецЦикла;
	
	НайденНезначащийСимвол = Ложь;
	ОбрабатываемаяСтрока = Сред(ТекстHTML, НачальнаяПозиция);
	ПоложениеПервогоНеЗначащегоСимвола = 0;
	
	Пока Не НайденНезначащийСимвол Цикл
		
		ПервыйСимвол = Лев(ОбрабатываемаяСтрока, 1);
		
		Если ЗначениеЗаполнено(СимволКонцаСсылки) И ПервыйСимвол = СимволКонцаСсылки Тогда
			
			НайденНезначащийСимвол = Истина;
			ПоложениеПервогоНеЗначащегоСимвола = ПоложениеПервогоНеЗначащегоСимвола + 1;
			Прервать;
			
		ИначеЕсли ЗначениеЗаполнено(СимволКонцаСсылки) И ПервыйСимвол = "&" Тогда
			
			ВозможныйСпецСимвол = ПолучитьВозможныйСпецСимвол(ОбрабатываемаяСтрока);
			СпецСимвол = ОбратноеСоответствиеСпецСимволов.Получить(ВозможныйСпецСимвол);
			Если СпецСимвол <> Неопределено И Символ(СпецСимвол) = СимволКонцаСсылки Тогда
				НайденНезначащийСимвол = Истина;
				СимволКонцаСсылки = "&" + ВозможныйСпецСимвол + ";";
				ПоложениеПервогоНеЗначащегоСимвола = ПоложениеПервогоНеЗначащегоСимвола + СтрДлина(СимволКонцаСсылки);
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПервыйСимвол = "&" Тогда
			
			ВозможныйСпецСимвол = ПолучитьВозможныйСпецСимвол(ОбрабатываемаяСтрока);
			ДлинаВозможногоСпецСимвола = СтрДлина(ВозможныйСпецСимвол);
			
			Если СписокЗакрывающихСкобок.НайтиПоЗначению(ВозможныйСпецСимвол) <> Неопределено Тогда
				
				ОткрывающаяСкобка = СоответствиеОткрывающихСкобок[ВозможныйСпецСимвол];
				Если ОткрытыеСкобки[ОткрывающаяСкобка] > 0 Тогда
					ОткрытыеСкобки[ОткрывающаяСкобка] = ОткрытыеСкобки[ОткрывающаяСкобка] - 1;
					ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, ДлинаВозможногоСпецСимвола + 3);
					ПоложениеПервогоНеЗначащегоСимвола = ПоложениеПервогоНеЗначащегоСимвола + ДлинаВозможногоСпецСимвола + 2;
					Продолжить;
				КонецЕсли;
				
			ИначеЕсли ЗначимыеВURIСпецСимволы.НайтиПоЗначению(ВозможныйСпецСимвол) <> Неопределено Тогда
				
				Если СписокОткрывающихСкобок.НайтиПоЗначению(ВозможныйСпецСимвол) <> Неопределено Тогда
					ОткрытыеСкобки[ВозможныйСпецСимвол] = ОткрытыеСкобки[ВозможныйСпецСимвол] + 1;
				КонецЕсли;
				
				ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, ДлинаВозможногоСпецСимвола + 3);
				ПоложениеПервогоНеЗначащегоСимвола = ПоложениеПервогоНеЗначащегоСимвола + ДлинаВозможногоСпецСимвола + 2;
				Продолжить;
				
			ИначеЕсли ДопустимыеВURIСпецСимволы.НайтиПоЗначению(ВозможныйСпецСимвол) <> Неопределено Тогда
				
				ЕстьЗначимыйСимволДоКонцаСсылки = ЕстьЗначимыйСимволДоКонцаСсылки(
					ОбрабатываемаяСтрока,
					СписокНезначащихСимволов,
					РазрешитьПробелВСсылке,
					ДлинаВозможногоСпецСимвола + 2);
				
				Если ЕстьЗначимыйСимволДоКонцаСсылки Тогда
					
					Если СписокОткрывающихСкобок.НайтиПоЗначению(ВозможныйСпецСимвол) <> Неопределено Тогда
						ОткрытыеСкобки[ВозможныйСпецСимвол] = ОткрытыеСкобки[ВозможныйСпецСимвол] + 1;
					КонецЕсли;
					
					ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, ДлинаВозможногоСпецСимвола + 3);
					ПоложениеПервогоНеЗначащегоСимвола = ПоложениеПервогоНеЗначащегоСимвола + ДлинаВозможногоСпецСимвола + 2;
					Продолжить;
					
				Иначе
					
					ПервыйСимвол = "";
					
				КонецЕсли;
				
			ИначеЕсли ОбратноеСоответствиеСпецСимволов.Получить(ВозможныйСпецСимвол) <> Неопределено Тогда
				
				ПервыйСимвол = "";
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПервыйСимвол = "<" Тогда
			
			СтруктураТега = ПолучитьТегВТекстеHTML(ОбрабатываемаяСтрока);
			Если ЗаполненаСтруктураТега(СтруктураТега) Тогда
				
				Если СтруктураТега.ПозицияНачалаОткрывающегоТега = 1 Тогда
					
					Если ТегСодержитсяВСписке(СтруктураТега, СписокДопустимыхВСсылкеТегов) Тогда
						
						ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, СтруктураТега.ПозицияОкончанияОткрывающегоТега + 1);
						ПоложениеПервогоНеЗначащегоСимвола = ПоложениеПервогоНеЗначащегоСимвола + СтруктураТега.ПозицияОкончанияОткрывающегоТега;
						Продолжить;
						
					Иначе
						
						ПервыйСимвол = "";
						
					КонецЕсли;
					
				Иначе
					
					ПервыйСимвол = "";
					
				КонецЕсли;
				
			Иначе
				
				ПервыйСимвол = "";
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СписокЗакрывающихСкобок.НайтиПоЗначению(ПервыйСимвол) <> Неопределено Тогда
			ОткрывающаяСкобка = СоответствиеОткрывающихСкобок[ПервыйСимвол];
			Если ОткрытыеСкобки[ОткрывающаяСкобка] > 0 Тогда
				ОткрытыеСкобки[ОткрывающаяСкобка] = ОткрытыеСкобки[ОткрывающаяСкобка] - 1;
				ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, 2);
				ПоложениеПервогоНеЗначащегоСимвола = ПоложениеПервогоНеЗначащегоСимвола + 1;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если СписокНезначащихСимволов.НайтиПоЗначению(ПервыйСимвол) <> Неопределено 
			И Не ЕстьЗначимыйСимволДоКонцаСсылки(ОбрабатываемаяСтрока, СписокНезначащихСимволов, РазрешитьПробелВСсылке) Тогда
			
			ПервыйСимвол = "";
			
		КонецЕсли;
		
		Если ПервыйСимвол = " " И РазрешитьПробелВСсылке Тогда
			
			ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, 2);
			ПоложениеПервогоНеЗначащегоСимвола = ПоложениеПервогоНеЗначащегоСимвола + 1;
			Продолжить;
			
		КонецЕсли;
		
		Если ПустаяСтрока(ПервыйСимвол) Тогда
			
			НайденНезначащийСимвол = Истина;
			Прервать;
			
		КонецЕсли;
		
		Если СписокОткрывающихСкобок.НайтиПоЗначению(ПервыйСимвол) <> Неопределено Тогда
			ОткрытыеСкобки[ПервыйСимвол] = ОткрытыеСкобки[ПервыйСимвол] + 1;
		КонецЕсли;
		
		ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, 2);
		ПоложениеПервогоНеЗначащегоСимвола = ПоложениеПервогоНеЗначащегоСимвола + 1;
		
	КонецЦикла;
	
	// Если не был найден не значащий символ - все равно возвращаем позицию конца строки.
	Возврат НачальнаяПозиция + ПоложениеПервогоНеЗначащегоСимвола;
	
КонецФункции

// Проверяет наличие название элемента тега в списке значений
Функция ТегСодержитсяВСписке(СтруктураТега, СписокЗначений)
	
	Если Не ЗаполненаСтруктураТега(СтруктураТега) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	НазваниеЭлемента = НРег(СтруктураТега.НазваниеЭлемента);
	
	Для Каждого ЭлементСписка Из СписокЗначений Цикл
		
		ЗначениеЭлементаСписка = ЭлементСписка.Значение;
		Если ТипЗнч(ЗначениеЭлементаСписка) = Тип("Строка") Тогда
			
			ЗначениеЭлементаСписка = НРег(ЗначениеЭлементаСписка);
			ЗначениеЗакрывающегоЭлементаСписка = "/" + ЗначениеЭлементаСписка;
			
			Если НазваниеЭлемента = ЗначениеЭлементаСписка
				ИЛИ НазваниеЭлемента = ЗначениеЗакрывающегоЭлементаСписка Тогда
				
				Возврат Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Проверяет заполненность структуры тега: 
// - наличие всех необходимых тегу свойств в структуре;
// - заполненность позиции начала и окончания тега.
Функция ЗаполненаСтруктураТега(СтруктураТега)
	
	Если (Не СтруктураТега.Свойство("НазваниеЭлемента"))
		ИЛИ (Не СтруктураТега.Свойство("ПараметрыОткрывающегоТега"))
		ИЛИ (Не СтруктураТега.Свойство("Содержание"))
		ИЛИ (Не СтруктураТега.Свойство("ПозицияНачалаОткрывающегоТега"))
		ИЛИ (Не СтруктураТега.Свойство("ПозицияОкончанияОткрывающегоТега"))
		ИЛИ (Не СтруктураТега.Свойство("ПозицияНачалаЗакрывающегоТега"))
		ИЛИ (Не СтруктураТега.Свойство("ПозицияОкончанияЗакрывающегоТега"))
		ИЛИ (Не СтруктураТега.Свойство("ПозицияНачалаТега"))
		ИЛИ (Не СтруктураТега.Свойство("ПозицияОкончанияТега"))  Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураТега.ПозицияНачалаТега)
		И ЗначениеЗаполнено(СтруктураТега.ПозицияОкончанияТега) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает структуру первого тега данного элемента в тексте HTML.
// Если не указано название элемента то возвращает первый встреченный тег.
// Поиск тега ведется с переданной начальной позиции
//  Структура тега: 
//		НазваниеЭлемента - название элемента найденного тега
//		ПараметрыОткрывающегоТега - строка, содержащая параметры открывающего тега
//		Содержание - стока, содержащие данные, находящие между открывающим и закрывающим тегом
//		ПозицияНачалаОткрывающегоТега - позиция символа "<" открывающего тега
//		ПозицияОкончанияОткрывающегоТега - позиция символа ">" открывающего тега
//		ПозицияНачалаЗакрывающегоТега - позиция символа "<" закрывающего тега
//		ПозицияОкончанияЗакрывающегоТега - позиция символа ">" закрывающего тега
//		ПозицияНачалаТега - позиция символа "<" открывающего тега
//		ПозицияОкончанияТега - если есть закрывающий тег, то позиция символа ">" закрывающего тега
//							   если нет закрывающего тега, то позиция символа ">" открывающего тега
//
Функция ПолучитьТегВТекстеHTML(ТекстHTML, НазваниеЭлемента = "", НачальнаяПозиция = 1)
	
	// Определение первого тега
	Если Не ЗначениеЗаполнено(НазваниеЭлемента) Тогда
		
		НачалоОткрывающегоТега = "<";
		НазваниеТега = "";
		
		ОбрабатываемыйТекстHTML = ТекстHTML;
		
		ПозицияНачалаОткрывающегоТега = СтрНайти(ОбрабатываемыйТекстHTML, НачалоОткрывающегоТега);
		Пока ПозицияНачалаОткрывающегоТега <> 0 Цикл
			
			ОбрабатываемыйТекстHTML = Сред(ОбрабатываемыйТекстHTML, ПозицияНачалаОткрывающегоТега + 1);
			ПервыйСимволНазванияТега = Лев(ОбрабатываемыйТекстHTML, 1);
			
			Если ЗначениеЗаполнено(ПервыйСимволНазванияТега) Тогда
				
				ОчереднойСимволНазванияТега = ПервыйСимволНазванияТега;
				
				Пока ЗначениеЗаполнено(ОчереднойСимволНазванияТега)
					И ОчереднойСимволНазванияТега <> ">" Цикл
					
					НазваниеТега = НазваниеТега + ОчереднойСимволНазванияТега;
					ОбрабатываемыйТекстHTML = Сред(ОбрабатываемыйТекстHTML, 2);
					ОчереднойСимволНазванияТега = Лев(ОбрабатываемыйТекстHTML, 1);
					
				КонецЦикла;
				
				ПозицияНачалаОткрывающегоТега = 0;
				
			Иначе
				
				ПозицияНачалаОткрывающегоТега = СтрНайти(ОбрабатываемыйТекстHTML, НачалоОткрывающегоТега);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(НазваниеТега) Тогда
			
			НазваниеЭлемента = НазваниеТега;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НазваниеЭлемента = "blockquote" Тогда
		РазрешитьВложенныеТеги = Истина;
	Иначе
		РазрешитьВложенныеТеги = Ложь;
	КонецЕсли;
	
	НачалоОткрывающегоТега = "<" + НРег(НазваниеЭлемента);
	КонецОткрывающегоТега = ">";
	ЗакрывающийТег = "</" + НРег(НазваниеЭлемента) + ">";
	ОбрабатываемыйТекстHTML = НРег(Сред(ТекстHTML, НачальнаяПозиция));
	Смещение = НачальнаяПозиция - 1;
	
	СтруктураТега = СформироватьСтруктуруТега();
	СтруктураТега.НазваниеЭлемента = НазваниеЭлемента;
	
	ПозицияНачалаОткрывающегоТега = ПолучитьПозициюНачалаОткрывающегоТега(ОбрабатываемыйТекстHTML, НачалоОткрывающегоТега);
	Если ПозицияНачалаОткрывающегоТега = 0 Тогда
		// Если нет начала открывающего тега, то тега нет
		Возврат СтруктураТега;
	КонецЕсли;
	ОбрабатываемыйТекстHTML = Сред(ОбрабатываемыйТекстHTML, ПозицияНачалаОткрывающегоТега + СтрДлина(НачалоОткрывающегоТега));
	Смещение = Смещение + ПозицияНачалаОткрывающегоТега + СтрДлина(НачалоОткрывающегоТега) - 1;
	
	ПозицияОкончанияОткрывающегоТега = СтрНайти(ОбрабатываемыйТекстHTML, КонецОткрывающегоТега);
	Если ПозицияОкончанияОткрывающегоТега = 0 Тогда
		// Если нет окончания открывающего тега, то тега нет
		Возврат СтруктураТега;
	КонецЕсли;
	ПараметрыОткрывающегоТега = Сред(ТекстHTML, Смещение + 1, ПозицияОкончанияОткрывающегоТега - 1);
	ОбрабатываемыйТекстHTML = Сред(ОбрабатываемыйТекстHTML, ПозицияОкончанияОткрывающегоТега + СтрДлина(КонецОткрывающегоТега));
	Смещение = Смещение + ПозицияОкончанияОткрывающегоТега + СтрДлина(КонецОткрывающегоТега) - 1;
	
	Если РазрешитьВложенныеТеги Тогда
		
		ПозицияНачалаЗакрывающегоТега = 0;
		КоличествоОткрытыхТегов = 1;
		Пока КоличествоОткрытыхТегов > 0 Цикл
			
			БлижайшийЗакрывающийТег = СтрНайти(ОбрабатываемыйТекстHTML, ЗакрывающийТег);
			Если БлижайшийЗакрывающийТег = 0 Тогда
				// Нет больше тегов.
				Прервать;
			КонецЕсли;
			
			БлижайшийОткрывающийТег = ПолучитьПозициюНачалаОткрывающегоТега(ОбрабатываемыйТекстHTML, НачалоОткрывающегоТега);
			Если БлижайшийОткрывающийТег = 0 Или БлижайшийЗакрывающийТег < БлижайшийОткрывающийТег Тогда
				
				// Найден закрывающий тег
				КоличествоОткрытыхТегов = КоличествоОткрытыхТегов - 1;
				ПозицияНачалаЗакрывающегоТега = ПозицияНачалаЗакрывающегоТега + БлижайшийЗакрывающийТег + СтрДлина(ЗакрывающийТег) - 1;
				
				ОбрабатываемыйТекстHTML = Сред(ОбрабатываемыйТекстHTML, БлижайшийЗакрывающийТег + СтрДлина(ЗакрывающийТег));
				
			Иначе
				
				// Найден открывающий тег
				КоличествоОткрытыхТегов = КоличествоОткрытыхТегов + 1;
				ПозицияНачалаЗакрывающегоТега = ПозицияНачалаЗакрывающегоТега + БлижайшийОткрывающийТег + СтрДлина(НачалоОткрывающегоТега) - 1;
				ОбрабатываемыйТекстHTML = Сред(ОбрабатываемыйТекстHTML, БлижайшийОткрывающийТег + СтрДлина(НачалоОткрывающегоТега));
				
				БлижайшееОкончаниеОткрывающегоТега = СтрНайти(ОбрабатываемыйТекстHTML, КонецОткрывающегоТега);
				Если ПозицияОкончанияОткрывающегоТега = 0 Тогда
					// Если нет окончания открывающего тега, то тега нет
					Прервать;
				КонецЕсли;
				ПозицияНачалаЗакрывающегоТега = ПозицияНачалаЗакрывающегоТега + БлижайшееОкончаниеОткрывающегоТега + СтрДлина(КонецОткрывающегоТега) - 1;
				ОбрабатываемыйТекстHTML = Сред(ОбрабатываемыйТекстHTML, БлижайшееОкончаниеОткрывающегоТега + СтрДлина(КонецОткрывающегоТега));
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если КоличествоОткрытыхТегов <> 0 Тогда
			ПозицияНачалаЗакрывающегоТега = 0;
		Иначе
			ПозицияНачалаЗакрывающегоТега = ПозицияНачалаЗакрывающегоТега - СтрДлина(ЗакрывающийТег) + 1;
		КонецЕсли;
		
	Иначе
		
		ПозицияНачалаЗакрывающегоТега = СтрНайти(ОбрабатываемыйТекстHTML, ЗакрывающийТег);
		
	КонецЕсли;
	
	// Заполнение позиций в тексте HTML и содержания.
	ПозицияНачалаОткрывающегоТега = ПозицияНачалаОткрывающегоТега + (НачальнаяПозиция - 1);
	ПозицияНачалаТега = ПозицияНачалаОткрывающегоТега;
	ПозицияОкончанияОткрывающегоТега = ПозицияОкончанияОткрывающегоТега + (СтрДлина(НачалоОткрывающегоТега) - 1) + ПозицияНачалаОткрывающегоТега;
	Если ПозицияНачалаЗакрывающегоТега <> 0 Тогда
		Содержание = Сред(ТекстHTML, Смещение + 1, ПозицияНачалаЗакрывающегоТега - 1);
		ПозицияНачалаЗакрывающегоТега = ПозицияНачалаЗакрывающегоТега + ПозицияОкончанияОткрывающегоТега;
		ПозицияОкончанияЗакрывающегоТега = ПозицияНачалаЗакрывающегоТега + (СтрДлина(ЗакрывающийТег) - 1);
	Иначе
		Содержание = "";
		ПозицияОкончанияЗакрывающегоТега = 0;
	КонецЕсли;
	Если ПозицияОкончанияЗакрывающегоТега <> 0 Тогда
		ПозицияОкончанияТега = ПозицияОкончанияЗакрывающегоТега;
	Иначе
		ПозицияОкончанияТега = ПозицияОкончанияОткрывающегоТега;
	КонецЕсли;
	
	// Заполнение структуры тега
	СтруктураТега.ПараметрыОткрывающегоТега = ПараметрыОткрывающегоТега;
	СтруктураТега.Содержание = Содержание;
	СтруктураТега.ПозицияНачалаОткрывающегоТега = ПозицияНачалаОткрывающегоТега;
	СтруктураТега.ПозицияОкончанияОткрывающегоТега = ПозицияОкончанияОткрывающегоТега;
	СтруктураТега.ПозицияНачалаЗакрывающегоТега = ПозицияНачалаЗакрывающегоТега;
	СтруктураТега.ПозицияОкончанияЗакрывающегоТега = ПозицияОкончанияЗакрывающегоТега;
	СтруктураТега.ПозицияНачалаТега = ПозицияНачалаТега;
	СтруктураТега.ПозицияОкончанияТега = ПозицияОкончанияТега;
	СтруктураТега.НазваниеЭлемента = НазваниеЭлемента;
	
	Возврат СтруктураТега;
	
КонецФункции

// Определяет позицию открывающего тега в переданном тексте
Функция ПолучитьПозициюНачалаОткрывающегоТега(ОбрабатываемыйТекстHTML, НачалоОткрывающегоТега)
	
	ПозицияНачалаОткрывающегоТега = 0;
	
	ВозможнаяПозицияНачалаОткрывающегоТега = СтрНайти(ОбрабатываемыйТекстHTML, НачалоОткрывающегоТега);
	СледующийСимвол = Сред(ОбрабатываемыйТекстHTML, ВозможнаяПозицияНачалаОткрывающегоТега + СтрДлина(НачалоОткрывающегоТега), 1);
	
	Если СледующийСимвол = " " Или СледующийСимвол = Символы.ПС Или СледующийСимвол = ">" Тогда
		ПозицияНачалаОткрывающегоТега = ВозможнаяПозицияНачалаОткрывающегоТега;
	ИначеЕсли СледующийСимвол = "/" Тогда
		СледующиеДваСимвола = Сред(ОбрабатываемыйТекстHTML, ВозможнаяПозицияНачалаОткрывающегоТега + СтрДлина(НачалоОткрывающегоТега), 2);
		Если СледующиеДваСимвола = "/>" Тогда
			ПозицияНачалаОткрывающегоТега = ВозможнаяПозицияНачалаОткрывающегоТега;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПозицияНачалаОткрывающегоТега;
	
КонецФункции

// Формирует пустую структуру тега
//
// Возвращаемое значение:
//  Структура - НазваниеЭлемента - Строка - Имя тега
//            - ПараметрыОткрывающегоТега - Строка - Параметры тега
//            - Содержание - Строка - Текстовое содержимое тега
//            - ПозицияНачалаОткрывающегоТега - Число - Позиция символа "<" открывающего тега
//            - ПозицияНачалаОткрывающегоТега - Число - Позиция символа ">" открывающего тега
//            - ПозицияНачалаЗакрывающегоТега - Число - Позиция символа "<" закрывающего тега.
//                                                      Если нет закрывающего тега, то содержит 0.
//            - ПозицияОкончанияЗакрывающегоТега - Число - Позиция символа ">" открывающего тега
//                                                      Если нет закрывающего тега, то содержит 0.
//            - ПозицияНачалаТега - Число - Позиция символа "<" открывающего тега
//            - ПозицияОкончанияТега - Число - Позиция символа ">" закрывающего тега. Если нет 
//                                             закрывающего тега, то содержит позицию символа ">"
//                                             открывающего тега.
//
Функция СформироватьСтруктуруТега()
	
	Тег = Новый Структура;
	Тег.Вставить("НазваниеЭлемента", "");
	Тег.Вставить("ПараметрыОткрывающегоТега", "");
	Тег.Вставить("Содержание", "");
	Тег.Вставить("ПозицияНачалаОткрывающегоТега", 0);
	Тег.Вставить("ПозицияОкончанияОткрывающегоТега", 0);
	Тег.Вставить("ПозицияНачалаЗакрывающегоТега", 0);
	Тег.Вставить("ПозицияОкончанияЗакрывающегоТега", 0);
	Тег.Вставить("ПозицияНачалаТега", 0);
	Тег.Вставить("ПозицияОкончанияТега", 0);
	
	Возврат Тег;
	
КонецФункции

// Проверяет наличие значащего символа до конца ссылки. 
// Концом ссылки считаются стандартные незначащие символы.
Функция ЕстьЗначимыйСимволДоКонцаСсылки(Строка, СписокНезначащихСимволов,
	РазрешитьПробелВСсылке = Ложь, НачальнаяПозиция = 0)
	
	ОбратноеСоответствиеСпецСимволов = РаботаС_HTMLПовтИсп.ПолучитьОбратноеСоответствиеСпецСимволов();
	ДопустимыеВURIСпецСимволы = РаботаС_HTMLПовтИсп.ДопустимыеВURIСпецСимволы();
	ЗначимыеВURIСпецСимволы = РаботаС_HTMLПовтИсп.ЗначимыеВURIСпецСимволы();
	СписокДопустимыхВСсылкеТегов = РаботаС_HTMLПовтИсп.СписокДопустимыхВСсылкеТегов();
	
	ОбрабатываемаяСтрока = Сред(Строка, НачальнаяПозиция + 1);
	НайденЗначащийСимвол = Ложь;
	
	Итерация = 0;
	ГлубинаАнализа = 50;
	Пока Не НайденЗначащийСимвол Цикл
		
		Итерация = Итерация + 1;
		Если Итерация > ГлубинаАнализа Тогда
			Прервать;
		КонецЕсли;
		
		ПервыйСимвол = Лев(ОбрабатываемаяСтрока, 1);
		
		Если ПервыйСимвол = " " И РазрешитьПробелВСсылке Тогда
			
			ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, 2);
			
		ИначеЕсли ПустаяСтрока(ПервыйСимвол) Тогда
			
			Прервать;
			
		ИначеЕсли ПервыйСимвол = "&" Тогда
			
			ВозможныйСпецСимвол = ПолучитьВозможныйСпецСимвол(ОбрабатываемаяСтрока);
			ДлинаВозможногоСпецСимвола = СтрДлина(ВозможныйСпецСимвол);
			
			Если ЗначимыеВURIСпецСимволы.НайтиПоЗначению(ВозможныйСпецСимвол) <> Неопределено Тогда
				
				НайденЗначащийСимвол = Истина;
				
			ИначеЕсли ДопустимыеВURIСпецСимволы.НайтиПоЗначению(ВозможныйСпецСимвол) <> Неопределено
				ИЛИ ОбратноеСоответствиеСпецСимволов.Получить(ВозможныйСпецСимвол) <> Неопределено Тогда
				
				ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, ДлинаВозможногоСпецСимвола + 3);
				
			Иначе
				
				НайденЗначащийСимвол = Истина;
				
			КонецЕсли;
			
			
		ИначеЕсли ПервыйСимвол = "<" Тогда
			
			СтруктураТега = ПолучитьТегВТекстеHTML(ОбрабатываемаяСтрока);
			Если ЗаполненаСтруктураТега(СтруктураТега) Тогда
				
				Если СтруктураТега.ПозицияНачалаОткрывающегоТега = 1 Тогда
					
					Если ТегСодержитсяВСписке(СтруктураТега, СписокДопустимыхВСсылкеТегов) Тогда
						
						ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, СтруктураТега.ПозицияОкончанияОткрывающегоТега + 1);
						Продолжить;
						
					Иначе
						Прервать;
					КонецЕсли;
					
				Иначе
					Прервать;
				КонецЕсли;
				
			Иначе
				Прервать;
			КонецЕсли;
			
		ИначеЕсли СписокНезначащихСимволов.НайтиПоЗначению(ПервыйСимвол) <> Неопределено Тогда
			
			ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, 2);
			
		Иначе
			
			НайденЗначащийСимвол = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НайденЗначащийСимвол;
	
КонецФункции

// Возвращает спецсимвол HTML (&СпецСимвол;), если он присутствует.
// Возвращает Неопределено, если нет возможных спецсимволов.
Функция ПолучитьВозможныйСпецСимвол(Строка, ПозицияСпецСимвола = 0)
	
	ОбрабатываемаяСтрока = Сред(Строка, ПозицияСпецСимвола + 1);
	ПервыйСимвол = Лев(ОбрабатываемаяСтрока, 1);
	
	Если ПервыйСимвол = "&" Тогда
		
		КонецСпецСимвола = СтрНайти(ОбрабатываемаяСтрока, ";");
		
		Если КонецСпецСимвола <> 0 Тогда
			
			СпецСимвол = Сред(ОбрабатываемаяСтрока, 2, КонецСпецСимвола - 2);
			
			Возврат СпецСимвол;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Формирует текстовое представление ссылки с тегом
Функция СформироватьСсылкуСТегом(ПараметрыВыделенияСсылок, Ссылка, Схема, НовоеЗначениеСхемы)
	
	ПредставлениеСсылки = Ссылка;
	// Если ссылка совпадает со схемой, то выделять ссылку нет необходимости.
	Если Ссылка = Схема Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	// Для ссылок mailto особая обработка.
	ПолученоПредставлениеСсылки = Ложь;
	Если Схема = "mailto:" Тогда
		
		ДанныеMailto = РазобратьСсылкуMailto(Ссылка);
		Если ДанныеMailto.Свойство("АдресатыКому") И ДанныеMailto.АдресатыКому.Количество() <> 0 Тогда
			Адресат = ДанныеMailto.АдресатыКому[0];
			ПредставлениеСсылки = Адресат.Адрес;
		Иначе
			ПредставлениеСсылки = Ссылка;
		КонецЕсли;
		
		СсылкаСТегом = СтрШаблон(
			"<a href=""%1"">%2</a>",
			Ссылка,
			ПредставлениеСсылки);
		
		Возврат СсылкаСТегом;
		
	ИначеЕсли Схема = "e1cib/" И ПараметрыВыделенияСсылок.ПолучатьПредставление Тогда
		
		МассивСсылок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка);
		МассивПредставлений = ПолучитьПредставленияНавигационныхСсылок(МассивСсылок);
		ПредставлениеСсылкиВБазе = МассивПредставлений[0];
		Если ПредставлениеСсылкиВБазе <> Неопределено Тогда
			ПредставлениеСсылки = ПредставлениеСсылкиВБазе.Текст;
			ПолученоПредставлениеСсылки = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыВыделенияСсылок.ФормироватьТеги = Ложь Тогда
		Возврат ПредставлениеСсылки;
	КонецЕсли;
	
	// Замены схемы в ссылке при необходимости, например "www." => "http://www."
	Если ЗначениеЗаполнено(НовоеЗначениеСхемы) И СсылкаСоответствуетСхеме(Ссылка, Схема) Тогда
		Ссылка = НовоеЗначениеСхемы + Сред(Ссылка, СтрДлина(Схема) + 1);
	КонецЕсли;
	
	// Удаление тегов из ссылки
	ПозицияНачалаОткрывающегоТега = РаботаСоСтроками.НайтиПосле(Ссылка, "<");
	Пока ПозицияНачалаОткрывающегоТега <> 0 Цикл
		
		СтруктураТега = ПолучитьТегВТекстеHTML(Ссылка, , ПозицияНачалаОткрывающегоТега);
		Если ЗаполненаСтруктураТега(СтруктураТега) Тогда
			
			Ссылка = Лев(Ссылка, СтруктураТега.ПозицияНачалаОткрывающегоТега - 1) + Сред(Ссылка, СтруктураТега.ПозицияОкончанияОткрывающегоТега + 1);
			ПозицияНачалаОткрывающегоТега = ПозицияНачалаОткрывающегоТега - 1;
			
		КонецЕсли;
		
		ПозицияНачалаОткрывающегоТега = РаботаСоСтроками.НайтиПосле(Ссылка, "<", ПозицияНачалаОткрывающегоТега);
		
	КонецЦикла;
	
	СсылкаСТегом = СсылкаСТегом(ПараметрыВыделенияСсылок, Ссылка, ПредставлениеСсылки);
	
	Если ПолученоПредставлениеСсылки И ПараметрыВыделенияСсылок.СохранятьСсылкиПриПолученииПредставления Тогда
		СсылкаСТегом = СсылкаСТегом
			+ " (" + НСтр("ru = 'Ссылка'") + ": " + СсылкаСТегом(ПараметрыВыделенияСсылок, Ссылка, Ссылка) + ")";
	КонецЕсли;
	
	Возврат СсылкаСТегом;
	
КонецФункции

// Формирует параметры выделения ссылок.
//
Функция ПараметрыВыделенияСсылок() Экспорт
	
	ПараметрыВыделенияСсылок = Новый Структура;
	ПараметрыВыделенияСсылок.Вставить("ПолучатьПредставление", Ложь);
	ПараметрыВыделенияСсылок.Вставить("ФормироватьТеги", Истина);
	ПараметрыВыделенияСсылок.Вставить("СохранятьСсылкиПриПолученииПредставления", Ложь);
	ПараметрыВыделенияСсылок.Вставить("КодироватьНавигационныеСсылки", Ложь);
	ПараметрыВыделенияСсылок.Вставить("ЗаполнятьСвойствоTitle", Истина);
	ПараметрыВыделенияСсылок.Вставить("НавигационнаяСсылкаИнформационнойБазы", "");
	
	Возврат ПараметрыВыделенияСсылок;
	
КонецФункции

// Заменяет в строке все имена спецсимволов на соответствующие им спецсимволы,
// возвращает измененную строку.
Функция ЗаменитьСпецСимволыHTMLОбратно(Строка, СпецСимволыСоотв = Неопределено)
	
	ОбратноеСоответствиеСпецСимволов = РаботаС_HTMLПовтИсп.ПолучитьСоответствиеСпецСимволов();
	
	ЗаменитьСпецСимволHTMLОбратно(Строка, 38, "amp");
	
	Для Каждого СпецСимвол Из ОбратноеСоответствиеСпецСимволов Цикл
		ЗаменитьСпецСимволHTMLОбратно(Строка, СпецСимвол.Ключ, СпецСимвол.Значение);
	КонецЦикла;
	
	Возврат Строка;
	
КонецФункции

Процедура ЗаменитьСпецСимволHTMLОбратно(Строка, КодСимвола, ИмяСимвола)
	
	Строка = СтрЗаменить(Строка, "&" + ИмяСимвола + ";", Символ(КодСимвола));
	
КонецПроцедуры

// Проверяет соответствие ссылки схеме.
Функция СсылкаСоответствуетСхеме(Ссылка, Схема)
	
	ДлинаСхемы = СтрДлина(Схема);
	СхемаВСсылке = Лев(Ссылка, ДлинаСхемы);
	
	Возврат НРег(Схема) = НРег(СхемаВСсылке);
	
КонецФункции

// Проверяет нахождение переданной позиции внутри тега (в параметрах или содержании)
// Если тег не закрыт, то проверяет только в параметрах тега.
Функция ПозицияНаходитсяВТеге(ТекстHTML, НазваниеЭлемента, Позиция, Тег = Неопределено) Экспорт
	
	НачалоОткрывающегоТега = "<" + НРег(НазваниеЭлемента);
	ДлинаОткрывающегоТега = СтрДлина(НачалоОткрывающегоТега);
	
	ПозицияНаходитсяВТеге = Ложь;
	
	НачалоТекстаHTML = Лев(НРег(ТекстHTML), Позиция - 1);
	НайденнаяПозицияНачалаОткрывающегоТега = 0;
	ПозицияОкончанияОткрывающегоТега = 0;
	
	ПозицияНачалаОткрывающегоТега = СтрНайти(НачалоТекстаHTML, НачалоОткрывающегоТега);
	Пока ПозицияНачалаОткрывающегоТега <> 0 Цикл
		
		НачалоТекстаHTML = Сред(НачалоТекстаHTML, ПозицияНачалаОткрывающегоТега + 1);
		НайденнаяПозицияНачалаОткрывающегоТега =
			НайденнаяПозицияНачалаОткрывающегоТега
			+ ПозицияОкончанияОткрывающегоТега
			+ ПозицияНачалаОткрывающегоТега;
		
		ПозицияОкончанияОткрывающегоТега = СтрНайти(НачалоТекстаHTML, ">");
		Если ПозицияОкончанияОткрывающегоТега <> 0 Тогда
			
			НачалоТекстаHTML = Сред(НачалоТекстаHTML, ПозицияОкончанияОткрывающегоТега + 1);
			
		КонецЕсли;
		
		ПозицияНачалаОткрывающегоТега = СтрНайти(НачалоТекстаHTML, НачалоОткрывающегоТега);
		
	КонецЦикла;
	
	Если НайденнаяПозицияНачалаОткрывающегоТега <> 0 Тогда
		
		// Если есть незакрытый открывающий тег до искомой позиции, ищем тег в исходном тексте HTML.
		Тег = ПолучитьТегВТекстеHTML(ТекстHTML, НазваниеЭлемента, НайденнаяПозицияНачалаОткрывающегоТега);
		
		Если ЗаполненаСтруктураТега(Тег) Тогда
			
			Если Позиция > Тег.ПозицияНачалаТега И Позиция < Тег.ПозицияОкончанияТега Тогда
				
				ПозицияНаходитсяВТеге = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПозицияНаходитсяВТеге;
	
КонецФункции

// Проверяет нахождение внутри параметров открывающего тега (возможно, который не закрыт)
Функция ПозицияНаходитсяВПараметреТега(ТекстHTML, Позиция, НужныйТег = "", ЯвляетсяНужнымТегом = Ложь)
	
	НачалоТега = "<";
	КонецТега = ">";
	ОткрытТег = Ложь;
	ЯвляетсяНужнымТегом = Ложь;
	
	НачалоТекстаHTML = Лев(НРег(ТекстHTML), Позиция - 1);
	НайденнаяПозицияНачалаОткрывающегоТега = 0;
	ПозицияНачалаОткрывающегоТега = СтрНайти(НачалоТекстаHTML, НачалоТега);
	Пока ПозицияНачалаОткрывающегоТега <> 0 Цикл
		
		НачалоТекстаHTML = Сред(НачалоТекстаHTML, ПозицияНачалаОткрывающегоТега + 1);
		ПервыйСимволНазванияТега = Сред(НачалоТекстаHTML, 1, 1);
		
		Если ЗначениеЗаполнено(ПервыйСимволНазванияТега) Тогда
			
			ПозицияОкончанияОткрывающегоТега = СтрНайти(НачалоТекстаHTML, КонецТега);
			Если ПозицияОкончанияОткрывающегоТега <> 0 Тогда
				
				// Пропускаем содержимое открытых тегов для корректного определения является ли тег нужным
				// Например: "<a <test " - открыт тег a; "<test <a " - открыт тег test.
				НачалоТекстаHTML = Сред(НачалоТекстаHTML, ПозицияОкончанияОткрывающегоТега + 1);
				
			Иначе
				
				ПозицияНужногоТега = СтрНайти(НачалоТекстаHTML, НужныйТег + " ");
				Если ПозицияНужногоТега = 0 Тогда
					ПозицияНужногоТега = СтрНайти(НачалоТекстаHTML, НужныйТег + ">");
				КонецЕсли;
				
				Если ПозицияНужногоТега = 1 Тогда
					ЯвляетсяНужнымТегом = Истина;
				КонецЕсли;
				
				ОткрытТег = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПозицияНачалаОткрывающегоТега = СтрНайти(НачалоТекстаHTML, НачалоТега);
		
	КонецЦикла;
	
	Возврат ОткрытТег;
	
КонецФункции

// Дописывать значение из href в свойство title ссылок и картинок.
Процедура ЗаполнитьСвойствоTitleУСсылок(ТекстHTML)
	
	ТекстBase = ОпределитьBase(ТекстHTML);
	
	Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "a");
	
	Пока ЗаполненаСтруктураТега(Тег) <> 0 Цикл
		
		Смещение = 0;
		СимволОграниченияHref = Неопределено;
		СимволОграниченияTitle = Неопределено;
		НачалоTitle = 0;
		КонецTitle = 0;
		
		ТекстHref = ПолучитьЗначениеПараметраТега(Тег, "href", СимволОграниченияHref);
		
		// Считаем ссылку относительной, если в ней нет символа ":"
		Если ТекстBase <> "" И СтрНайти(ТекстHref, ":") = 0 Тогда
			
			Если (Лев(ТекстHref, 1) <> "\" И Лев(ТекстHref, 1) <> "/")
				И (Прав(ТекстBase, 1) <> "\" И Прав(ТекстBase, 1) <> "/") Тогда
				
				// Нет "/" в тексте ссылки и Base
				ТекстHref = "/" + ТекстHref;
				
			ИначеЕсли (Лев(ТекстHref, 1) = "\" ИЛИ Лев(ТекстHref, 1) = "/")
				И (Прав(ТекстBase, 1) = "\" ИЛИ Прав(ТекстBase, 1) = "/") Тогда
				
				// Есть "/" в тексте ссылки и Base
				ТекстHref = Сред(ТекстHref, 2);
				
			КонецЕсли;
			
			ТекстHref = ТекстBase + ТекстHref;
			
		КонецЕсли;
		
		
		Если ТекстHref = Неопределено Тогда
			Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "a", Тег.ПозицияОкончанияОткрывающегоТега + 1);
			Продолжить;
		КонецЕсли;
		
		ТекстTitle = ПолучитьЗначениеПараметраТега(Тег, "title", СимволОграниченияTitle, НачалоTitle, КонецTitle);
		
		Если ТекстTitle = Неопределено Тогда
			
			ТекстTitle = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"title=%1%2%1", СимволОграниченияHref, ТекстHref);
			Смещение = Смещение + СтрДлина(ТекстTitle) + 1;
			
			НовыйОткрывающийТег = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<%1%3 %2>", Тег.НазваниеЭлемента, ТекстTitle, Тег.ПараметрыОткрывающегоТега);
			
		ИначеЕсли СтрНайти(ТекстTitle, ТекстHref) = 0 Тогда
			
			ТекстДоTitle = Лев(Тег.ПараметрыОткрывающегоТега, НачалоTitle - 1);
			ТекстПослеTitle = Сред(Тег.ПараметрыОткрывающегоТега, КонецTitle + 1);
			
			Если СимволОграниченияTitle <> СимволОграниченияHref Тогда
				Если СимволОграниченияTitle = """" Тогда
					ТекстHref = СтрЗаменить(ТекстHref, """", "'");
				ИначеЕсли СимволОграниченияTitle = "'" Тогда
					ТекстHref = СтрЗаменить(ТекстHref, "'", """");
				КонецЕсли;
			КонецЕсли;
			
			Если СимволОграниченияTitle = "" Тогда
				ТекстTitle = СтрЗаменить(ТекстTitle, """", "'");
				ТекстHref = СтрЗаменить(ТекстHref, """", "'");
				СимволОграниченияTitle = """";
			КонецЕсли;
			
			ТекстTitle = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"title=%1%2%3%1", СимволОграниченияTitle, ТекстTitle, Символы.ПС + ТекстHref);
			Смещение = Смещение + СтрДлина(ТекстHref) + 1;
			
			НовыйОткрывающийТег = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<%1%2%3%4>", Тег.НазваниеЭлемента, ТекстДоTitle, ТекстTitle, ТекстПослеTitle);
			
		Иначе
			
			Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "a", Тег.ПозицияОкончанияОткрывающегоТега + Смещение + 1);
			Продолжить;
			
		КонецЕсли;
		
		ТекстHTML =
			Лев(ТекстHTML, Тег.ПозицияНачалаОткрывающегоТега - 1)
			+ НовыйОткрывающийТег
			+ Сред(ТекстHTML, Тег.ПозицияОкончанияОткрывающегоТега + 1);
		
		Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "a", Тег.ПозицияОкончанияОткрывающегоТега + Смещение + 1);
		
	КонецЦикла;
	
	Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "img");
	
	Пока ЗаполненаСтруктураТега(Тег) <> 0 Цикл
		
		Смещение = 0;
		ВнешнийТегСсылки = Неопределено;
		СимволОграниченияHref = Неопределено;
		СимволОграниченияTitle = Неопределено;
		НачалоTitle = 0;
		КонецTitle = 0;
		
		Если НЕ ПозицияНаходитсяВТеге(ТекстHTML, "a", Тег.ПозицияНачалаТега, ВнешнийТегСсылки) Тогда
			Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "img", Тег.ПозицияОкончанияОткрывающегоТега + Смещение + 1);
			Продолжить;
		КонецЕсли;
		
		ТекстHref = ПолучитьЗначениеПараметраТега(ВнешнийТегСсылки, "href", СимволОграниченияHref);
		Если ТекстHref = Неопределено Тогда
			Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "img", Тег.ПозицияОкончанияОткрывающегоТега + Смещение + 1);
			Продолжить;
		КонецЕсли;
		
		ТекстTitle = ПолучитьЗначениеПараметраТега(Тег, "title", СимволОграниченияTitle, НачалоTitle, КонецTitle);
		Если ТекстTitle = Неопределено Тогда
			
			ТекстTitle = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"title=%1%2%1", СимволОграниченияHref, ТекстHref);
			Смещение = Смещение + СтрДлина(ТекстTitle) + 1;
			
			НовыйОткрывающийТег = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<%1%3 %2>", Тег.НазваниеЭлемента, ТекстTitle, Тег.ПараметрыОткрывающегоТега);
			
		ИначеЕсли СтрНайти(ТекстTitle, ТекстHref) = 0 Тогда
			
			ТекстДоTitle = Лев(Тег.ПараметрыОткрывающегоТега, НачалоTitle - 1);
			ТекстПослеTitle = Сред(Тег.ПараметрыОткрывающегоТега, КонецTitle + 1);
			
			Если СимволОграниченияTitle <> СимволОграниченияHref Тогда
				Если СимволОграниченияTitle = """" Тогда
					ТекстHref = СтрЗаменить(ТекстHref, """", "'");
				ИначеЕсли СимволОграниченияTitle = "'" Тогда
					ТекстHref = СтрЗаменить(ТекстHref, "'", """");
				ИначеЕсли СимволОграниченияTitle = "" Тогда
					ТекстTitle = СтрЗаменить(ТекстHref, """", "'");
					ТекстHref = СтрЗаменить(ТекстHref, """", "'");
					СимволОграниченияTitle = """";
				КонецЕсли;
			КонецЕсли;
			
			ТекстTitle = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"title=%1%2%3%1", СимволОграниченияTitle, ТекстTitle, Символы.ПС + ТекстHref);
			Смещение = Смещение + СтрДлина(ТекстHref) + 1;
			
			НовыйОткрывающийТег = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<%1%2%3%4>", Тег.НазваниеЭлемента, ТекстДоTitle, ТекстTitle, ТекстПослеTitle);
			
		Иначе
			
			Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "img", Тег.ПозицияОкончанияОткрывающегоТега + Смещение + 1);
			Продолжить;
			
		КонецЕсли;
		
		ТекстHTML =
			Лев(ТекстHTML, Тег.ПозицияНачалаОткрывающегоТега - 1)
			+ НовыйОткрывающийТег
			+ Сред(ТекстHTML, Тег.ПозицияОкончанияОткрывающегоТега + 1);
		
		Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "img", Тег.ПозицияОкончанияОткрывающегоТега + Смещение + 1);
		
	КонецЦикла;
	
	Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "area");
	
	Пока ЗаполненаСтруктураТега(Тег) <> 0 Цикл
		
		Смещение = 0;
		СимволОграниченияHref = Неопределено;
		СимволОграниченияTitle = Неопределено;
		НачалоTitle = 0;
		КонецTitle = 0;
		
		ТекстHref = ПолучитьЗначениеПараметраТега(Тег, "href", СимволОграниченияHref);
		Если ТекстHref = Неопределено Тогда
			Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "area", Тег.ПозицияОкончанияОткрывающегоТега + 1);
			Продолжить;
		КонецЕсли;
		
		ТекстTitle = ПолучитьЗначениеПараметраТега(Тег, "title", СимволОграниченияTitle, НачалоTitle, КонецTitle);
		
		Если ТекстTitle = Неопределено Тогда
			
			ТекстTitle = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"title=%1%2%1", СимволОграниченияHref, ТекстHref);
			Смещение = Смещение + СтрДлина(ТекстTitle) + 1;
			
			НовыйОткрывающийТег = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<%1%3 %2>", Тег.НазваниеЭлемента, ТекстTitle, Тег.ПараметрыОткрывающегоТега);
			
		ИначеЕсли СтрНайти(ТекстTitle, ТекстHref) = 0 Тогда
			
			ТекстДоTitle = Лев(Тег.ПараметрыОткрывающегоТега, НачалоTitle - 1);
			ТекстПослеTitle = Сред(Тег.ПараметрыОткрывающегоТега, КонецTitle + 1);
			
			Если СимволОграниченияTitle <> СимволОграниченияHref Тогда
				Если СимволОграниченияTitle = """" Тогда
					ТекстHref = СтрЗаменить(ТекстHref, """", "'");
				ИначеЕсли СимволОграниченияTitle = "'" Тогда
					ТекстHref = СтрЗаменить(ТекстHref, "'", """");
				ИначеЕсли СимволОграниченияTitle = "" Тогда
					ТекстTitle = СтрЗаменить(ТекстTitle, """", "'");
					ТекстHref = СтрЗаменить(ТекстHref, """", "'");
					СимволОграниченияTitle = """";
				КонецЕсли;
			КонецЕсли;
			
			ТекстTitle = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"title=%1%2%3%1", СимволОграниченияTitle, ТекстTitle, Символы.ПС + ТекстHref);
			Смещение = Смещение + СтрДлина(ТекстHref) + 1;
			
			НовыйОткрывающийТег = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<%1%2%3%4>", Тег.НазваниеЭлемента, ТекстДоTitle, ТекстTitle, ТекстПослеTitle);
			
		Иначе
			
			Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "area", Тег.ПозицияОкончанияОткрывающегоТега + Смещение + 1);
			Продолжить;
			
		КонецЕсли;
		
		ТекстHTML =
			Лев(ТекстHTML, Тег.ПозицияНачалаОткрывающегоТега - 1)
			+ НовыйОткрывающийТег
			+ Сред(ТекстHTML, Тег.ПозицияОкончанияОткрывающегоТега + 1);
		
		Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "area", Тег.ПозицияОкончанияОткрывающегоТега + Смещение + 1);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает значение свойства параметра тега
Функция ПолучитьЗначениеПараметраТега(Тег, Параметр,
	СимволОграничения = Неопределено, НачалоПараметра = Неопределено, КонецПараметра = Неопределено)
	
	Если НЕ ЗаполненаСтруктураТега(Тег) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыДляПоиска = НРег(Тег.ПараметрыОткрывающегоТега);
	ПараметрДляПоиска = НРег(Параметр);
	
	ПозицияПараметра = СтрНайти(ПараметрыДляПоиска, ПараметрДляПоиска);
	Если ПозицияПараметра = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НачалоПараметра = СтрНайти(ПараметрыДляПоиска, ПараметрДляПоиска + "=""");
	Если НачалоПараметра <> 0 Тогда
		СимволОграничения = """";
	Иначе
		НачалоПараметра = СтрНайти(ПараметрыДляПоиска, ПараметрДляПоиска + "='");
		Если НачалоПараметра <> 0 Тогда
			СимволОграничения = "'";
		Иначе
			НачалоПараметра = СтрНайти(ПараметрыДляПоиска, ПараметрДляПоиска + "=");
			Если НачалоПараметра <> 0 Тогда
				СимволОграничения = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если НачалоПараметра = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СимволОграничения = "" Тогда
		ЗакрывающийСимволОграничения = " ";
		КонецПараметра = РаботаСоСтроками.НайтиПосле(ПараметрыДляПоиска, ЗакрывающийСимволОграничения,
			НачалоПараметра + СтрДлина(ПараметрДляПоиска + "=" + СимволОграничения));
		Если КонецПараметра = 0 Тогда
			ЗакрывающийСимволОграничения = Символы.ПС;
			КонецПараметра = РаботаСоСтроками.НайтиПосле(ПараметрыДляПоиска, ЗакрывающийСимволОграничения,
				НачалоПараметра + СтрДлина(ПараметрДляПоиска + "=" + СимволОграничения));
			Если КонецПараметра = 0 Тогда
				КонецПараметра = СтрДлина(ПараметрыДляПоиска) + 1;
			КонецЕсли;
		КонецЕсли;
	Иначе
		КонецПараметра = РаботаСоСтроками.НайтиПосле(ПараметрыДляПоиска, СимволОграничения,
			НачалоПараметра + СтрДлина(ПараметрДляПоиска + "=" + СимволОграничения));
		Если КонецПараметра = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если КонецПараметра = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗначениеПараметраТега = Сред(Тег.ПараметрыОткрывающегоТега, НачалоПараметра + СтрДлина(Параметр + "=" + СимволОграничения),
		КонецПараметра - (НачалоПараметра + СтрДлина(Параметр + "=" + СимволОграничения)));
	
	Возврат ЗначениеПараметраТега;
	
КонецФункции

// Для отображения подсказки к относительным ссылкам используется упрощенный
// метод определения относительной ссылки и работы с тегом BASE, для самых частотных случаев.
// Ссылка считается относительной, если в ней не присутствует ":".
// К представлению относительных ссылок дописывается текст тега Base.
Функция ОпределитьBase(ТекстHTML)
	
	ТегBody = ПолучитьТегВТекстеHTML(ТекстHTML, "body");
	ТегBase = ПолучитьТегВТекстеHTML(ТекстHTML, "base");
	ТекстBase = ПолучитьЗначениеПараметраТега(ТегBase, "href");
	Если ТекстBase = Неопределено
		ИЛИ (ЗаполненаСтруктураТега(ТегBody) И ТегBase.ПозицияОкончанияТега > ТегBody.ПозицияНачалаТега) Тогда
		ТекстBase = "";
	КонецЕсли;
	
	Возврат ТекстBase;
	
КонецФункции

// Выделяет параметр ссылки mailto.
Функция ВыделитьПараметр(СсылкаMailto, АнализПараметров)
	
	ПервыйСимвол = Сред(СсылкаMailto, 1, 1);
	
	Если ПервыйСимвол = "?" И НЕ АнализПараметров Тогда
		
		АнализПараметров = Истина;
		СсылкаMailto = Сред(СсылкаMailto, 2);
		
	ИначеЕсли ПервыйСимвол = "&" И АнализПараметров Тогда
		
		СсылкаMailto = Сред(СсылкаMailto, 2);
		
	КонецЕсли;
	
	Если АнализПараметров Тогда
		
		ПозицияРазделителя = СтрНайти(СсылкаMailto, "=");
		НаименованиеПараметра = Лев(СсылкаMailto, ПозицияРазделителя - 1);
		СсылкаMailto = Сред(СсылкаMailto, ПозицияРазделителя + 1);
		
	Иначе
		
		НаименованиеПараметра = "to";
		
	КонецЕсли;
	
	Если АнализПараметров Тогда
		
		ЗнакРазделителя = "&";
		
	Иначе
		
		ЗнакРазделителя = "?";
		
	КонецЕсли;
	
	ПозицияРазделителя = СтрНайти(СсылкаMailto, ЗнакРазделителя);
	Если ПозицияРазделителя <> 0 Тогда
		
		ЗначениеПараметра = Лев(СсылкаMailto, ПозицияРазделителя - 1);
		СсылкаMailto = Сред(СсылкаMailto, ПозицияРазделителя);
		
	Иначе
		
		ЗначениеПараметра = СсылкаMailto;
		СсылкаMailto = "";
		
	КонецЕсли;
	
	ВыделенныйПараметр = Новый Структура;
	ВыделенныйПараметр.Вставить("НаименованиеПараметра", НаименованиеПараметра);
	ВыделенныйПараметр.Вставить("ЗначениеПараметра", ЗначениеПараметра);
	
	Возврат ВыделенныйПараметр;
	
КонецФункции

// Добавляет параметр ссылки mailto в структуру.
Процедура ВнестиПараметрВСтруктуру(СтруктураMailto, Знач НаименованиеПараметра, Знач ЗначениеПараметра)
	
	ЗначениеПараметра = РаскодироватьСсылкуMailto(ЗначениеПараметра);
	НаименованиеПараметра = НРег(НаименованиеПараметра);
	Если НаименованиеПараметра = "to" Тогда
		ДобавляемоеНаименованиеПараметра = "АдресатыКому";
		ЗначениеПараметра = ПолучитьМассивПолучателей(ЗначениеПараметра);
		
	ИначеЕсли НаименованиеПараметра = "cc" Тогда
		ДобавляемоеНаименованиеПараметра = "АдресатыКопия";
		ЗначениеПараметра = ПолучитьМассивПолучателей(ЗначениеПараметра);
		
	ИначеЕсли НаименованиеПараметра = "bcc" Тогда
		ДобавляемоеНаименованиеПараметра = "АдресатыСкрытаяКопия";
		ЗначениеПараметра = ПолучитьМассивПолучателей(ЗначениеПараметра);
		
	ИначеЕсли НаименованиеПараметра = "subject" Тогда
		ДобавляемоеНаименованиеПараметра = "ТемаПисьма";
		
	ИначеЕсли НаименованиеПараметра = "body" Тогда
		ДобавляемоеНаименованиеПараметра = "ТекстПисьма";
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураMailto.Вставить(ДобавляемоеНаименованиеПараметра, ЗначениеПараметра);
	
КонецПроцедуры

// Формирует массив получателей ссылки mailto.
Функция ПолучитьМассивПолучателей(СтрокаПочтовыхПолучателей)
	
	МассивАдресов = РаботаСоСтроками.РазложитьСтрокуПочтовыхАдресов(СтрокаПочтовыхПолучателей);
	МассивПолучателей = Новый Массив;
	
	Для каждого ПочтовыйАдресИнфо Из МассивАдресов Цикл
		
		Если ЗначениеЗаполнено(ПочтовыйАдресИнфо.Адрес) Тогда
			СтруктураПочтовогоАдреса = Новый Структура;
			СтруктураПочтовогоАдреса.Вставить("Адрес", ПочтовыйАдресИнфо.Адрес);
			СтруктураПочтовогоАдреса.Вставить("Представление", ПочтовыйАдресИнфо.ОтображаемоеИмя);
			МассивПолучателей.Добавить(СтруктураПочтовогоАдреса);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивПолучателей;
	
КонецФункции

// Раскодирует ссылку mailto.
Функция РаскодироватьСсылкуMailto(СсылкаMailto) Экспорт
	
	РаскодированнаяСтрока = СсылкаMailto;
	
	#Если Сервер Тогда
	РаскодированнаяСтрока = РаскодироватьСтроку(СсылкаMailto, СпособКодированияСтроки.КодировкаURL);
	#Иначе
	РаскодированнаяСсылкаMailto = СтрЗаменить(РаскодированнаяСсылкаMailto, "%0D%0A", Символы.ПС);
	РаскодированнаяСсылкаMailto = СтрЗаменить(РаскодированнаяСсылкаMailto, "%0A", Символы.ПС);
	РаскодированнаяСсылкаMailto = СтрЗаменить(РаскодированнаяСсылкаMailto, "%20", " ");
	РаскодированнаяСсылкаMailto = СтрЗаменить(РаскодированнаяСсылкаMailto, "%3F", "?");
	РаскодированнаяСсылкаMailto = СтрЗаменить(РаскодированнаяСсылкаMailto, "%26", "&");
	РаскодированнаяСсылкаMailto = СтрЗаменить(РаскодированнаяСсылкаMailto, "%22", """");
	РаскодированнаяСсылкаMailto = СтрЗаменить(РаскодированнаяСсылкаMailto, "%3C", "<");
	РаскодированнаяСсылкаMailto = СтрЗаменить(РаскодированнаяСсылкаMailto, "%3E", ">");
	РаскодированнаяСсылкаMailto = СтрЗаменить(РаскодированнаяСсылкаMailto, "%25", "%");
	#КонецЕсли
	
	Возврат РаскодированнаяСтрока;
	
КонецФункции

// Формирует html код ссылки с тегом.
Функция СсылкаСТегом(ПараметрыВыделенияСсылок, Знач Ссылка, Представление)
	
	Если ПараметрыВыделенияСсылок.КодироватьНавигационныеСсылки Тогда
		#Если Сервер Тогда
		Ссылка = КодироватьСтроку(Ссылка, СпособКодированияСтроки.URLВКодировкеURL);
		#Иначе
		ЗаменитьСпецСимволыHTML(Ссылка);
		#КонецЕсли
	КонецЕсли;
	
	Если Не СтрНайти(Ссылка, """") Тогда
		СсылкаСТегом = "<a href=""" + Ссылка + """>" + Представление + "</a>";
	ИначеЕсли Не СтрНайти(Ссылка, "'") Тогда
		СсылкаСТегом = "<a href='" + Ссылка + "'>" + Представление + "</a>";
	Иначе
		Если Не ПараметрыВыделенияСсылок.КодироватьНавигационныеСсылки Тогда
			ЗаменитьСпецСимволыHTMLОбратно(Ссылка);
			ЗаменитьСпецСимволыHTML(Ссылка);
		КонецЕсли;
		СсылкаСТегом = "<a href=""" + Ссылка + """>" + Представление + "</a>";
	КонецЕсли;
	
	Возврат СсылкаСТегом;
	
КонецФункции

#КонецОбласти