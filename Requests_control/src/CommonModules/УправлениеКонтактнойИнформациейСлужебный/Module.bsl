////////////////////////////////////////////////////////////////////////////////////////////////////
// Подсистема "Контактная информация".
// 
////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	
КонецПроцедуры

// Возвращает представление контактной информации, сформированное из адреса в формате XML.
//
// Параметры:
//   XMLСтрока    -  Строка - Адрес в формат XML .
//   ФорматКонтактнойИнформации  - Строка             - если указано "КЛАДР", то в представление адреса 
//                                        не включаются округ и внутригородской район.
//    ВидКонтактнойИнформации - Структура - дополнительные параметры формирования представления для адресов:
//      * Тип - Строка - Тип контактной информации;
//      * ВключатьСтрануВПредставление - Булево - в представление будет включена страна адреса;
//      * ФорматАдреса                 - Строка - если указано "КЛАДР", то в представление адреса 
//                                                не включаются округ и внутригородской район.
// Возвращаемое значение:
//      Строка - сформированное представление.
//
Функция ПредставлениеКонтактнойИнформации(Знач XMLСтрока, Знач ФорматКонтактнойИнформации) Экспорт
	
	//ЭтоСтрока = ТипЗнч(XMLСтрока) = Тип("Строка");
	//Если ЭтоСтрока И Не УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(XMLСтрока) Тогда
	//	// Предыдущий формат значений полей, возвращаем саму строку.
	//	Возврат XMLСтрока;
	//КонецЕсли;
	
	Вид = Новый Структура("Тип,ВключатьСтрануВПредставление,ФорматАдреса", "", Ложь, "КЛАДР");
	//Если ФорматКонтактнойИнформации = Неопределено Тогда
	//	Вид.Тип = ТипКонтактнойИнформации(?(ЭтоСтрока, XMLСтрока, КонтактнаяИнформацияИзXML(XMLСтрока)));
	//Иначе
		ЗаполнитьЗначенияСвойств(Вид, ФорматКонтактнойИнформации);
	//КонецЕсли;
	
	//ОбъектXDTO = КонтактнаяИнформацияИзXML(XMLСтрока);
	//Если Не ПустаяСтрока(ОбъектXDTO.Представление) И Вид.ФорматАдреса = "ФИАС" Тогда
	//	Возврат ОбъектXDTO.Представление; // Возвращаем ранее сформированное представление.
	//КонецЕсли;
	
	Возврат СформироватьПредставлениеКонтактнойИнформации(XMLСтрока, Вид);
	
КонецФункции

// Формирует и возвращает представление контактной информации.
//
// Параметры:
//   Информация    - ОбъектXDTO, Строка - контактная информация.
//   ВидИнформации - СправочникСсылка.ВидыКонтактнойИнформации, Структура - параметры для формирования представления.
//   ФорматАдреса  - Строка             - если указано "КЛАДР", то в представление адреса 
//                                        не включаются округ и внутригородской район.
//
// Возвращаемое значение:
//      Строка - сформированное представление.
//
Функция СформироватьПредставлениеКонтактнойИнформации(Информация, ВидИнформации) Экспорт
	
	//Если ТипЗнч(Информация) = Тип("ОбъектXDTO") Тогда
		Если Информация.Состав = Неопределено Тогда
			Возврат Информация.Представление;
		КонецЕсли;
		
		ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
		ТипИнформации    = Информация.Состав.Тип();
		Если ТипИнформации = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
			Возврат ПредставлениеАдреса(Информация.Состав, ВидИнформации);
			
		ИначеЕсли ТипИнформации = ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона") Тогда
			ПредставлениеТелефона = ПредставлениеТелефона(Информация.Состав);
			Возврат ?(ПустаяСтрока(ПредставлениеТелефона), Информация.Представление, ПредставлениеТелефона);
			
		ИначеЕсли ТипИнформации = ФабрикаXDTO.Тип(ПространствоИмен, "НомерФакса") Тогда
			ПредставлениеФакса = ПредставлениеТелефона(Информация.Состав);
			Возврат ?(ПустаяСтрока(ПредставлениеТелефона), Информация.Представление, ПредставлениеФакса);
			
		ИначеЕсли ТипИнформации = ФабрикаXDTO.Тип(ПространствоИмен, "ЭлектроннаяПочта") Тогда
			Возврат Строка(Информация.Состав.Значение);
		КонецЕсли;
		
		//// Заглушка на другие типы
		Возврат Строка(Информация.Состав.Значение);
	//КонецЕсли;
	
	//// Старый формат или новый десериализованный.
	//Если ВидИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
	//	НоваяИнфо = АдресXMLВXDTO(Информация,,Перечисления.ТипыКонтактнойИнформации.Адрес);
	//	Возврат СформироватьПредставлениеКонтактнойИнформации(НоваяИнфо, ВидИнформации);
	//КонецЕсли;
	//
	//Возврат СокрЛП(Информация);
КонецФункции

//  Возвращает флаг того, что переданный адрес - российский.
//
//  Параметры:
//      XDTOАдрес - ОбъектXDTO - Контактная информация или XDTO адреса.
//
//  Возвращаемое значение:
//      Булево - результат проверки.
//
Функция ЭтоРоссийскийАдрес(XDTOАдрес) Экспорт
	Возврат РоссийскийАдрес(XDTOАдрес) <> Неопределено;
КонецФункции

//  Возвращает извлеченный XDTO российского адреса или Неопределено для адреса иностранного.
//
//  Параметры:
//      ОбъектИнформации - ОбъектXDTO - Контактная информация или XDTO адреса.
//
//  Возвращаемое значение:
//      ОбъектXDTO - российский адрес.
//      Неопределено - нет российского адреса.
//
Функция РоссийскийАдрес(ОбъектИнформации) Экспорт
	Результат = Неопределено;
	ТипXDTO   = Тип("ОбъектXDTO");
	
	Если ТипЗнч(ОбъектИнформации) = ТипXDTO Тогда
		ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
		
		Если ОбъектИнформации.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация") Тогда
			Адрес = ОбъектИнформации.Состав;
		Иначе
			Адрес = ОбъектИнформации;
		КонецЕсли;
		
		Если ТипЗнч(Адрес) = ТипXDTO И Адрес.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
			Адрес = Адрес.Состав;
		КонецЕсли;
		
		Если ТипЗнч(Адрес) = ТипXDTO И Адрес.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "АдресРФ") Тогда
			Результат = Адрес;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Читает дополнительные элемент адреса по его пути.
//
//  Параметры:
//      XDTOАдрес     - ОбъектXDTO - Контактная информация или XDTO адреса.
//      XPathЭлемента -  Строка - Путь к элементу.
//
//  Возвращаемое значение:
//      Строка - значение элемента.
Функция ДополнительныйЭлементАдреса(XDTOАдрес, XPathЭлемента)
	
	АдресРФ = РоссийскийАдрес(XDTOАдрес);
	Если АдресРФ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = АдресРФ.Получить(XPathЭлемента);
	Если Результат <> Неопределено Тогда
		Возврат Результат.Значение;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

//  Читает и устанавливает район адреса.
//
//  Параметры:
//      XDTOАдрес     - ОбъектXDTO - Контактная информация или XDTO адреса.
//      НовоеЗначение - Строка - устанавливаемое значение.
//
//  Возвращаемое значение:
//      Строка - новое значение.
//
Функция РайонАдреса(XDTOАдрес, НовоеЗначение = Неопределено)
	
	//Если НовоеЗначение = Неопределено Тогда
	//	// Чтение
	//	
		Результат = Неопределено;
		ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
		
		XDTOТип = XDTOАдрес.Тип();
		Если XDTOТип = ФабрикаXDTO.Тип(ПространствоИмен, "АдресРФ") Тогда
			АдресРФ = XDTOАдрес;
		Иначе
			АдресРФ = XDTOАдрес.Состав;
		КонецЕсли;
		
		Если ТипЗнч(АдресРФ) = Тип("ОбъектXDTO") Тогда
			Возврат ПолучитьXDTOРеквизитОбъекта(АдресРФ, УправлениеКонтактнойИнформациейКлиентСервер.XPathРайона());
		КонецЕсли;
		
		Возврат Неопределено;
	//КонецЕсли;
	
	//// Запись
	//Запись = СвРайМО(XDTOАдрес);
	//Запись.Район = НовоеЗначение;
	//Возврат НовоеЗначение;
КонецФункции

//  Читает и устанавливает здания и помещения адреса. 
//
//  Параметры:
//      XDTOАдрес     - ОбъектXDTO - Контактная информация или XDTO адреса.
//      НовоеЗначение - Структура  - устанавливаемое значение. Ожидаются поля:
//                          * Здания - ТаблицаЗначений с колонками:
//                                        ** Тип      - Строка - тип внутреннего классификатора дополнительных адресных
//                                                               объектов. Например "Корпус".
//                                        ** Значение - Строка  - значение номера дома, квартиры и т.п.
//                          * Помещения - ТаблицаЗначений с колонками, аналогично полю Здание.
//
//  Возвращаемое значение:
//      Структура - текущие данные. Содержит поля:
//          * Здания - ТаблицаЗначений с колонками:
//                        ** Тип        - Строка - тип внутреннего классификатора дополнительных адресных объектов.
//                                                 Например "Корпус".
//                        ** Сокращение - Строка - сокращение названия для использования в представлении.
//                        ** Значение   - Строка - значение номера дома, квартиры и т.п.
//                        ** ПутьXPath  - Строка - путь к значению объекта.
//          * Помещения - ТаблицаЗначений с колонками, аналогично полю Здание.
//
Функция ЗданияИПомещенияАдреса(XDTOАдрес, НовоеЗначение = Неопределено) Экспорт
	
	Результат = Новый Структура("Здания, Помещения", 
		ТаблицаЗначений("Тип, Значение, Сокращение, ПутьXPath, Вид", "Тип, Вид"),
		ТаблицаЗначений("Тип, Значение, Сокращение, ПутьXPath, Вид", "Тип, Вид"));
	
	АдресРФ = РоссийскийАдрес(XDTOАдрес);
	Если АдресРФ = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	//Если НовоеЗначение <> Неопределено Тогда
	//	// Запись
	//	Если НовоеЗначение.Свойство("Здания") Тогда
	//		Для Каждого Строка Из НовоеЗначение.Здания Цикл
	//			ВставитьЗданиеПомещение(XDTOАдрес, Строка.Тип, Строка.Значение);
	//		КонецЦикла;
	//	КонецЕсли;
	//	Если НовоеЗначение.Свойство("Помещения") Тогда
	//		Для Каждого Строка Из НовоеЗначение.Помещения Цикл
	//			ВставитьЗданиеПомещение(XDTOАдрес, Строка.Тип, Строка.Значение);
	//		КонецЦикла;
	//	КонецЕсли;
	//	Возврат НовоеЗначение
	//КонецЕсли;
	//
	// Чтение
	Для Каждого ДопЭлемент Из АдресРФ.ДопАдрЭл Цикл
		Если ДопЭлемент.Номер <> Неопределено Тогда
			КодОбъекта = ДопЭлемент.Номер.Тип;
			ТипОбъекта = УправлениеКонтактнойИнформациейКлиентСервер.ТипОбъектаПоКодуСериализации(КодОбъекта);
			Если ТипОбъекта <> Неопределено Тогда
				Вид = ТипОбъекта.Тип;
				Если Вид = 1 Или Вид = 2 Тогда
					НоваяСтрока = Результат.Здания.Добавить();
				ИначеЕсли Вид = 3 Тогда
					НоваяСтрока = Результат.Помещения.Добавить();
				Иначе
					НоваяСтрока = Неопределено;
				КонецЕсли;
				Если НоваяСтрока <> Неопределено Тогда
					НоваяСтрока.Тип        = ТипОбъекта.Наименование;
					НоваяСтрока.Значение   = ДопЭлемент.Номер.Значение;
					НоваяСтрока.Сокращение = ТипОбъекта.Сокращение;
					НоваяСтрока.ПутьXPath  = УправлениеКонтактнойИнформациейКлиентСервер.XPathНомераДополнительногоОбъектаАдресации(НоваяСтрока.Тип);
					НоваяСтрока.Вид        = Вид;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Результат.Здания.Сортировать("Вид");
	Результат.Помещения.Сортировать("Вид");
	
	Возврат Результат;
КонецФункции

// Формирует представление для адреса по правилу:
// 1) Страна, если надо.
// 2) Индекс, субъект рф, округ, район, город, внутригородской район, населенный пункт, улица.
// 3) Здания, помещения
//
Функция ПредставлениеАдреса(Знач XDTOАдрес, Знач ВидИнформации) Экспорт
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	АдресРФ          = XDTOАдрес.Состав;
	Страна           = СокрЛП(XDTOАдрес.Страна);
	Если ЭтоРоссийскийАдрес(АдресРФ) Тогда
		
		// Значимые части
		Адрес = Новый Массив;
		Адрес.Добавить(ДополнительныйЭлементАдреса(АдресРФ, УправлениеКонтактнойИнформациейКлиентСервер.XPathПочтовогоИндекса()));
		Адрес.Добавить(АдресРФ.СубъектРФ);
		Если ВидИнформации.ФорматАдреса = "ФИАС" Тогда
			Адрес.Добавить(АдресРФ.Округ);
		КонецЕсли;
		Адрес.Добавить(РайонАдреса(АдресРФ));
		Адрес.Добавить(АдресРФ.Город);
		Если ВидИнформации.ФорматАдреса = "ФИАС" Тогда
			Адрес.Добавить(АдресРФ.ВнутригРайон);
		КонецЕсли;
		Адрес.Добавить(АдресРФ.НаселПункт);
		Адрес.Добавить(АдресРФ.Улица);
		
		ДополнительныйЭлементАдреса = ДополнительныйЭлементАдреса(АдресРФ, УправлениеКонтактнойИнформациейКлиентСервер.XPathДополнительногоОбъектаАдресации(90, "СНТ"));
		Если ДополнительныйЭлементАдреса = Неопределено Тогда
			ДополнительныйЭлементАдреса = ДополнительныйЭлементАдреса(АдресРФ, УправлениеКонтактнойИнформациейКлиентСервер.XPathДополнительногоОбъектаАдресации(90, "ГСК"));
			Если ДополнительныйЭлементАдреса = Неопределено Тогда
				ДополнительныйЭлементАдреса = ДополнительныйЭлементАдреса(АдресРФ, УправлениеКонтактнойИнформациейКлиентСервер.XPathДополнительногоОбъектаАдресации(90, "ТЕР"));
				Если ДополнительныйЭлементАдреса = Неопределено Тогда
					ДополнительныйЭлементАдреса = ДополнительныйЭлементАдреса(АдресРФ, УправлениеКонтактнойИнформациейКлиентСервер.XPathДополнительногоОбъектаАдресации(90));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Адрес.Добавить(ДополнительныйЭлементАдреса);
		Адрес.Добавить(ДополнительныйЭлементАдреса(АдресРФ, УправлениеКонтактнойИнформациейКлиентСервер.XPathДополнительногоОбъектаАдресации(91)));
		
		Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПолноеНаименование(Адрес);
	
		// Строения и помещения
		НомерНеВыведен = Истина;
		Данные = ЗданияИПомещенияАдреса(АдресРФ);
		Для Каждого Строка Из Данные.Здания Цикл
			Здания = Новый Массив;
			Здания.Добавить(Представление); 
			Здания.Добавить(СокрЛП(Строка.Сокращение + ?(НомерНеВыведен, " № ", " ") + Строка.Значение));
			Представление =  УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПолноеНаименование(Здания);
			НомерНеВыведен = Ложь;
		КонецЦикла;
		
		Для Каждого Строка Из Данные.Помещения Цикл
			Помещения = Новый Массив;
			Помещения.Добавить(Представление);
			Помещения.Добавить(СокрЛП(Строка.Сокращение + " " + Строка.Значение));
			Представление =  УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПолноеНаименование(Помещения);
		КонецЦикла;
		
		// При пустом представлении страну нет смысла выводить.
		Если ПустаяСтрока(Представление) Тогда
			Страна = "";
		КонецЕсли;
	Иначе
		// Это иностранный адрес
		Представление = СокрЛП(АдресРФ);
		
		Если СтрЧислоВхождений(Представление, ",") = 9 Тогда
			// Удаляем пустые значения и страну
			ПредставлениеМассивом = СтрРазделить(Представление, ",", Ложь);
			Если ПредставлениеМассивом.Количество() > 0 Тогда
				Для Индекс = 0 По ПредставлениеМассивом.ВГраница() Цикл
					ПредставлениеМассивом[Индекс] = СокрЛП(ПредставлениеМассивом[Индекс]);
				КонецЦикла;
				ПредставлениеМассивом.Удалить(0); // удаляем страну
				Представление = СтрСоединить(ПредставлениеМассивом, ", ");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидИнформации.ВключатьСтрануВПредставление Тогда
		ДобавлениеСтраны = Новый Массив;
		ДобавлениеСтраны.Добавить(Страна);
		ДобавлениеСтраны.Добавить(Представление);
		Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПолноеНаименование(ДобавлениеСтраны);
	КонецЕсли;
	Возврат Представление;
	
КонецФункции

//  Возвращает представление телефона.
//
//  Параметры:
//      XDTOДанные    - ОбъектXDTO - контактная информация.
//
// Возвращаемое значение:
//      Строка - представление.
//
Функция ПредставлениеТелефона(XDTOДанные) Экспорт
	
	Возврат УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(
		СократитьНеЦифры(XDTOДанные.КодСтраны), 
		XDTOДанные.КодГорода,
		XDTOДанные.Номер,
		XDTOДанные.Добавочный,
		"");
		
КонецФункции

// Конструктор таблицы значений.
//
Функция ТаблицаЗначений(СписокКолонок, СписокИндексов = "")
	ТаблицаРезультата = Новый ТаблицаЗначений;
	
	Для Каждого КлючЗначение Из (Новый Структура(СписокКолонок)) Цикл
		ТаблицаРезультата.Колонки.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	СтрокиИндексов = СтрЗаменить(СписокИндексов, "|", Символы.ПС);
	Для НомерИндекса = 1 По СтрЧислоСтрок(СтрокиИндексов) Цикл
		КолонкиИндекса = СокрЛП(СтрПолучитьСтроку(СтрокиИндексов, НомерИндекса));
		Для Каждого КлючЗначение Из (Новый Структура(КолонкиИндекса)) Цикл
			ТаблицаРезультата.Индексы.Добавить(КлючЗначение.Ключ);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаРезультата;
КонецФункции

Функция СократитьНеЦифры(Текст, ДопустимоКромеЦифр = "", Направление = Истина)
	
	Длина = СтрДлина(Текст);
	Если Направление Тогда
		// Сокращение слева
		Индекс = 1;
		Конец  = 1 + Длина;
		Шаг    = 1;
	Иначе
		// Сокращение справа    
		Индекс = Длина;
		Конец  = 0;
		Шаг    = -1;
	КонецЕсли;
	
	Пока Индекс <> Конец Цикл
		Символ = Сред(Текст, Индекс, 1);
		ЭтоЦифра = (Символ >= "0" И Символ <= "9") Или СтрНайти(ДопустимоКромеЦифр, Символ) = 0;
		Если ЭтоЦифра Тогда
			Прервать;
		КонецЕсли;
		Индекс = Индекс + Шаг;
	КонецЦикла;
	
	Если Направление Тогда
		// Сокращение слева
		Возврат Прав(Текст, Длина - Индекс + 1);
	КонецЕсли;
	
	// Сокращение справа
	Возврат Лев(Текст, Индекс);
	
КонецФункции

// Получение глубокого свойства объекта.
//
Функция ПолучитьXDTOРеквизитОбъекта(ОбъектXTDO, XPath) Экспорт
	
	// Переносов строки в XPath не ожидаем.
	СтрокаСвойств = СтрЗаменить(СтрЗаменить(XPath, "/", Символы.ПС), Символы.ПС + Символы.ПС, "/");
	
	ЧислоСвойств = СтрЧислоСтрок(СтрокаСвойств);
	Если ЧислоСвойств = 1 Тогда
		Результат = ОбъектXTDO.Получить(СтрокаСвойств);
		Если ТипЗнч(Результат) = Тип("ОбъектXDTO") Тогда 
			Возврат Результат.Значение;
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	Результат = ?(ЧислоСвойств = 0, Неопределено, ОбъектXTDO);
	Для Индекс = 1 По ЧислоСвойств Цикл
		Результат = Результат.Получить(СтрПолучитьСтроку(СтрокаСвойств, Индекс));
		Если Результат = Неопределено Тогда 
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

#КонецОбласти
