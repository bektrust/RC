// Возвращает список наименований стандартных разделов поиска
//
Функция ПолучитьСтандартныеРазделыПоиска() Экспорт
	
	НаименованияСтандартныхРазделов = ПолучитьНаименованияСтандартныхРазделовПоиска();
	Результат = Новый СписокЗначений;
	Для каждого Наименование Из НаименованияСтандартныхРазделов Цикл
		Результат.Добавить(ПолучитьСтандартныйРазделПоискаПоНаименованию(Наименование), Наименование);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает имена стандартных разделов поиска
Функция ПолучитьНаименованияСтандартныхРазделовПоиска() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(НСтр("ru = 'Документы и файлы'"));
	Результат.Добавить(НСтр("ru = 'Файлы'"));
	Результат.Добавить(НСтр("ru = 'Процессы и задачи'"));
	Результат.Добавить(НСтр("ru = 'Внутренние документы, без файлов'"));
	Результат.Добавить(НСтр("ru = 'Входящие документы, без файлов'"));
	Результат.Добавить(НСтр("ru = 'Исходящие документы, без файлов'"));
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак того, что передано наименование стандартного раздела поиска.
//
Функция ЭтоСтандартныйРазделПоиска(Наименование) Экспорт
	
	НаименованияСтандартныхРазделов = ПолучитьНаименованияСтандартныхРазделовПоиска();
	Возврат НаименованияСтандартныхРазделов.Найти(Наименование) <> Неопределено;
	
КонецФункции

// Возвращает массив метаданных для предопределенного раздела поиска
//
Функция ПолучитьСтандартныйРазделПоискаПоНаименованию(Наименование) Экспорт
	
	Результат = Новый Массив;
	Если ВРег(Наименование) = ВРег(НСтр("ru = 'Документы и файлы'")) Тогда
		Результат.Добавить("Метаданные.Справочники.ВходящиеДокументы");
		Результат.Добавить("Метаданные.Справочники.ИсходящиеДокументы");
		Результат.Добавить("Метаданные.Справочники.ВнутренниеДокументы");
		Результат.Добавить("Метаданные.Справочники.Файлы");
		Результат.Добавить("Метаданные.Справочники.ВерсииФайлов");
		
	ИначеЕсли ВРег(Наименование) = ВРег(НСтр("ru = 'Файлы'")) Тогда
		Результат.Добавить("Метаданные.Справочники.Файлы");
		Результат.Добавить("Метаданные.Справочники.ВерсииФайлов");
		
	ИначеЕсли ВРег(Наименование) = ВРег(НСтр("ru = 'Процессы и задачи'")) Тогда
		Результат.Добавить("Метаданные.Задачи.ЗадачаИсполнителя");
		Результат.Добавить("Метаданные.БизнесПроцессы.Исполнение");
		Результат.Добавить("Метаданные.БизнесПроцессы.ОбработкаВнутреннегоДокумента");
		Результат.Добавить("Метаданные.БизнесПроцессы.ОбработкаВходящегоДокумента");
		Результат.Добавить("Метаданные.БизнесПроцессы.ОбработкаИсходящегоДокумента");
		Результат.Добавить("Метаданные.БизнесПроцессы.Ознакомление");
		Результат.Добавить("Метаданные.БизнесПроцессы.Поручение");
		Результат.Добавить("Метаданные.БизнесПроцессы.Рассмотрение");
		Результат.Добавить("Метаданные.БизнесПроцессы.Регистрация");
		Результат.Добавить("Метаданные.БизнесПроцессы.Согласование");
		Результат.Добавить("Метаданные.БизнесПроцессы.Утверждение");
		
	ИначеЕсли ВРег(Наименование) = ВРег(НСтр("ru = 'Внутренние документы, без файлов'")) Тогда
		Результат.Добавить("Метаданные.Справочники.ВнутренниеДокументы");
		
	ИначеЕсли ВРег(Наименование) = ВРег(НСтр("ru = 'Входящие документы, без файлов'")) Тогда
		Результат.Добавить("Метаданные.Справочники.ВходящиеДокументы");
		
	ИначеЕсли ВРег(Наименование) = ВРег(НСтр("ru = 'Исходящие документы, без файлов'")) Тогда
		Результат.Добавить("Метаданные.Справочники.ИсходящиеДокументы");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру настроек поиска по умолчанию
//
Функция ПолучитьНастройкиПоискаПоУмолчанию() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИскатьСочетанияСлов", 0);
	Результат.Вставить("РезультатовНаСтранице", 20);
	Результат.Вставить("ОтображатьТекстовоеОписание", Истина);
	Результат.Вставить("ОтображатьДополнительнуюИнформацию", Истина);
	Результат.Вставить("ВыделятьСловаЦветом", Ложь);
	Результат.Вставить("ИскатьСловаСОшибками", Ложь);
	Результат.Вставить("ПорогНечеткости", 20);
	Результат.Вставить("РазделыПоиска", ПолучитьСтандартныеРазделыПоиска());
	
	Возврат Результат;
	
КонецФункции

// Возвращает строку с дополнительной информацией по объекту
//
Функция ПолучитьДополнительнуюИнформациюПоОбъекту(Ссылка) Экспорт
	
	ТипЗначения = ТипЗнч(Ссылка);
	Если Не (Справочники.ТипВсеСсылки().СодержитТип(ТипЗначения)
		Или Документы.ТипВсеСсылки().СодержитТип(ТипЗначения)
		Или Задачи.ТипВсеСсылки().СодержитТип(ТипЗначения)
		Или БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипЗначения)) Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = "";
	
	Если ТипЗначения = Тип("СправочникСсылка.ВерсииФайлов") Тогда
		Владелец = ПолучитьЗначениеРеквизитаБезопасно(Ссылка, "Владелец", "");
		Если ЗначениеЗаполнено(Владелец) Тогда
			Файл = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Файл: %1'"), Владелец);
			ДобавитьЗначениеКСтрокеЧерезРазделитель(Результат, "; ", Файл);
		КонецЕсли;
	КонецЕсли;
	
	ИнформацияОВладельце = "";
	Папка = "";
	Владелец = "";
	Если ТипЗначения = Тип("СправочникСсылка.Файлы") Тогда
		ВладелецФайла = ПолучитьЗначениеРеквизитаБезопасно(Ссылка, "ВладелецФайла", "");
		//Если ЗначениеЗаполнено(ВладелецФайла) Тогда
		//	Если ДоговорныеДокументыКлиентСервер.ЭтоДоговорнойДокумент(ВладелецФайла) Тогда
				Владелец = Строка(ВладелецФайла);
		//	КонецЕсли;
		//КонецЕсли;
		
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.ВерсииФайлов") Тогда
		ВладелецВерсии = ПолучитьЗначениеРеквизитаБезопасно(Ссылка, "Владелец", "");
		Если ЗначениеЗаполнено(ВладелецВерсии) Тогда
			ВладелецФайла = ПолучитьЗначениеРеквизитаБезопасно(ВладелецВерсии, "ВладелецФайла", "");
			//Если ЗначениеЗаполнено(ВладелецФайла) Тогда
			//	Если ДоговорныеДокументыКлиентСервер.ЭтоДоговорнойДокумент(ВладелецФайла) Тогда
					Владелец = Строка(ВладелецФайла);
			//	КонецЕсли;
			//КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(Папка) Тогда
		Папка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Папка: %1'"), Папка);
		ДобавитьЗначениеКСтрокеЧерезРазделитель(Результат, "; ", Папка);
	КонецЕсли;
	
	Если Не ПустаяСтрока(Владелец) Тогда
		Владелец = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Принадлежит документу: %1'"), Владелец);
		ДобавитьЗначениеКСтрокеЧерезРазделитель(Результат, "; ", Владелец);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Принимает массив ссылок на объекты - результаты поиска
// Возвращает соответствие с дополнительной информацией по объектам
//
Функция ПолучитьДополнительнуюИнформациюПоОбъектам(Массив) Экспорт
	
	Результат = Новый Соответствие;
	Для каждого Элемент Из Массив Цикл
		Результат.Вставить(Элемент, ПолучитьДополнительнуюИнформациюПоОбъекту(Элемент));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЗначениеРеквизитаБезопасно(Ссылка, ИмяРеквизита, ЗначениеПриОшибке = Неопределено)
	
	Попытка
		ЗначениеРеквизита = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	Исключение
		ЗначениеРеквизита = ЗначениеПриОшибке;
	КонецПопытки;
	
	Возврат ЗначениеРеквизита;
	
КонецФункции
