////////////////////////////////////////////////////////////////////////////////
// Модуль для работы с сообщениями.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Выполняет запуск фонового задания рассылки сообщений.
//
Процедура ЗапуститьРассылкуСообщений() Экспорт
	
	РаботаССообщениями.ЗапуститьРассылкуСообщений();
	
КонецПроцедуры

// Выполняет запуск фонового задания формирования сообщений.
//
Процедура ЗапуститьФормированиеСообщений() Экспорт
	
	РаботаССообщениями.ЗапуститьФормированиеСообщений();
	
КонецПроцедуры

// Выполняет запись обновленной информации о каталоге программы пользователя.
//
Процедура ОбновитьИнформациюОКаталогеПрограммы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
	КаталогПрограммы = КаталогПрограммы();
	
	ТекущийПользовательОбъект = ТекущийПользователь.ПолучитьОбъект();
	КоличествоЭлементов = ТекущийПользовательОбъект.Клиенты.Количество();
	Для Инд = 1 По КоличествоЭлементов Цикл
		Строка = ТекущийПользовательОбъект.Клиенты[КоличествоЭлементов - Инд];
		Если Строка.ИдентификаторКлиента <> ИдентификаторКлиента Тогда
			Продолжить;
		КонецЕсли;
		ТекущийПользовательОбъект.Клиенты.Удалить(Строка);
	КонецЦикла;
	НоваяСтрока = ТекущийПользовательОбъект.Клиенты.Добавить();
	НоваяСтрока.ИдентификаторКлиента = ИдентификаторКлиента;
	НоваяСтрока.КаталогПрограммы = КаталогПрограммы;
	ТекущийПользовательОбъект.Записать();
	
КонецПроцедуры

// Выполняет обновление использования создания сообщений.
Функция ОбновитьИспользованиеСозданияСообщений() Экспорт
	
	ИзмененоЗначениеИспользования = РаботаССообщениями.ОбновитьИспользованиеСозданияСообщений();
	
	Возврат ИзмененоЗначениеИспользования;
	
КонецФункции

#КонецОбласти