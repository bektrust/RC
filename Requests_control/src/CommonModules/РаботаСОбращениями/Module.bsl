
Функция НомерДокументаУникален(Объект) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	// ручная нумерация
	Нумератор = Нумерация.ПолучитьНумераторДокумента(Объект);
	Если Не ЗначениеЗаполнено(Нумератор) Тогда
		Если НРег(Объект.НомерДокумента) = НСтр("ru = 'б\н'") 
		 Или НРег(Объект.НомерДокумента) = НСтр("ru = 'б/н'") Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Справочник.Ссылка
	|ИЗ
	|	Справочник.Обращения КАК Справочник
	|ГДЕ
	|	Справочник.НомерДокумента = &НомерДокумента
	|	И Справочник.ДатаДокумента МЕЖДУ &НачалоПериодаНумерации И &КонецПериодаНумерации
	|	И Справочник.ВидОбращения = &ВидДокумента
	|	И Справочник.Ссылка <> &Ссылка
	|	И Не Справочник.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("НомерДокумента", Объект.НомерДокумента);
	Запрос.УстановитьПараметр("НачалоПериодаНумерации", НачалоГода(Объект.ДатаДокумента));
	Запрос.УстановитьПараметр("КонецПериодаНумерации", КонецГода(Объект.ДатаДокумента));
	Запрос.УстановитьПараметр("ВидДокумента", Объект.ВидОбращения);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

// Заполняет список (таблицу значений) файлов в карточке документа.
//
// Параметры:
//   Форма                    - УправляемаяФорма - форма документа, в котором заполняется список файлов
//   ЭтоСписок                - Булево - Истина, если обращение к функции выполняется из списка документов
//
Процедура ЗаполнитьСписокФайловДокумента(Форма, ЭтоСписок = Ложь) Экспорт 
	
	Если ЭтоСписок Тогда 
		Документ = Форма.ТекущийДокумент;
	Иначе 
		Документ = Форма.Объект;
	КонецЕсли;
	
	Если Документ.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	МассивФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(
		Документ.Ссылка, 
		Форма.ПоказыватьУдаленныеФайлы,
		Истина); // НеПоказыватьОтветные
		
	ТаблицаФайлы = ПолучитьДанныеФайловДляСписка(МассивФайлов);
	
	Форма.ЗначениеВРеквизитФормы(ТаблицаФайлы, "Файлы");
	Форма.КоличествоФайлов = Форма.Файлы.Количество();
	
КонецПроцедуры

// Получает данные одного файла для обновления строки списка в карточке документа
//
// Параметры
//    Файл - СправочникСсылка.Файлы - ссылка на файл
//
// Возвращаемое значение
//    Структура - структура реквизитов файла
//
Функция ПолучитьДанныеФайлаДляСписка(Файл) Экспорт 
	
	СтруктураДанных = Новый Структура;
	
	Файлы = Новый Массив;
	Файлы.Добавить(Файл);
	
	Таблица = ПолучитьДанныеФайловДляСписка(Файлы);
	
	Для Инд = 0 По Таблица.Колонки.Количество()-1 Цикл
		ИмяКолонки = Таблица.Колонки[Инд].Имя;
		
		Если Таблица.Количество() > 0 Тогда 
			СтруктураДанных.Вставить(ИмяКолонки, Таблица[0][Инд]);
		Иначе
			СтруктураДанных.Вставить(ИмяКолонки);
		КонецЕсли;
	КонецЦикла;	
	
	Возврат СтруктураДанных;
	
КонецФункции

// Получает данные нескольких файла для обновления строк списка в карточке документа
//
// Параметры
//    Файлы - массив - массив ссылок на файлы
//
// Возвращаемое значение
//    ТаблицаЗначений - таблица с реквизитами файлов
//
Функция ПолучитьДанныеФайловДляСписка(Файлы) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Наименование КАК Наименование,
	|	ПОДСТРОКА(Файлы.Описание, 0, 140) КАК Описание,
	|	Файлы.Ссылка,
	|	Файлы.ДатаСоздания,
	|	Файлы.Автор,
	|	Файлы.Редактирует,
	|	Файлы.ХранитьВерсии,
	|	Файлы.ПометкаУдаления,
	|	Файлы.ТекущаяВерсияРазмер / 1024 КАК ТекущаяВерсияРазмер,
	|	Файлы.ТекущаяВерсияРазмер КАК Размер,
	|	Файлы.ТекущаяВерсияДатаСоздания КАК ТекущаяВерсияДатаСоздания,
	|	Файлы.ТекущаяВерсияАвтор КАК ТекущаяВерсияАвтор,
	|	ВЫБОР
	|		КОГДА Файлы.ПометкаУдаления
	|			ТОГДА Файлы.ИндексКартинки + 1
	|		ИНАЧЕ Файлы.ИндексКартинки
	|	КОНЕЦ КАК ИндексКартинки,
	|	ВЫБОР
	|		КОГДА Файлы.Редактирует = &ТекущийПользователь
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РедактируетТекущийПользователь,
	|	Файлы.ТекущаяВерсияРасширение КАК Расширение,
	|	ВЫБОР
	|		КОГДА Файлы.ШаблонОснованиеДляСоздания = ЗНАЧЕНИЕ(Справочник.Файлы.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СозданИзШаблона,
	|	ПОДСТРОКА("""", 0, 255) КАК ПолноеИмяФайлаВРабочемКаталоге,
	|	ДАТАВРЕМЯ(2000, 1, 1, 1, 1, 1) КАК ДатаМодификацииУниверсальнаяВБазе
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
	|		ПО Файлы.Ссылка = КешИнформацииОбОбъектах.Объект
	|ГДЕ
	|	Файлы.Ссылка В(&Файлы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("Файлы", Файлы);
	Запрос.УстановитьПараметр("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь());
	
	ТаблицаФайлов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ФайлыПисьмаСтрока Из ТаблицаФайлов Цикл
	
		Если ФайлыПисьмаСтрока.РедактируетТекущийПользователь = Истина 
				И ЗначениеЗаполнено(ФайлыПисьмаСтрока.Ссылка) Тогда
				
			ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(
				ФайлыПисьмаСтрока.Ссылка);
			ФайлыПисьмаСтрока.ПолноеИмяФайлаВРабочемКаталоге = ДанныеФайла.ПолноеИмяФайлаВРабочемКаталоге;	
			ФайлыПисьмаСтрока.ДатаМодификацииУниверсальнаяВБазе = ДанныеФайла.ДатаМодификацииУниверсальная;
						
		КонецЕсли;	
		
	КонецЦикла;
			
	Возврат ТаблицаФайлов;
	
КонецФункции

// Помечает переданные в массиве файлы на удаление
//
// Параметры
//   Форма           - УправляемаяФорма - форма документа, в котором файлы помечаются на удаление
//   МассивФайлов    - Массив - массив обрабатываемых файлов
//   ПометкаУдаления - Булево - признак снятия/установки пометки на удаление
//   ЭтоСписок       - Булево - Истина, если обращение к функции выполняется из списка документов
//
Процедура ПометитьФайлыНаУдаление(Форма, МассивФайлов, ПометкаУдаления, ЭтоСписок = Ложь) Экспорт 
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	Для Каждого Файл Из МассивФайлов Цикл 
		
		Если Файл.Редактирует = ТекущийПользователь Тогда
			РаботаСФайламиВызовСервера.ОсвободитьФайлПоСсылке(Файл, Форма.УникальныйИдентификатор);
		КонецЕсли;	
		
		ЗаблокироватьДанныеДляРедактирования(Файл);
		ОбъектФайл = Файл.ПолучитьОбъект();
		ОбъектФайл.УстановитьПометкуУдаления(ПометкаУдаления);
		РазблокироватьДанныеДляРедактирования(Файл);
		
	КонецЦикла;
	
	Если Не Форма.ПоказыватьУдаленныеФайлы Тогда 
		ЗаполнитьСписокФайловДокумента(Форма, ЭтоСписок);
	КонецЕсли; 
	
КонецПроцедуры

// Заполняет условное оформление пометки удаленных элементов в списке документов.
//
// Параметры:
//    Список - ДинамическийСписок - договорных документов.
//
Процедура СписокДокументовУсловноеОформлениеПомеченныхНаУдаление(Список) Экспорт
	
	УсловноеОформлениеКД = Список.КомпоновщикНастроек.Настройки.УсловноеОформление;
	УсловноеОформлениеКД.ИдентификаторПользовательскойНастройки = "ОсновноеОформление";
	
	Элемент = УсловноеОформлениеКД.Элементы.Добавить();
	Элемент.Использование = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт",
		Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Ложь, Ложь, Ложь, Истина, ));
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.Использование = Истина;
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	Отбор.ПравоеЗначение = Истина;
	Если РаботаСФайламиВызовСервера.ЕстьДублирующийсяЭлемент(УсловноеОформлениеКД.Элементы, Элемент) Тогда
		УсловноеОформлениеКД.Элементы.Удалить(Элемент);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет условное оформление пометки удаленных элементов в списке документов.
//
// Параметры:
//    Список - ДинамическийСписок - договорных документов.
//
Процедура СписокДокументовУсловноеОформлениеПросроченных(Список) Экспорт
	
	УсловноеОформлениеКД = Список.КомпоновщикНастроек.Настройки.УсловноеОформление;
	УсловноеОформлениеКД.ИдентификаторПользовательскойНастройки = "ОсновноеОформление";
	
	Элемент = УсловноеОформлениеКД.Элементы.Добавить();
	Элемент.Использование = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("TextColor", 
		ЦветаСтиля.ПоясняющийОшибкуТекст);
		
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.Использование = Истина;
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СрокРассмотрения");
	Отбор.ПравоеЗначение = НачалоДня(ТекущаяДатаСеанса());
	
	Поле = Элемент.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("СрокРассмотрения");
	
	Если РаботаСФайламиВызовСервера.ЕстьДублирующийсяЭлемент(УсловноеОформлениеКД.Элементы, Элемент) Тогда
		УсловноеОформлениеКД.Элементы.Удалить(Элемент);
	КонецЕсли;
	
КонецПроцедуры

// Формирует строковое представление кода вопроса.
//
// Параметры:
//    Раздел - СправочникСсылка.Разделы - ссылка на раздел.
//    Тематика - СправочникСсылка.Тематики - ссылка на тематику.
//    Тема - СправочникСсылка.Темы - ссылка на тему.
//    Вопрос - СправочникСсылка.Вопросы - ссылка на вопрос.
//
Функция СформироватьКодВопроса(Раздел, Тематика, Тема, Вопрос) Экспорт 
	
	КодВопроса = "";
	
	Если ЗначениеЗаполнено(Раздел) Тогда 
		КодВопроса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Раздел, "Код") + ".";
	Иначе 
		КодВопроса = "0000.";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Тематика) Тогда 
		КодВопроса = КодВопроса + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Тематика, "Код") + ".";
	Иначе 
		КодВопроса = КодВопроса + "0000.";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Тема) Тогда 
		КодВопроса = КодВопроса + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Тема, "Код") + ".";
	Иначе 
		КодВопроса = КодВопроса + "0000.";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Вопрос) Тогда 
		КодВопроса = КодВопроса + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Вопрос, "Код");
	Иначе 
		КодВопроса = КодВопроса + "0000";
	КонецЕсли;
	
	Возврат КодВопроса;
	
КонецФункции

// Возвращает список вопросов по вводу по строке 
Функция СформироватьДанныеВыбораДелаХранения(Знач Текст) Экспорт
	
	ДанныеВыбора = Новый СписокЗначений;
	Запрос = Новый Запрос;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Ссылка,
			СокрЛП(Выборка.Индекс) + " " + Выборка.Наименование);
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

// Возвращает список сроков рассмотрения обращений 
Функция ПолучитьСрокиРассмотренияОбращений() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокСроков = Новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СрокиРассмотренияОбращений.Код КАК Код,
		|	СрокиРассмотренияОбращений.Наименование КАК Наименование
		|ИЗ
		|	Справочник.СрокиРассмотренияОбращений КАК СрокиРассмотренияОбращений
		|ГДЕ
		|	НЕ СрокиРассмотренияОбращений.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Код";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокСроков.Добавить(Выборка.Код, Выборка.Наименование);
	КонецЦикла;
	
	Возврат СписокСроков;
	
КонецФункции
