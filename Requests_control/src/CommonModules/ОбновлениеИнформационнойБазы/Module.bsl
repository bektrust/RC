////////////////////////////////////////////////////////////////////////////////
// Подсистема "Обновление версии ИБ".
// Серверные процедуры и функции обновления информационной базы
// при смене версии конфигурации.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Методы проверки доступности объекта для изменения при выполнении отложенного обновления.
//

// Проверяет, имеются ли отложенные обработчики обновления,
// которые в данный момент обрабатывают переданный объект.
//
// Параметры:
//  Данные - ЛюбаяСсылка, НаборЗаписей, Объект, ДанныеФормыСтруктура - ссылка на объект, сам объект
//           или набор записей, который необходимо проверить.
//  Форма  - УправляемаяФорма - если объект не обработан, то у переданной формы
//           будет установлено свойство ТолькоПросмотр. Если форма не была
//           передана, то будет вызвано исключение.
//
Процедура ПроверитьОбъектОбработан(Данные, Форма = Неопределено) Экспорт
	
	Результат = ОбъектОбработан(Данные);
	
	Если Не Результат.Обработан Тогда
		Если Форма <> Неопределено Тогда
			Форма.ТолькоПросмотр = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстИсключения);
		Иначе
			ВызватьИсключение Результат.ТекстИсключения;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, имеются ли отложенные обработчики обновления,
// которые в данный момент обрабатывают переданный объект.
//
// Параметры:
//  Данные - ЛюбаяСсылка, НаборЗаписей, Строка - ссылка на объект, набор записей или
//           полное имя объекта метаданных (для отчетов и обработок), блокировку которого необходимо проверить.
//
// Возвращаемое значение:
//   Структура с полями:
//      Обработан       - Булево - признак того, что переданный объект обработан.
//      ТекстИсключения - Строка - текст исключения, если объект еще не обработан,
//                        содержит список незавершенных обработчиков.
//
Функция ОбъектОбработан(Данные) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Обработан", Истина);
	Результат.Вставить("ТекстИсключения", "");
	Результат.Вставить("НевыполненныеОбработчикиСтрокой", "");
	
	Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
		Возврат Результат;
	КонецЕсли;
	
	СведенияОБлокируемыхОбъектах = ОбновлениеИнформационнойБазыСлужебный.СведенияОБлокируемыхОбъектах();
	
	Если ТипЗнч(Данные) = Тип("Строка") Тогда
		ПолноеИмя = Данные;
	Иначе
		ДанныеОбъекта = МетаданныеИОтборПоДанным(Данные);
		ПолноеИмя = ДанныеОбъекта.Метаданные.ПолноеИмя();
	КонецЕсли;
	
	ПроверяемыйОбъект = СтрЗаменить(ПолноеИмя, ".", "");
	
	ОбработчикиОбъекта = СведенияОБлокируемыхОбъектах.БлокируемыеОбъекты[ПроверяемыйОбъект];
	Если ОбработчикиОбъекта = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Обработан = Истина;
	НезавершенныеОбработчики = Новый Массив;
	Для Каждого Обработчик Из ОбработчикиОбъекта Цикл
		СвойстваОбработчика = СведенияОБлокируемыхОбъектах.Обработчики[Обработчик];
		Если СвойстваОбработчика.Выполнен Тогда
			Обработан = Истина;
		ИначеЕсли ТипЗнч(Данные) = Тип("Строка") Тогда
			Обработан = Ложь;
		Иначе
			Выполнить "Обработан = " + СвойстваОбработчика.ПроцедураПроверки + "(Данные)";
		КонецЕсли;
		
		Результат.Обработан = Обработан И Результат.Обработан;
		
		Если Не Обработан Тогда
			НезавершенныеОбработчики.Добавить(Обработчик);
		КонецЕсли;
	КонецЦикла;
	
	Если НезавершенныеОбработчики.Количество() > 0 Тогда
		ТекстИсключения = НСтр("ru = 'Действия с объектом временно запрещены, так как не завершен переход на новую версию программы.
			|Не завершены следующие процедуры обработки данных:'");
		
		НевыполненныеОбработчикиСтрокой = "";
		Для Каждого НезавершенныйОбработчик Из НезавершенныеОбработчики Цикл
			НевыполненныеОбработчикиСтрокой = НевыполненныеОбработчикиСтрокой + Символы.ПС + НезавершенныйОбработчик;
		КонецЦикла;
		Результат.ТекстИсключения = ТекстИсключения + НевыполненныеОбработчикиСтрокой;
		Результат.НевыполненныеОбработчикиСтрокой = НевыполненныеОбработчикиСтрокой;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для использования в обработчиках обновления.
//

// Записывает изменения в переданном объекте.
// Для использования в обработчиках обновления.
//
// Параметры:
//   Данные                            - Произвольный - объект, набор записей или менеджер константы, который
//                                                      необходимо записать.
//   РегистрироватьНаУзлахПлановОбмена - Булево       - включает регистрацию на узлах планов обмена при записи объекта.
//   ВключитьБизнесЛогику              - Булево       - включает бизнес-логику при записи объекта.
//
Процедура ЗаписатьДанные(Знач Данные, Знач РегистрироватьНаУзлахПлановОбмена = Неопределено, 
	Знач ВключитьБизнесЛогику = Ложь) Экспорт
	
	Данные.ОбменДанными.Загрузка = Не ВключитьБизнесЛогику;
	Данные.ДополнительныеСвойства.Вставить("РегистрироватьНаУзлахПлановОбменаПриОбновленииИБ", РегистрироватьНаУзлахПлановОбмена);
	
	Если РегистрироватьНаУзлахПлановОбмена = Неопределено
		Или Не РегистрироватьНаУзлахПлановОбмена Тогда
		Данные.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	КонецЕсли;
	
	Данные.Записать();
	
	ОтметитьВыполнениеОбработки(Данные);
	
КонецПроцедуры

// Записывает изменения в переданном объекте ссылочного типа.
// Для использования в обработчиках обновления.
//
// Параметры:
//   Объект                            - Произвольный - записываемый объект ссылочного типа. Например, СправочникОбъект.
//   РегистрироватьНаУзлахПлановОбмена - Булево       - включает регистрацию на узлах планов обмена при записи объекта.
//   ВключитьБизнесЛогику              - Булево       - включает бизнес-логику при записи объекта.
//   ДокументРежимЗаписи              - ДокументРежимЗаписи - имеет смысл только для данных типа ДокументОбъект - режим записи документа.
//											Если параметр не передан, то документ записывается в режиме "Запись"
//
Процедура ЗаписатьОбъект(Знач Объект, Знач РегистрироватьНаУзлахПлановОбмена = Неопределено, 
	Знач ВключитьБизнесЛогику = Ложь, ДокументРежимЗаписи = Неопределено) Экспорт
	
	Объект.ДополнительныеСвойства.Вставить("РегистрироватьНаУзлахПлановОбменаПриОбновленииИБ", РегистрироватьНаУзлахПлановОбмена);
	Объект.ОбменДанными.Загрузка = Не ВключитьБизнесЛогику;
	
	Если РегистрироватьНаУзлахПлановОбмена = Неопределено
		Или Не РегистрироватьНаУзлахПлановОбмена
		И Не Объект.ЭтоНовый() Тогда
		Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	КонецЕсли;
	
	Если ДокументРежимЗаписи <> Неопределено Тогда
		Если ТипЗнч(ДокументРежимЗаписи) <> Тип("РежимЗаписиДокумента") Тогда
			ТекстИсключения = НСтр("ru = 'Неправильный тип параметра ДокументРежимЗаписи'");
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		Объект.ОбменДанными.Загрузка = Объект.ОбменДанными.Загрузка
			И Не ДокументРежимЗаписи = РежимЗаписиДокумента.Проведение
			И Не ДокументРежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		Объект.Записать(ДокументРежимЗаписи);
	Иначе
		Объект.Записать();
	КонецЕсли;
	
	ОтметитьВыполнениеОбработки(Объект);
	
КонецПроцедуры

// Записывает изменения в переданном наборе записей.
// Для использования в обработчиках обновления.
//
// Параметры:
//   НаборЗаписей                      - РегистрСведенийНаборЗаписей,
//                                       РегистрНакопленияНаборЗаписей,
//                                       РегистрБухгалтерииНаборЗаписей,
//                                       РегистрРасчетаНаборЗаписей - набор записей, который необходимо записать.
//   Замещать                          - Булево       - Определяет режим замещения существующей записи в соответствии с текущими установками отбора. Истина - перед записью существующие записи будут удалены. Ложь - записи будут дописаны к уже существующим в информационной базе записям.
//   РегистрироватьНаУзлахПлановОбмена - Булево       - включает регистрацию на узлах планов обмена при записи объекта.
//   ВключитьБизнесЛогику              - Булево       - включает бизнес-логику при записи объекта.
//
Процедура ЗаписатьНаборЗаписей(Знач НаборЗаписей, Замещать = Истина, Знач РегистрироватьНаУзлахПлановОбмена = Неопределено,
	Знач ВключитьБизнесЛогику = Ложь) Экспорт
	
	НаборЗаписей.ДополнительныеСвойства.Вставить("РегистрироватьНаУзлахПлановОбменаПриОбновленииИБ", РегистрироватьНаУзлахПлановОбмена);
	НаборЗаписей.ОбменДанными.Загрузка = Не ВключитьБизнесЛогику;
	
	Если РегистрироватьНаУзлахПлановОбмена = Неопределено 
		Или Не РегистрироватьНаУзлахПлановОбмена Тогда
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	КонецЕсли;
	
	НаборЗаписей.Записать(Замещать);
	
	ОтметитьВыполнениеОбработки(НаборЗаписей);
	
КонецПроцедуры

// Удаляет переданный объект.
// Для использования в обработчиках обновления.
//
// Параметры:
//  Данные                            - Произвольный - объект, который необходимо удалить.
//  РегистрироватьНаУзлахПлановОбмена - Булево       - включает регистрацию на узлах планов обмена при записи объекта.
//  ВключитьБизнесЛогику              - Булево       - включает бизнес-логику при записи объекта.
//
Процедура УдалитьДанные(Знач Данные, Знач РегистрироватьНаУзлахПлановОбмена = Неопределено, 
	Знач ВключитьБизнесЛогику = Ложь) Экспорт
	
	Данные.ДополнительныеСвойства.Вставить("РегистрироватьНаУзлахПлановОбменаПриОбновленииИБ", РегистрироватьНаУзлахПлановОбмена);
	
	Данные.ОбменДанными.Загрузка = Не ВключитьБизнесЛогику;
	Если РегистрироватьНаУзлахПлановОбмена = Неопределено 
		Или Не РегистрироватьНаУзлахПлановОбмена Тогда
		Данные.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	КонецЕсли;
	
	Данные.Удалить();
	
КонецПроцедуры

// Возвращает строковую константу для формирования сообщений журнала регистрации.
//
// Возвращаемое значение:
//   Строка
//
Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат ОбновлениеИнформационнойБазыСлужебный.СобытиеЖурналаРегистрации();
	
КонецФункции

// Получает версию конфигурации или родительской конфигурации (библиотеки),
// которая хранится в информационной базе.
//
// Параметры:
//  ИдентификаторБиблиотеки   - Строка - имя конфигурации или идентификатор библиотеки.
//
// Возвращаемое значение:
//   Строка   - версия.
//
// Пример использования:
//   ВерсияКонфигурацииИБ = ВерсияИБ(Метаданные.Имя);
//
Функция ВерсияИБ(Знач ИдентификаторБиблиотеки) Экспорт
	
	Возврат ОбновлениеИнформационнойБазыСлужебный.ВерсияИБ(ИдентификаторБиблиотеки);
	
КонецФункции

// Записывает в информационную базу версию конфигурации или родительской конфигурации (библиотеки).
//
// Параметры:
//  ИдентификаторБиблиотеки - Строка - имя конфигурации или родительской конфигурации (библиотеки),
//  НомерВерсии             - Строка - номер версии.
//  ЭтоОсновнаяКонфигурация - Булево - признак, что ИдентификаторБиблиотеки соответствует имени конфигурации.
//
Процедура УстановитьВерсиюИБ(Знач ИдентификаторБиблиотеки, Знач НомерВерсии, Знач ЭтоОсновнаяКонфигурация) Экспорт
	
	ОбновлениеИнформационнойБазыСлужебный.УстановитьВерсиюИБ(ИдентификаторБиблиотеки, НомерВерсии, ЭтоОсновнаяКонфигурация);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для использования в отложенных обработчиках обновления
// с режимом выполнения "Параллельно".
//

// Отмечает, что переданные данные обновлены
//
// Параметры:
//  Данные					 - Ссылка, Массив, НаборДанных - данные, по которым нужно зарегистрировать изменения
//							 - ТаблицаЗначений - значения измерений независимого регистра сведений. Требования:
//													- все измерения регистра должны входить в основной отбор
//													- в таблице должны быть только колонки, соответствующие по именам измерениям регистра,
//														по которым ранее регистрировалась необходимость обработки
//													- запись наборов в процессе обновления должна проходить с тем же отбором,
//														что и регистрация необходимости обработки
//													- в ДополнительныеПараметры нужно передать соответствующий признак и полное имя регистра
//  ДополнительныеПараметры	 - Структура - см. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки
//  Очередь					 - Число, Неопределено - очередь обработки, в которой выполняется текущий обработчик. По умолчанию очередь передавать
//													не нужно, т.к. она будет взята из параметров сеанса, в котором запущен обработчик обновления.
//
Процедура ОтметитьВыполнениеОбработки(Данные, ДополнительныеПараметры = Неопределено, Очередь = Неопределено) Экспорт
	Если Очередь = Неопределено Тогда
		Если ПараметрыСеанса.ПараметрыОбработчикаОбновления.РежимВыполнения <> "Отложенно"
			Или ПараметрыСеанса.ПараметрыОбработчикаОбновления.РежимВыполненияОтложенныхОбработчиков <> "Параллельно" Тогда
			Возврат;
		КонецЕсли;
		
		Очередь = ПараметрыСеанса.ПараметрыОбработчикаОбновления.ОчередьОтложеннойОбработки;
		
		Если Не ПараметрыСеанса.ПараметрыОбработчикаОбновления.ЕстьОбработанныеОбъекты Тогда
			
			НовыеПараметрыСеанса = ОбновлениеИнформационнойБазыСлужебный.НовыеПараметрыОбработчикаОбновления();
			ЗаполнитьЗначенияСвойств(НовыеПараметрыСеанса, ПараметрыСеанса.ПараметрыОбработчикаОбновления);
			НовыеПараметрыСеанса.ЕстьОбработанныеОбъекты = Истина;
			
			ПараметрыСеанса.ПараметрыОбработчикаОбновления = Новый ФиксированнаяСтруктура(НовыеПараметрыСеанса);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыОтметкиОбработки();
	КонецЕсли;
	
	Если (ТипЗнч(Данные) = Тип("Массив")
		Или ТипЗнч(Данные) = Тип("ТаблицаЗначений"))
		И Данные.Количество() = 0 Тогда
		
		ТекстИсключения = НСтр("ru = 'В процедуру ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки передан пустой массив. Не возможно отметить выполнение обработки.'");
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	Узел = ОчередьСсылкой(Очередь);
	
	Если ДополнительныеПараметры.ЭтоДвижения Тогда
		
		Набор = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ДополнительныеПараметры.ПолноеИмяРегистра).СоздатьНаборЗаписей();
		
		Если ТипЗнч(Данные) = Тип("Массив") Тогда
			Для Каждого СтрокаМассива Из Данные Цикл
				Набор.Отбор.Регистратор.Установить(СтрокаМассива);
				ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Набор);
			КонецЦикла;
		Иначе
			Набор.Отбор.Регистратор.Установить(Данные);
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Набор);
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений Тогда
		
		Набор = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ДополнительныеПараметры.ПолноеИмяРегистра).СоздатьНаборЗаписей();
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ДополнительныеПараметры.ПолноеИмяРегистра);
		
		УстановитьНедостающиеОтборыВНаборе(Набор, МетаданныеОбъекта, Данные);	
		
		Для каждого СтрТабл Из Данные Цикл
			Для Каждого Колонка Из Данные.Колонки Цикл
				Набор.Отбор[Колонка.Имя].Установить(СтрТабл[Колонка.Имя]);
			КонецЦикла;
			
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Набор);
		КонецЦикла;
		
	Иначе
		Если ТипЗнч(Данные) = Тип("ОбъектМетаданных") Тогда
			ТекстИсключения = НСтр("ru = 'Не поддерживается отметка выполнения обработки обновления целиком объекта метаданных. Нужно отмечать обработку конкретных данных.'");
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
		Если ТипЗнч(Данные) <> Тип("Массив") Тогда
			
			ТипЗначенияОбъекта = ТипЗнч(Данные);
			МетаданныеОбъекта  = Метаданные.НайтиПоТипу(ТипЗначенияОбъекта);
			
			Если ОбщегоНазначения.ЭтоРегистрСведений(МетаданныеОбъекта)
				И МетаданныеОбъекта.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
				
				УстановитьНедостающиеОтборыВНаборе(Данные, МетаданныеОбъекта, Данные.Отбор);
			ИначеЕсли ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(МетаданныеОбъекта)
				И Не ОбщегоНазначения.ЭтоСсылка(ТипЗначенияОбъекта)
				И Данные.ЭтоНовый() Тогда
				
				Возврат;
				
			КонецЕсли;
			
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Данные);
			
		Иначе
			
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Данные);
			
		КонецЕсли;
		
	КонецЕсли;
	
	РегистрыСведений.ДанныеОбработанныеВЦентральномУзлеРИБ.ОтметитьВыполнениеОбработки(Очередь, Данные, ДополнительныеПараметры); 

КонецПроцедуры

// Дополнительные параметры функций ОтметитьКОбработке и ОтметитьВыполнениеОбработки
// 
// Возвращаемое значение:
//  Структура - структура со свойствами:
//     * ЭтоДвижения - Булево - в параметре Данные функции переданы ссылки на регистраторы, по которым нужно обновить движения,
//                              Значение по умолчанию - ЛОЖЬ
//      * ПолноеИмяРегистра - Строка - полное имя регистра, по которому нужно обновить данные. Например, РегистрНакопления.ТоварыНаСкладах 
//      * ОтметитьВсеРегистраторы - Булево - необходимо отметить к обработке все проведенные документы переданного во втором параметре типа
//                                           В этом случае в параметре Данные процедуры можно передавать ОбъектМетаданных:Документ или ДокументСсылка
//      * ЭтоНезависимыйРегистрСведений - Булево - в параметре Данные функции передана таблица со значениями измерений, по которым нужно обновлять данные,
//                                                 Значение по умолчанию - ЛОЖЬ
//
Функция ДополнительныеПараметрыОтметкиОбработки() Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЭтоДвижения", Ложь);
	ДополнительныеПараметры.Вставить("ОтметитьВсеРегистраторы", Ложь);
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Ложь);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", "");
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

// Возвращает ссылку на узел плана обмена, соответствующий номеру очереди отложенной обработки данных
//
// Параметры:
//  Очередь - Число - очередь отложенной обработки данных
// 
// Возвращаемое значение:
//  ПланОбменаСсылка.ОбновлениеИнформационнойБазы 
//
Функция ОчередьСсылкой(Очередь)
	Возврат ПланыОбмена.ОбновлениеИнформационнойБазы.УзелПоОчереди(Очередь);
КонецФункции

// Основные параметры процедуры ОбновлениеИнформационнойБазы.ОтметитьКОбработке, которые инициализируются механизмом регистрации изменений
// и не должны переопределяться в коде процедур отметки к обработке обработчиков обновления
//
//  ВозвращаемоеЗначение - Структура:
//     *Очередь - Число - очередь обработки, в которой выполняется текущий обработчик
//     *ЗаписьИзмененийДляПодчиненногоУзлаРИБСФильтрами - ЗаписьFastInfoset - параметр существует, только если внедрена подсистема ОбменДанными
//
Функция ОсновныеПараметрыОтметкиКОбработке() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Очередь", 0);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		
		Параметры.Вставить("ЗаписьИзмененийДляПодчиненногоУзлаРИБСФильтрами", Неопределено);
		
	КонецЕсли;
	
	Возврат Параметры; 
	
КонецФункции

// Возвращает информацию о переданных данных в нормализованном виде. Может быть использована в процедурах проверки блокировки данных обработчиков обновления.
//
// Параметры:
//  Данные				     - ЛюбаяСсылка, НаборЗаписей, Объект, ДанныеФормыСтруктура - данные, которые нужно проанализировать
//  ДополнительныеПараметры	 - Структура, Неопределено - см. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки
// 
// Возвращаемое значение:
//  Структура - 
//  	* МетаданныеОбъекта - ОбъектМетаданных
//		* Отбор - ЛюбаяСсылка - если данные - это ссылочный объект, то значение ссылки, если регистр подчиненный регистратору - значение отбора по регистратору
//				- Структура - если данные - это независимый регистр сведений, то возвращается структура, соответствующая установленным отборам по измерениям
//		* ЭтоНовый - Булево - если данные - это ссылочный объект, то признак нового объекта. Для других типов - всегда ЛОЖЬ
//	
Функция МетаданныеИОтборПоДанным(Данные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыОтметкиОбработки();
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЭтоДвижения Тогда
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ДополнительныеПараметры.ПолноеИмяРегистра);		
	Иначе
		МетаданныеОбъекта = Неопределено;
	КонецЕсли;
	
	Отбор = Неопределено;
	ТипДанных = ТипЗнч(Данные);
	ЭтоНовый = Ложь;
	
	Если ТипЗнч(Данные) = Тип("Строка") Тогда
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(Данные);
	ИначеЕсли ТипДанных = Тип("ДанныеФормыСтруктура") Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Данные, "Ссылка") Тогда
			
			Если МетаданныеОбъекта = Неопределено Тогда
				МетаданныеОбъекта = Данные.Ссылка.Метаданные();
			КонецЕсли;
			
			Отбор = Данные.Ссылка;
			
			Если Не ЗначениеЗаполнено(Отбор) Тогда
				ЭтоНовый = Истина;
			КонецЕсли;
			
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Данные, "ИсходныйКлючЗаписи") Тогда	

			Если МетаданныеОбъекта = Неопределено Тогда
				МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(Данные.ИсходныйКлючЗаписи));	
			КонецЕсли;
			Отбор = Новый Структура;
			Для Каждого Измерение Из МетаданныеОбъекта.Измерения Цикл
				Отбор.Вставить(Измерение.Имя, Данные[Измерение.Имя]);
			КонецЦикла;
			
		Иначе
			ТекстИсключения = НСтр("ru = 'Процедура ОбновлениеИнформационнойБазы.МетаданныеИОтборПоДанным не может быть использована для этой формы.'");
		КонецЕсли;
		
	Иначе
		
		Если МетаданныеОбъекта = Неопределено Тогда
			МетаданныеОбъекта = Данные.Метаданные();
		КонецЕсли;
		
		Если ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(МетаданныеОбъекта) Тогда
			
			Если ОбщегоНазначения.ЭтоСсылка(ТипДанных) Тогда
				Отбор = Данные;
			Иначе
				Отбор = Данные.Ссылка;
				
				Если Данные.ЭтоНовый() Тогда
					ЭтоНовый = Истина;
				КонецЕсли;
			
			КонецЕсли;
			
		ИначеЕсли ОбщегоНазначения.ЭтоРегистрСведений(МетаданныеОбъекта)
			И МетаданныеОбъекта.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
			
			Отбор = Новый Структура;
			Для Каждого ЭлементОтбора Из Данные.Отбор Цикл
				Если ЭлементОтбора.Использование Тогда 
					Отбор.Вставить(ЭлементОтбора.Имя, ЭлементОтбора.Значение);
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ОбщегоНазначения.ЭтоРегистр(МетаданныеОбъекта) Тогда
			Если ДополнительныеПараметры.ЭтоДвижения Тогда
				Отбор = Данные;
			Иначе
				Отбор = Данные.Отбор.Регистратор.Значение;
			КонецЕсли;
		Иначе
			ТекстИсключения = НСтр("ru = 'Для этого типа метаданных не поддерживается анализ в функции ОбновлениеИнформационнойБазы.МетаданныеИОтборПоДанным.'");
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Метаданные", МетаданныеОбъекта);
	Результат.Вставить("Отбор", Отбор);
	Результат.Вставить("ЭтоНовый", ЭтоНовый);
	
	Возврат Результат;
КонецФункции

// Отмечает, что переданные данные необходимо обновить
//
// Параметры:
//  Параметры - Структура - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке 
//  Данные    - Ссылка, Массив, НаборЗаписей - данные, по которым нужно зарегистрировать изменения
//            - ТаблицаЗначений - значения измерений независимого регистра сведений. Требования:
//                 - все измерения регистра должны входить в основной отбор
//                 - в таблице должны быть только колонки, соотвествующие по именам измерениям регистра,
//                   по которым нужно регистрировать необходимость обработки
//                 - запись наборов в процессе обновления должна проходить с тем же отбором,
//                   что и регистрация необходимости обработки
//                 - в ДополнительныеПараметры нужно передать соотвествующий признак и полное имя регистра
//  ДополнительныеПараметры - Струкутура - см. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки
// 
Процедура ОтметитьКОбработке(ОсновныеПараметры, Данные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыОтметкиОбработки();
	КонецЕсли;
	
	Если (ТипЗнч(Данные) = Тип("Массив")
		Или ТипЗнч(Данные) = Тип("ТаблицаЗначений"))
		И Данные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Узел = ОчередьСсылкой(ОсновныеПараметры.Очередь);
	
	Если ДополнительныеПараметры.ЭтоДвижения Тогда
		
		Набор = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ДополнительныеПараметры.ПолноеИмяРегистра).СоздатьНаборЗаписей();
		
		Если ДополнительныеПараметры.ОтметитьВсеРегистраторы Тогда
			
			Если ТипЗнч(Данные) = Тип("ОбъектМетаданных") Тогда
				МетаданныеДокумента = Данные;
			ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Данные)) Тогда
				МетаданныеДокумента = Данные.Метаданные();
			Иначе
				ТекстИсключения = НСтр("ru = 'Для регистрации всех регистраторов регистра необходимо в параметре ""Данные"" передать ОбъектМетаданных:Документ или ДокументСсылка.'");
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
			ПолноеИмяДокумента = МетаданныеДокумента.ПолноеИмя();
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ТаблицаДокумента.Ссылка КАК Ссылка
			|ИЗ
			|	#ТаблицаДокумента КАК ТаблицаДокумента
			|ГДЕ
			|	ТаблицаДокумента.Проведен";
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаДокумента", ПолноеИмяДокумента);
			Запрос = Новый Запрос;
			Запрос.Текст = ТекстЗапроса;
			
			МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
			
			Для Каждого СтрМас из МассивСсылок Цикл
				Набор.Отбор.Регистратор.Установить(СтрМас);
				ЗарегистрироватьИзменения(ОсновныеПараметры, Узел, Набор, "ПодчиненныйРегистр", ДополнительныеПараметры.ПолноеИмяРегистра);
			КонецЦикла;
			
		Иначе
			
			Если ТипЗнч(Данные) = Тип("Массив") Тогда
				
				Для Каждого СтрМас из Данные Цикл
					Набор.Отбор.Регистратор.Установить(СтрМас);
					ЗарегистрироватьИзменения(ОсновныеПараметры, Узел, Набор, "ПодчиненныйРегистр", ДополнительныеПараметры.ПолноеИмяРегистра);
				КонецЦикла;
				
			Иначе
				
				Набор.Отбор.Регистратор.Установить(Данные);
				ЗарегистрироватьИзменения(ОсновныеПараметры, Узел, Набор, "ПодчиненныйРегистр");
				
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений Тогда
		
		Набор = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ДополнительныеПараметры.ПолноеИмяРегистра).СоздатьНаборЗаписей();
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ДополнительныеПараметры.ПолноеИмяРегистра);
		УстановитьНедостающиеОтборыВНаборе(Набор, МетаданныеОбъекта, Данные);
		
		Для Каждого СтрТабл из Данные Цикл
			
			Для Каждого Колонка из Данные.Колонки Цикл
				Набор.Отбор[Колонка.Имя].Установить(СтрТабл[Колонка.Имя]);
			КонецЦикла;
			
			ЗарегистрироватьИзменения(ОсновныеПараметры, Узел, Набор, "НезависимыйРегистр", ДополнительныеПараметры.ПолноеИмяРегистра);
			
		КонецЦикла;
	Иначе
		Если ТипЗнч(Данные) = Тип("Массив") Тогда
			Для Каждого СтрМас из Данные Цикл
				ЗарегистрироватьИзменения(ОсновныеПараметры, Узел, СтрМас, "Ссылка");
			КонецЦикла;
		Иначе
			Если ТипЗнч(Данные) = Тип("ОбъектМетаданных") Тогда
				ТекстИсключения = НСтр("ru = 'Не поддерживается регистрация к обновлению целиком объекта метаданных. Нужно обновлять конкретные данные.'");
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
			
			МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(Данные));
			
			Если ОбщегоНазначения.ЭтоРегистрСведений(МетаданныеОбъекта)
				И МетаданныеОбъекта.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
				
				УстановитьНедостающиеОтборыВНаборе(Данные, МетаданныеОбъекта, Данные.Отбор);
				
			КонецЕсли;
			ЗарегистрироватьИзменения(ОсновныеПараметры, Узел, Данные, "НезависимыйРегистр", МетаданныеОбъекта.ПолноеИмя());
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции.

// Проверить необходимость обновления информационной базы при смене версии конфигурации.
//
// Возвращаемое значение:
//   Булево
//
Функция НеобходимоОбновлениеИнформационнойБазы() Экспорт
	
	Возврат ОбновлениеИнформационнойБазыСлужебныйПовтИсп.НеобходимоОбновлениеИнформационнойБазы();
	
КонецФункции

// Возвращает Истина, если в данный момент выполняется обновление ИБ.
//
// Возвращаемое значение:
//   Булево
//
Функция ВыполняетсяОбновлениеИнформационнойБазы() Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И Не ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат НеобходимоОбновлениеИнформационнойБазы();
	КонецЕсли;
	
	Возврат ПараметрыСеанса.ВыполняетсяОбновлениеИБ;
	
КонецФункции

// Возвращает пустую таблицу обработчиков обновления и первоначального заполнения ИБ.
//
// Возвращаемое значение:
//   ТаблицаЗначений   - таблица с колонками:
//     * НачальноеЗаполнение - Булево - если Истина, то обработчик должен срабатывать при запуске на "пустой" базе.
//     * Версия              - Строка - например, "2.1.3.39". Номер версии конфигурации, при переходе
//                                      на которую должна быть выполнена процедура-обработчик обновления.
//                                      Если указана пустая строка, то это обработчик только для начального заполнения
//                                      (должно быть указано свойство НачальноеЗаполнение).
//     * Процедура           - Строка - полное имя процедуры-обработчика обновления/начального заполнения. 
//                                      Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьНовыйРеквизит"
//                                      Обязательно должна быть экспортной.
//
//     * ВыполнятьВГруппеОбязательных - Булево - следует указывать, если обработчик требуется
//                                      выполнять в одной группе с обработчиками на версии "*".
//                                      При этом, возможно менять порядок выполнения обработчика
//                                      относительно других путем изменения приоритета.
//     * Приоритет           - Число  - для внутреннего использования.
//
//     * ОбщиеДанные         - Булево - если Истина, то обработчик должен срабатывать до
//                                      выполнения любых обработчиков, использующих разделенные данные.
//                                      Допустимо указывать только для обработчиков с режимом выполнения Монопольно и Оперативно.
//                                      Если указать значение Истина для обработчика с режимом
//                                      выполнения Отложенно, будет выдано исключение.
//     * УправлениеОбработчиками - Булево - если Истина, то обработчик должен иметь параметр типа структура, в котором
//                                          есть свойство.
//                                      РазделенныеОбработчики - таблица значений со структурой, возвращаемой этой
//                                                               функцией.
//                                      При этом колонка Версия игнорируется. В случае необходимости выполнения
//                                      разделенного обработчика, в данную таблицу необходимо добавить строку с
//                                      описанием процедуры обработчика.
//                                      Имеет смысл только для обязательных (Версия = *) обработчиков обновления 
//                                      с установленным флагом ОбщиеДанные.
//     * Комментарий         - Строка - описание действий, выполняемых обработчиком обновления.
//     * РежимВыполнения     - Строка - режим выполнения обработчика обновления. Допустимые значения:
//                                      Монопольно, Отложенно, Оперативно. Если значение не заполнено, обработчик
//                                      считается монопольным.
//     * МонопольныйРежим    - Неопределено, Булево - если указано Неопределено, то обработчик 
//                                      должен безусловно выполняться в монопольном режиме.
//                                      Для обработчиков перехода на конкретную версию (версия <> *):
//                                        Ложь   - обработчик не требует монопольного режима для выполнения.
//                                        Истина - обработчик требует монопольного режима для выполнения.
//                                      Для обязательных обработчиков обновления (Версия = "*"):
//                                        Ложь   - обработчик не требует монопольного режима.
//                                        Истина - обработчик может требовать монопольного режима для выполнения.
//                                                 В такие обработчики передается параметр типа структура
//                                                 со свойством МонопольныйРежим (типа Булево).
//                                                 При запуске обработчика в монопольном режиме передается
//                                                 значение Истина. В этом случае обработчик должен выполнить
//                                                 требуемые действия по обновлению. Изменение параметра
//                                                 в теле обработчика игнорируется.
//                                                 При запуске обработчика в немонопольном режиме передается
//                                                 значение Ложь. В этом случае обработчик не должен вносить никакие
//                                                 изменения в ИБ.
//                                                 Если в результате анализа выясняется что обработчику требуется
//                                                 изменить данные ИБ следует установить значение параметра в.
//                                                 Истина и прекратить выполнение обработчика.
//                                                 В этом случае оперативное (немонопольное обновление ИБ) будет
//                                                 отменено и выдана ошибка с требованием выполнить обновление в
//                                                 монопольном режиме.
//     * Идентификатор       - УникальныйИдентификатор - необходимо заполнять для обработчиков отложенного обновления,
//                                                 для остальных заполнение не требуется. Требуется для идентификации
//                                                 обработчика в случае его переименования.
//     * БлокируемыеОбъекты  - Строка - полные имена объектов через запятую, которые следует блокировать от изменения
//                                      до завершения процедуры обработки данных.
//     * ПроцедураПроверки   - Строка - имя функции, которая для переданного объекта определяет, завершена ли для него
//                                      процедура обработки данных. Если переданный объект обработан, то следует вернуть
//                                      значение Истина. Вызывается из процедуры ПроверитьОбъектОбработан общего модуля
//                                      ОбновлениеИнформационнойБазы.
//     * ЗапускатьТолькоВГлавномУзле - Булево - Истина, если обработчик обновления может выполняться только в главном узле РИБ.
//     * ЗапускатьИВПодчиненномУзлеРИБСФильтрами - Булево - Истина, если обработчик обновления может выполняться
//                                      в подчиненном узле РИБ с фильтрами.
//
Функция НоваяТаблицаОбработчиковОбновления() Экспорт
	
	Обработчики = Новый ТаблицаЗначений;
	// Основные свойства.
	Обработчики.Колонки.Добавить("НачальноеЗаполнение", Новый ОписаниеТипов("Булево"));
	Обработчики.Колонки.Добавить("Версия",    Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));
	Обработчики.Колонки.Добавить("Процедура", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));
	Обработчики.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));
	Обработчики.Колонки.Добавить("РежимВыполнения", Новый ОписаниеТипов("Строка"));
	// Дополнительные свойства (для библиотек).
	Обработчики.Колонки.Добавить("ВыполнятьВГруппеОбязательных", Новый ОписаниеТипов("Булево"));
	Обработчики.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2)));
	// Поддержка модели сервиса.
	Обработчики.Колонки.Добавить("ОбщиеДанные",             Новый ОписаниеТипов("Булево"));
	Обработчики.Колонки.Добавить("УправлениеОбработчиками", Новый ОписаниеТипов("Булево"));
	Обработчики.Колонки.Добавить("МонопольныйРежим");
	// Для отложенных обработчиков обновления.
	Обработчики.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("УникальныйИдентификатор"));
	Обработчики.Колонки.Добавить("ПроцедураПроверки", Новый ОписаниеТипов("Строка"));
	Обработчики.Колонки.Добавить("БлокируемыеОбъекты", Новый ОписаниеТипов("Строка"));
	Обработчики.Колонки.Добавить("ЗапускатьТолькоВГлавномУзле",  Новый ОписаниеТипов("Булево"));
	Обработчики.Колонки.Добавить("ЗапускатьИВПодчиненномУзлеРИБСФильтрами",  Новый ОписаниеТипов("Булево"));
	
	// Для поддержки параллельного отложенного обновления.
	Обработчики.Колонки.Добавить("ПроцедураЗаполненияДанныхОбновления", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));
	Обработчики.Колонки.Добавить("ОчередьОтложеннойОбработки",  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4)));
	
	// Устарело. Обратная совместимость до редакции "2.2".
	Обработчики.Колонки.Добавить("Опциональный");
	
	Возврат Обработчики;
	
КонецФункции

// Выполнить обработчики обновления из списка ОбработчикиОбновления 
// для библиотеки ИдентификаторБиблиотеки до версии ВерсияМетаданныхИБ.
//
// Параметры:
//   ИдентификаторБиблиотеки  - Строка       - имя конфигурации или идентификатор библиотеки.
//   ВерсияМетаданныхИБ       - Строка       - версия метаданных, до которой необходимо выполнить обновление.
//   ОбработчикиОбновления    - Соответствие - список обработчиков обновления.
//
// Возвращаемое значение:
//   ДеревоЗначений   - выполненные обработчики обновления.
//
Функция ВыполнитьИтерациюОбновления(Знач ИдентификаторБиблиотеки, Знач ВерсияМетаданныхИБ, 
	Знач ОбработчикиОбновления, Знач ХодВыполненияОбработчиков, Знач ОперативноеОбновление = Ложь) Экспорт
	
	ИтерацияОбновления = ОбновлениеИнформационнойБазыСлужебный.ИтерацияОбновления(ИдентификаторБиблиотеки, 
		ВерсияМетаданныхИБ, ОбработчикиОбновления);
		
	Параметры = Новый Структура;
	Параметры.Вставить("ХодВыполненияОбработчиков", ХодВыполненияОбработчиков);
	Параметры.Вставить("ОперативноеОбновление", ОперативноеОбновление);
	Параметры.Вставить("ВФоне", Ложь);
	
	Возврат ОбновлениеИнформационнойБазыСлужебный.ВыполнитьИтерациюОбновления(ИтерацияОбновления, Параметры);
	
КонецФункции

// Выполнить неинтерактивное обновление данных ИБ.
// Для вызова через внешнее соединение.
// 
// Для использования в других библиотеках и конфигурациях.
//
// Параметры:
//  ВыполнятьОтложенныеОбработчики - Булево - если Истина, отложенное обновление будет выполнено
//    в основном цикле обновления. Только для клиент-серверного режима работы.
//
// Возвращаемое значение:
//  Строка -  признак выполнения обработчиков обновления:
//           "Успешно", "НеТребуется", "ОшибкаУстановкиМонопольногоРежима".
//
Функция ВыполнитьОбновлениеИнформационнойБазы(ВыполнятьОтложенныеОбработчики = Ложь) Экспорт
	
	Возврат ОбновлениеИнформационнойБазыСлужебныйВызовСервера.ВыполнитьОбновлениеИнформационнойБазы(,, ВыполнятьОтложенныеОбработчики);
	
КонецФункции

// Удаляет отложенный обработчики из очереди выполняемых обработчиков на новую версию.
//
// Параметры:
//  ИмяОбработчика - Строка - полное имя процедуры отложенного обработчика.
//
Процедура УдалитьОтложенныйОбработчикИзОчереди(ИмяОбработчика) Экспорт
	
	СведенияОбОбновлении = ОбновлениеИнформационнойБазыСлужебный.СведенияОбОбновленииИнформационнойБазы();
	
	ОтобранныйОбработчик = СведенияОбОбновлении.ДеревоОбработчиков.Строки.НайтиСтроки(Новый Структура("ИмяОбработчика", ИмяОбработчика), Истина);
	Если ОтобранныйОбработчик <> Неопределено И ОтобранныйОбработчик.Количество() > 0 Тогда
		
		Для Каждого СтрокаОбработчик Из ОтобранныйОбработчик Цикл
			СтрокаОбработчик.Родитель.Строки.Удалить(СтрокаОбработчик);
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыСлужебный.ЗаписатьСведенияОбОбновленииИнформационнойБазы(СведенияОбОбновлении);
	
КонецПроцедуры

// Возвращает таблицу с версиями подсистем конфигурации.
// Для пакетной выгрузки-загрузки сведений о версиях подсистем.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица с колонками:
//     * ИмяПодсистемы - Строка - имя подсистемы.
//     * Версия        - Строка - версия подсистемы.
//
Функция ВерсииПодсистем() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВерсииПодсистем.ИмяПодсистемы КАК ИмяПодсистемы,
	|	ВерсииПодсистем.Версия КАК Версия
	|ИЗ
	|	РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции 

// Устанавливает версии всех подсистем.
// Для пакетной выгрузки-загрузки сведений о версиях подсистем.
//
// Параметры:
//   ВерсииПодсистем - ТаблицаЗначений - таблица с колонками:
//     * ИмяПодсистемы - Строка - имя подсистемы.
//     * Версия        - Строка - версия подсистемы.
//
Процедура УстановитьВерсииПодсистем(ВерсииПодсистем) Экспорт

	НаборЗаписей = РегистрыСведений.ВерсииПодсистем.СоздатьНаборЗаписей();
	
	Для каждого Версия Из ВерсииПодсистем Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ИмяПодсистемы = Версия.ИмяПодсистемы;
		НоваяЗапись.Версия = Версия.Версия;
		НоваяЗапись.ЭтоОсновнаяКонфигурация = (Версия.ИмяПодсистемы = Метаданные.Имя);
	КонецЦикла;
	
	НаборЗаписей.Записать();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьНедостающиеОтборыВНаборе(Набор, МетаданныеНабора, УстанавливаемыеОтборы)
	Для Каждого Измерение Из МетаданныеНабора.Измерения Цикл
		
		ЕстьОтборПоИзмерению = Ложь;
		
		Если ТипЗнч(УстанавливаемыеОтборы) = Тип("ТаблицаЗначений") Тогда
			ЕстьОтборПоИзмерению = УстанавливаемыеОтборы.Колонки.Найти(Измерение.Имя) <> Неопределено;
		Иначе //Отбор
			ЕстьОтборПоИзмерению = УстанавливаемыеОтборы[Измерение.Имя].Использование;	
		КонецЕсли;
		
		Если Не ЕстьОтборПоИзмерению Тогда
			ПустоеЗначение = Измерение.Тип.ПривестиЗначение();
			Набор.Отбор[Измерение.Имя].Установить(ПустоеЗначение);
		КонецЕсли;
	КонецЦикла;
	
	Если МетаданныеНабора.ОсновнойОтборПоПериоду Тогда
		
		Если ТипЗнч(УстанавливаемыеОтборы) = Тип("ТаблицаЗначений") Тогда
			ЕстьОтборПоИзмерению = УстанавливаемыеОтборы.Колонки.Найти("Период") <> Неопределено;
		Иначе //Отбор
			ЕстьОтборПоИзмерению = УстанавливаемыеОтборы.Период.Использование;
		КонецЕсли;
		
		Если Не ЕстьОтборПоИзмерению Тогда
			ПустоеЗначение = '00010101';
			Набор.Отбор.Период.Установить(ПустоеЗначение);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Процедура ЗарегистрироватьИзменения(Параметры, Узел, Данные, ВидДанных, ПолноеИмяОбъекта = "")
	
	ПланыОбмена.ЗарегистрироватьИзменения(Узел, Данные);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		МодульОбменДаннымиСервер = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер");
		МодульОбменДаннымиСервер.ЗаписатьДанныеДляОбновленияВФайл(Параметры, Данные, ВидДанных, ПолноеИмяОбъекта);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти