////////////////////////////////////////////////////////////////////////////////
// МОДУЛЬ СОДЕРЖИТ РЕАЛИЗАЦИЮ МЕХАНИКИ НУМЕРАЦИИ ДОКУМЕНТОВ
// 

// Возвращает сформированный числовой номер
Процедура СформироватьЧисловойНомерДокумента(Объект, СформированныйНомер) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметров = ПолучитьПараметрыНумерацииДокумента(Объект);
	
	// ручная нумерация
	Нумератор = ПолучитьНумераторДокумента(СтруктураПараметров);
	Если Не ЗначениеЗаполнено(Нумератор) Тогда
		СформированныйНомер = 0;
		Возврат;
	КонецЕсли;
	
	// измерения нумерации
	ПериодНумерации = НачалоПериодаНумерации(СтруктураПараметров.ДатаДокумента);
	СтруктураИзмерений = Новый Структура;
	СтруктураИзмерений.Вставить("ПериодНумерации", 	  ПериодНумерации);
	СтруктураИзмерений.Вставить("СвязанныйДокумент", Справочники.Обращения.ПустаяСсылка());
	СтруктураИзмерений.Вставить("ВидОбращения", 	  СтруктураПараметров.ВидОбращения);
	
	// перерегистрация
	Если СформированныйНомер > 0 Тогда 
		
		СменаПериодаНумерации = ПроверитьСменуПериодаНумерации(
			СтруктураПараметров.ДатаДокумента, 
			СтруктураПараметров.Ссылка.ДатаДокумента);
		
		Если Не СменаПериодаНумерации Тогда 	
			ТекущийНомер = РегистрыСведений.Нумерация.Получить(СтруктураИзмерений).ТекущийНомер; 
			Если ТекущийНомер = СформированныйНомер Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;	
	
	// автоматическая нумерация
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.Нумерация");
		ЭлементБлокировки.УстановитьЗначение("ПериодНумерации", ПериодНумерации);
		ЭлементБлокировки.УстановитьЗначение("СвязанныйДокумент", Справочники.Обращения.ПустаяСсылка());
		ЭлементБлокировки.УстановитьЗначение("ВидОбращения", СтруктураПараметров.ВидОбращения);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		ТекущийНомер = РегистрыСведений.Нумерация.Получить(СтруктураИзмерений).ТекущийНомер;
		СформированныйНомер = ТекущийНомер + 1;
		
		МенеджерЗаписи = РегистрыСведений.Нумерация.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураИзмерений);
		МенеджерЗаписи.ТекущийНомер = СформированныйНомер;
		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Возвращает сформированный строковый номер
Процедура СформироватьСтроковыйНомерДокумента(Объект, СформированныйНомер, ОписанияОшибок) Экспорт 
	
	Перем СтруктураФорматаНомера, ОписаниеОшибки;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// вручную изменен номер
	Если Объект.ЧисловойНомер = -1 Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураПараметров = ПолучитьПараметрыНумерацииДокумента(Объект);
	
	// ручная нумерация
	Нумератор = ПолучитьНумераторДокумента(СтруктураПараметров);
	Если Не ЗначениеЗаполнено(Нумератор) Тогда
		Возврат;
	КонецЕсли;
	
	ФорматНомера = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Нумератор, "ФорматНомера");
	Если Не ЗначениеЗаполнено(ФорматНомера) Тогда
		СформированныйНомер = "";
		ОписанияОшибок.Добавить("", НСтр("ru = 'Не указан формат номера для Вида документа.'"));
		Возврат;
	КонецЕсли;	
	
	// автоматическая нумерация
	Если Не РазобратьФорматНомера(ФорматНомера, ОписаниеОшибки, СтруктураФорматаНомера) Тогда 
		СформированныйНомер = "";
		ОписанияОшибок.Добавить("", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка в формате номера: %1.'"), ОписаниеОшибки));
		Возврат;
	КонецЕсли;	
	
	ЗначенияПараметровНомера = ПолучитьЗначенияПараметровНомера(СтруктураПараметров, СтруктураФорматаНомера, ОписанияОшибок);
	Если ОписанияОшибок.Количество() > 0 Тогда
		СформированныйНомер = "";
		Возврат;
	КонецЕсли;	
	
	СформированныйНомер = СформироватьНомерДокументаПоФормату(СтруктураФорматаНомера, ЗначенияПараметровНомера);
	
КонецПроцедуры

// Разбирает текстовый формат номера в структуру 
Функция РазобратьФорматНомера(ФорматНомера, ОписаниеОшибки, СтруктураФорматаНомера = Неопределено) Экспорт 
	
	СтруктураФорматаНомера = Новый ТаблицаЗначений;
	СтруктураФорматаНомера.Колонки.Добавить("Ключ", Новый ОписаниеТипов("Строка")); // разделитель или служебное поле
	СтруктураФорматаНомера.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка")); // значение разделителя или служебного поля
	СтруктураФорматаНомера.Колонки.Добавить("ВходитВСлужебное", Новый ОписаниеТипов("Число")); // разделитель входит в служебное поле
	
	ОписаниеОшибки = "";
	СписокПолей = ПолучитьСписокСлужебныхПолей();
	
	// проверка соответствия скобок
	ПозицияСкобки = 0;
	ПоказательСкобки = 0;
	
	врФорматНомера = СокрЛП(ФорматНомера);
	Для Инд = 1 По СтрДлина(врФорматНомера) Цикл
		
		ТекСимвол = Сред(врФорматНомера, Инд, 1);
		Если (ТекСимвол <> "[") И (ТекСимвол <> "]") Тогда
			Продолжить;
		КонецЕсли;	
		
		Если (ТекСимвол = "[") Тогда
			ПоказательСкобки = ПоказательСкобки + 1;
			Если ПоказательСкобки > 1 Тогда 
				ФрагментОшибки = Сред(врФорматНомера, ПозицияСкобки + 1, Инд - ПозицияСкобки);
				
				Если ФрагментОшибки = "" Тогда 
					ОписаниеОшибки = НСтр("ru = 'Отсутствует символ ""]""'");
				Иначе
					ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Отсутствует символ ""]"" в фрагменте ""%1""'"), ФрагментОшибки);
				КонецЕсли;

				Возврат Ложь;
			КонецЕсли;	
		КонецЕсли;	
		
		Если (ТекСимвол = "]") Тогда
			ПоказательСкобки = ПоказательСкобки - 1;
			Если ПоказательСкобки < 0 Тогда 
				ФрагментОшибки = Сред(врФорматНомера, ПозицияСкобки + 1, Инд - ПозицияСкобки);
				
				Если ФрагментОшибки = "" Тогда 
					ОписаниеОшибки = НСтр("ru = 'Отсутствует символ ""[""'");
				Иначе
					ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Отсутствует символ ""["" в фрагменте ""%1""'"), ФрагментОшибки);
				КонецЕсли;

				Возврат Ложь;
			КонецЕсли;	
		КонецЕсли;	
		
		ПозицияСкобки = Инд;
	КонецЦикла;
	
	Если ПоказательСкобки > 0 Тогда 
		ФрагментОшибки = Сред(врФорматНомера, ПозицияСкобки + 1);
		
		Если ФрагментОшибки = "" Тогда 
			ОписаниеОшибки = НСтр("ru = 'Отсутствует символ ""]""'");
		Иначе
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Отсутствует символ ""]"" в фрагменте ""%1""'"), ФрагментОшибки);
		КонецЕсли;

		Возврат Ложь;
	КонецЕсли;
	
	
	врФорматНомера = СокрЛП(ФорматНомера);
	Пока врФорматНомера <> "" Цикл
		
		Поз1 = Найти(врФорматНомера, "["); // начало служебного поля
		Если Поз1 > 0 Тогда
			
			Разделитель = Лев(врФорматНомера, Поз1-1);
			Если Разделитель <> "" Тогда
				НоваяСтрока = СтруктураФорматаНомера.Добавить();
				НоваяСтрока.Ключ = "Разделитель";
				НоваяСтрока.Значение = Разделитель;
			КонецЕсли;	
			
			врФорматНомера = Сред(врФорматНомера, Поз1+1);
		    Поз2 = Найти(врФорматНомера, "]"); // окончание служебного поля
			
			Если Поз2 > 0 Тогда
				КодСлужебногоПоля = Лев(врФорматНомера, Поз2-1);
				
				НайденоСлужебноеПоле = Ложь;
				Для Каждого СлужебноеПоле Из СписокПолей Цикл
					
					Поз3 = Найти(КодСлужебногоПоля, СлужебноеПоле.Значение);
					Если Поз3 = 0 Тогда 
						Продолжить;
					КонецЕсли;	
					
					Если Поз3 > 1 Тогда 
						Разделитель = Лев(КодСлужебногоПоля, Поз3 - 1);
						
						НоваяСтрока = СтруктураФорматаНомера.Добавить();
						НоваяСтрока.Ключ = "Разделитель";
						НоваяСтрока.Значение = Разделитель;
						НоваяСтрока.ВходитВСлужебное = СтруктураФорматаНомера.Индекс(НоваяСтрока) + 2;
					КонецЕсли;	
					
					НоваяСтрока = СтруктураФорматаНомера.Добавить();
					НоваяСтрока.Ключ = "СлужебноеПоле";
					НоваяСтрока.Значение = СлужебноеПоле.Представление;
					
					Если Поз3 + СтрДлина(СлужебноеПоле.Значение) - 1 < СтрДлина(КодСлужебногоПоля) Тогда 
						Разделитель = Сред(КодСлужебногоПоля, Поз3 + СтрДлина(СлужебноеПоле.Значение));
						
						НоваяСтрока = СтруктураФорматаНомера.Добавить();
						НоваяСтрока.Ключ = "Разделитель";
						НоваяСтрока.Значение = Разделитель;
						НоваяСтрока.ВходитВСлужебное = СтруктураФорматаНомера.Индекс(НоваяСтрока);
					КонецЕсли;	
					
					НайденоСлужебноеПоле = Истина;
					Прервать;
				КонецЦикла;	
				
				Если Не НайденоСлужебноеПоле Тогда 
					ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Неверное служебное поле ""%1""'"),
						КодСлужебногоПоля);
					Возврат Ложь;
				КонецЕсли;	
				
				врФорматНомера = Сред(врФорматНомера, Поз2+1);
			Иначе
				ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не обнаружено окончание служебного поля ""%1""'"),
					врФорматНомера);
				Возврат Ложь;
			КонецЕсли;	
			
		Иначе	
			
			Разделитель = врФорматНомера;
			Если Разделитель <> "" Тогда
				НоваяСтрока = СтруктураФорматаНомера.Добавить();
				НоваяСтрока.Ключ = "Разделитель";
				НоваяСтрока.Значение = Разделитель;
			КонецЕсли;
			врФорматНомера = "";
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат Истина;
	
КонецФункции

// Проверят смену периода при изменении даты регистрации
Функция ПроверитьСменуПериодаНумерации(НоваяДата, СтараяДата) Экспорт
	
	НовыйПериодНумерации = НачалоПериодаНумерации(НоваяДата);
	СтарыйПериодНумерации = НачалоПериодаНумерации(СтараяДата);
	
	Возврат (НовыйПериодНумерации <> СтарыйПериодНумерации);
	
КонецФункции	

// Формирует пример номера
Функция СформироватьПримерНомера(ФорматНомера, Пример, ОписаниеОшибки) Экспорт
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	День  = День(ТекущаяДата);
	Месяц = Месяц(ТекущаяДата);
	Год4  = Год(ТекущаяДата);
	Год2  = Прав(Строка(Год4), 2);
	
	Если Месяц <= 3 Тогда Квартал = 1;
	ИначеЕсли Месяц <= 6 Тогда Квартал = 2;
	ИначеЕсли Месяц <= 9 Тогда Квартал = 3;
	Иначе Квартал = 4; КонецЕсли;
	
	ЗначенияПараметровНомера = Новый Структура;
	ЗначенияПараметровНомера.Вставить("Номер", 		12345);
	ЗначенияПараметровНомера.Вставить("День", 		Формат(День,"ЧЦ=2; ЧВН="));
	ЗначенияПараметровНомера.Вставить("Месяц", 		Формат(Месяц,"ЧЦ=2; ЧВН="));
	ЗначенияПараметровНомера.Вставить("Год4", 		Год4);
	ЗначенияПараметровНомера.Вставить("Год2", 		Год2);
	ЗначенияПараметровНомера.Вставить("Квартал", 	Квартал);
	
	ЗначенияПараметровНомера.Вставить("НомерСвязанногоДокумента", 	НСтр("ru = 'СВЯЗ-123'")); 
	ЗначенияПараметровНомера.Вставить("ИндексВида",					НСтр("ru = 'ВИД'"));
	ЗначенияПараметровНомера.Вставить("ИндексОтветственного",		НСтр("ru = 'ОТВ'"));
	
	ОписаниеОшибки = "";
	СтруктураФорматаНомера = ""; 
	
	Если Не РазобратьФорматНомера(ФорматНомера, ОписаниеОшибки, СтруктураФорматаНомера) Тогда
		Пример = "";
		Возврат Ложь;
	КонецЕсли;
	
	Пример = СформироватьНомерДокументаПоФормату(СтруктураФорматаНомера, ЗначенияПараметровНомера);
	Возврат Истина;
	
КонецФункции

// Вычисляет начало периода нумерации
Функция НачалоПериодаНумерации(Дата) Экспорт
	
	ПериодНумерации = НачалоГода(Дата);
	Возврат ПериодНумерации;
	
КонецФункции	

// Вычисляет начало периода нумерации
Функция КонецПериодаНумерации(Периодичность, Дата) Экспорт
	
	ПериодНумерации = КонецГода(Дата);
	Возврат ПериодНумерации;
	
КонецФункции	

// Для параметров, указанных в формате номера, вычисляет их значения
Функция ПолучитьЗначенияПараметровНомера(Объект, СтруктураФорматаНомера, ОписанияОшибок) 
	
	ПараметрыНомера = Новый Структура;
	
	Для Каждого ЭлементФормата Из СтруктураФорматаНомера Цикл
		Если ЭлементФормата.Ключ <> "СлужебноеПоле" Тогда
			Продолжить;
		КонецЕсли;	
		
		СлужебноеПоле = ЭлементФормата.Значение;
		ЗначениеПоля = "";
		
		Если СлужебноеПоле = "Номер" Тогда
			ЗначениеПоля = Объект.ЧисловойНомер;
			
		ИначеЕсли СлужебноеПоле = "День" Тогда
			Если Не ЗначениеЗаполнено(Объект.ДатаДокумента) Тогда 
				ОписанияОшибок.Добавить("ДатаДокумента", НСтр("ru = 'Не заполнено поле ""Дата документа""'"));
			Иначе
				ЗначениеПоля = Формат(День(Объект.ДатаДокумента), "ЧЦ=2; ЧВН=");
			КонецЕсли;	
			
		ИначеЕсли СлужебноеПоле = "Месяц" Тогда
			Если Не ЗначениеЗаполнено(Объект.ДатаДокумента) Тогда 
				ОписанияОшибок.Добавить("ДатаДокумента", НСтр("ru = 'Не заполнено поле ""Дата регистрации""'"));
			Иначе
				ЗначениеПоля = Формат(Месяц(Объект.ДатаДокумента), "ЧЦ=2; ЧВН=");
			КонецЕсли;
			
		ИначеЕсли СлужебноеПоле = "Квартал" Тогда
			Если Не ЗначениеЗаполнено(Объект.ДатаДокумента) Тогда 
				ОписанияОшибок.Добавить("ДатаДокумента", НСтр("ru = 'Не заполнено поле ""Дата регистрации""'"));
			Иначе
				Месяц = Месяц(Объект.ДатаДокумента);
				Если 	  Месяц <= 3 Тогда ЗначениеПоля = 1;
				ИначеЕсли Месяц <= 6 Тогда ЗначениеПоля = 2;
				ИначеЕсли Месяц <= 9 Тогда ЗначениеПоля = 3;
				Иначе ЗначениеПоля = 4; КонецЕсли;
			КонецЕсли;	
			
		ИначеЕсли СлужебноеПоле = "Год4" Тогда
			Если Не ЗначениеЗаполнено(Объект.ДатаДокумента) Тогда 
				ОписанияОшибок.Добавить("ДатаДокумента", НСтр("ru = 'Не заполнено поле ""Дата регистрации""'"));
			Иначе
				ЗначениеПоля = Год(Объект.ДатаДокумента);
			КонецЕсли;
			
		ИначеЕсли СлужебноеПоле = "Год2" Тогда
			Если Не ЗначениеЗаполнено(Объект.ДатаДокумента) Тогда 
				ОписанияОшибок.Добавить("ДатаДокумента", НСтр("ru = 'Не заполнено поле ""Дата регистрации""'"));
			Иначе
				ЗначениеПоля = Прав(Строка(Год(Объект.ДатаДокумента)), 2);
			КонецЕсли;	
			
		ИначеЕсли СлужебноеПоле = "ИндексВида" Тогда 
			Если ЗначениеЗаполнено(Объект.ВидОбращения) Тогда
				ЗначениеПоля = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					Объект.ВидОбращения, "ИндексНумерации");
			КонецЕсли;
			
		ИначеЕсли СлужебноеПоле = "ИндексОтветственного" Тогда 
			Если ЗначениеЗаполнено(Объект.Ответственный) Тогда
				ЗначениеПоля = Объект.Ответственный.ИндексНумерации;
			КонецЕсли;
			
		//ИначеЕсли СлужебноеПоле = "НомерСвязанногоДокумента" Тогда 
		//	
		//	СвязанныйДокумент = Объект.Родитель;
		//	Если ЗначениеЗаполнено(СвязанныйДокумент) Тогда 
		//		ЗначениеПоля = СокрЛП(СвязанныйДокумент.НомерДокумента);
		//	КонецЕсли;
			
		КонецЕсли;
		
		ПараметрыНомера.Вставить(СлужебноеПоле, ЗначениеПоля);
		
	КонецЦикла;
	
	Возврат ПараметрыНомера;
	
КонецФункции	

// Формирует номер из структуры формата и значений параметров
Функция СформироватьНомерДокументаПоФормату(СтруктураФорматаНомера, ЗначенияПараметровНомера) 
	
	СформированныйНомер = "";
	
	Для Каждого ЭлементФормата Из СтруктураФорматаНомера Цикл
		
		Если ЭлементФормата.Ключ = "Разделитель" Тогда
			
			Если ЭлементФормата.ВходитВСлужебное = 0 Тогда
				СформированныйНомер = СформированныйНомер + ЭлементФормата.Значение;
			Иначе
				ЗначениеПараметра = "";
				СлужебноеПоле = СтруктураФорматаНомера.Получить(ЭлементФормата.ВходитВСлужебное - 1).Значение;
				ЗначенияПараметровНомера.Свойство(СлужебноеПоле, ЗначениеПараметра);
				Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда 
					СформированныйНомер = СформированныйНомер + ЭлементФормата.Значение;
				КонецЕсли;	
			КонецЕсли;	
			
		ИначеЕсли ЭлементФормата.Ключ = "СлужебноеПоле" Тогда
			
			ЗначениеПараметра = "";
			ЗначенияПараметровНомера.Свойство(ЭлементФормата.Значение, ЗначениеПараметра);
			
			Если ТипЗнч(ЗначениеПараметра) = Тип("Число") Тогда
				ЗначениеПараметра = Формат(ЗначениеПараметра, "ЧГ=");
			Иначе	
				ЗначениеПараметра = Строка(ЗначениеПараметра);
			КонецЕсли;	
			
			СформированныйНомер = СформированныйНомер + ЗначениеПараметра;
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат СформированныйНомер;
	
КонецФункции

Функция ПолучитьСписокСлужебныхПолей()
	
	СписокПолей = Новый СписокЗначений; // значение - служебное поле в строке формата
										// представление - представление служебного поля
	
	СписокПолей.Добавить(НСтр("ru = 'День'"), 				"День");  	// день месяца
	СписокПолей.Добавить(НСтр("ru = 'Месяц'"),   			"Месяц"); 	// номер месяца
	СписокПолей.Добавить(НСтр("ru = 'Квартал'"), 			"Квартал"); // номер квартала
	СписокПолей.Добавить(НСтр("ru = 'Год4'"), 				"Год4");  	// год 4 знака
	СписокПолей.Добавить(НСтр("ru = 'Год2'"), 				"Год2");  	// год 2 знака
	СписокПолей.Добавить(НСтр("ru = 'НомерДокОсн'"),		"НомерСвязанногоДокумента");
	СписокПолей.Добавить(НСтр("ru = 'ИндексВида'"),			"ИндексВида");
	СписокПолей.Добавить(НСтр("ru = 'ИндексОтв'"),			"ИндексОтветственного");
	СписокПолей.Добавить(НСтр("ru = 'Номер'"),  			"Номер"); 	// числовой номер
	
	Возврат СписокПолей;
	
КонецФункции	

// Получает нумератор документа
Функция ПолучитьПараметрыНумерацииДокумента(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Объект) = Тип("Структура") Тогда 
		ПараметрыНумерации = Объект;
	Иначе
		ПараметрыНумерации = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(Объект);
	КонецЕсли;	
	
	Возврат ПараметрыНумерации;
	
КонецФункции	

// Получает нумератор документа
Функция ПолучитьНумераторДокумента(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Объект) = Тип("Структура") Тогда 
		ПараметрыНумерации = Объект;
	Иначе
		ПараметрыНумерации = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(Объект);
	КонецЕсли;	
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
    "ВЫБРАТЬ
    |	Настройки.Нумератор КАК Нумератор,
    |	ВЫБОР
    |		КОГДА НЕ Настройки.ВидОбращения В (&ПустыеВидыДокументов)
    |				И Настройки.ВидОбращения = &ВидДокумента
    |				И &ФОВидДокумента = ИСТИНА
    |			ТОГДА 1
    |		ИНАЧЕ 0
    |	КОНЕЦ КАК Порядок
    |ИЗ
    |	РегистрСведений.НастройкиНумерации КАК Настройки
    |ГДЕ
    |	(Настройки.ВидОбращения В (&ПустыеВидыДокументов)
    |			ИЛИ НЕ Настройки.ВидОбращения В (&ПустыеВидыДокументов)
    |				И Настройки.ВидОбращения = &ВидДокумента
    |				И &ФОВидДокумента = ИСТИНА)
    |
    |УПОРЯДОЧИТЬ ПО
    |	Порядок УБЫВ";

	Запрос.УстановитьПараметр("ВидДокумента", ПараметрыНумерации.ВидОбращения);
	Запрос.УстановитьПараметр("ФОВидДокумента", ПолучитьФункциональнуюОпцию("УчитыватьВидыОбращений"));
	
	ПустыеВидыДокументов = Новый Массив;
	ПустыеВидыДокументов.Добавить(Неопределено);
	ПустыеВидыДокументов.Добавить(Справочники.ВидыОбращений.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("ПустыеВидыДокументов", ПустыеВидыДокументов);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Свернуть("Нумератор, Порядок");
	
	Если Результат.Количество() = 0 Тогда 
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для документа ""%1"" не найдены подходящие настройки нумерации. Обратитесь к администратору.'"),
			Строка(ПараметрыНумерации.Ссылка));
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ВызватьИсключение ТекстСообщения;
		
	ИначеЕсли Результат.Количество() = 1 Тогда 
		
		Возврат Результат[0].Нумератор;
		
	ИначеЕсли Результат[0].Порядок = Результат[1].Порядок Тогда 
			
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для документа ""%1"" найдены неоднозначные настройки нумерации. Обратитесь к администратору.'"),
			Строка(ПараметрыНумерации.Ссылка));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		ВызватьИсключение ТекстСообщения;
			
	Иначе
		
		Возврат Результат[0].Нумератор;
		
	КонецЕсли;
	
КонецФункции

// Освобождает номер в регистре
Процедура ОсвободитьНомер(СтруктураПараметров) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЧисловойНомер = СтруктураПараметров.ЧисловойНомер;
	Если ЧисловойНомер = 0 Или ЧисловойНомер = -1 Тогда 
		Возврат;
	КонецЕсли;
	
	// ручная нумерация
	Нумератор = ПолучитьНумераторДокумента(СтруктураПараметров);
	Если Не ЗначениеЗаполнено(Нумератор) Тогда
		Возврат;
	КонецЕсли;
	
	ПериодНумерации = НачалоПериодаНумерации(СтруктураПараметров.ДатаДокумента);
	
	СтруктураИзмерений = Новый Структура;
	СтруктураИзмерений.Вставить("СвязанныйДокумент", Справочники.Обращения.ПустаяСсылка());
	СтруктураИзмерений.Вставить("ВидОбращения", СтруктураПараметров.ВидОбращения);
	СтруктураИзмерений.Вставить("ПериодНумерации", 	  ПериодНумерации);
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.Нумерация");
		ЭлементБлокировки.УстановитьЗначение("СвязанныйДокумент", Справочники.Обращения.ПустаяСсылка());
		ЭлементБлокировки.УстановитьЗначение("ВидОбращения", СтруктураПараметров.ВидОбращения);
		ЭлементБлокировки.УстановитьЗначение("ПериодНумерации", ПериодНумерации);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		ТекущийНомер = РегистрыСведений.Нумерация.Получить(СтруктураИзмерений).ТекущийНомер;
		
		Если ТекущийНомер = ЧисловойНомер Тогда // уменьшить номер в регистре
			МенеджерЗаписи = РегистрыСведений.Нумерация.СоздатьМенеджерЗаписи();
			
			МенеджерЗаписи.ПериодНумерации 	  = ПериодНумерации;
			МенеджерЗаписи.ВидОбращения 	  = СтруктураПараметров.ВидОбращения;
			МенеджерЗаписи.СвязанныйДокумент  = Справочники.Обращения.ПустаяСсылка();
			МенеджерЗаписи.ТекущийНомер 	  = ТекущийНомер - 1;
			МенеджерЗаписи.Записать();
		КонецЕсли;	
		
		ЗафиксироватьТранзакцию();	
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры	
	
Функция ИспользуетсяПолеНумерации(СлужебноеПоле) Экспорт 
	
	СписокПолей = ПолучитьСписокСлужебныхПолей();
	
	Ключ = "";
	Для Каждого Строка Из СписокПолей Цикл
		Если Строка.Представление = СлужебноеПоле Тогда 
			Ключ = Строка.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Ключ = "" Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Справочник.ВидыДокументов КАК ВидыДокументов
	|ГДЕ
	|	ВидыДокументов.ФорматНомера ПОДОБНО &Ключ";
	
	Запрос.УстановитьПараметр("Ключ", "%"+Ключ+"%");
	
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции
