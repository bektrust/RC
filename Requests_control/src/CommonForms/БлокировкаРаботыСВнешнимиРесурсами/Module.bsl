
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	ПараметрыБлокировки = Константы.ПараметрыБлокировкиРаботыСВнешнимиРесурсами.Получить().Получить();
	ТестСнятияБлокировки = РегламентныеЗаданияСлужебный.ЗначениеНастройки("РасположениеКомандыСнятияБлокировки");
	
	Элементы.НадписьПредупреждение.Заголовок = 
		СтроковыеФункцииКлиентСервер.ФорматированнаяСтрока(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Нстр("ru = 'Размещение информационной базы изменилось с 
		|<b>%1</b>
		|на 
		|<b>%2</b>
		|
		|* Если информационная база была перемещена, нажмите <b>Информационная база перемещена</b>.
		|* Если это копия информационной базы, нажмите <b>Это копия информационной базы</b>.
		|	При этом работа со всеми внешними ресурсами (синхронизация данных, отправка почты и т.п.), выполняемая по расписанию,
		|	будет заблокирована для предотвращения конфликтов с основой информационной базой.
		|
		|%3.'"), ПараметрыБлокировки.СтрокаСоединения, СтрокаСоединения, ТестСнятияБлокировки));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИнформационнаяБазаПеремещена(Команда)
	ИнформационнаяБазаПеремещенаНаСервере();
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ЭтоКопияИнформационнойБазы(Команда)
	ЭтоКопияИнформационнойБазыНаСервере();
	Закрыть();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнформационнаяБазаПеремещенаНаСервере()
	
	РегламентныеЗаданияСлужебный.РазрешитьРаботуСВнешнимиРесурсами(ПараметрыБлокировки);
	
КонецПроцедуры

&НаСервере
Процедура ЭтоКопияИнформационнойБазыНаСервере()
	
	ЗависимостиЗаданий = РегламентныеЗаданияСлужебный.РегламентныеЗаданияЗависимыеОтФункциональныхОпций();
	НайденныеСтроки = ЗависимостиЗаданий.НайтиСтроки(Новый Структура("РаботаетСВнешнимиРесурсами", Истина));
	ОбработанныеЗадания = Новый Соответствие;
	Для Каждого СтрокаЗадания Из НайденныеСтроки Цикл
		Если ОбработанныеЗадания.Получить(СтрокаЗадания.РегламентноеЗадание) <> Неопределено Тогда
			Продолжить; // Задание уже было отключено.
		КонецЕсли;
		ОбработанныеЗадания.Вставить(СтрокаЗадания.РегламентноеЗадание);
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий") Тогда
				ПараметрыЗадания = Новый Структура;
				ПараметрыЗадания.Вставить("ОбластьДанных", ОбщегоНазначения.ЗначениеРазделителяСеанса());
				ПараметрыЗадания.Вставить("ИмяМетода", СтрокаЗадания.РегламентноеЗадание.ИмяМетода);
				ПараметрыЗадания.Вставить("Использование", Истина);
				МодульОчередьЗаданий = ОбщегоНазначения.ОбщийМодуль("ОчередьЗаданий");
				СписокЗаданий = МодульОчередьЗаданий.ПолучитьЗадания(ПараметрыЗадания);
				
				ПараметрыЗадания = Новый Структура("Использование", Ложь);
				Для Каждого Задание Из СписокЗаданий Цикл
					МодульОчередьЗаданий.ИзменитьЗадание(Задание.Идентификатор, ПараметрыЗадания);
					ПараметрыБлокировки.ОтключенныеЗадания.Добавить(Задание.Идентификатор);
				КонецЦикла;
			КонецЕсли;
		Иначе
			Отбор = Новый Структура;
			Отбор.Вставить("Метаданные", СтрокаЗадания.РегламентноеЗадание);
			Отбор.Вставить("Использование", Истина);
			МассивЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
			Для Каждого Задание Из МассивЗаданий Цикл
				Задание.Использование = Ложь;
				Задание.Записать();
				ПараметрыБлокировки.ОтключенныеЗадания.Добавить(Задание.УникальныйИдентификатор);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	ПараметрыБлокировки.РаботаСВнешнимиРесурсамиЗаблокирована = Истина;
	ХранилищеЗначения = Новый ХранилищеЗначения(ПараметрыБлокировки);
	Константы.ПараметрыБлокировкиРаботыСВнешнимиРесурсами.Установить(ХранилищеЗначения);
	
КонецПроцедуры

#КонецОбласти
